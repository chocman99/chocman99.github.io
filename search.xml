<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/06/15/Mybatis/"/>
      <url>/2022/06/15/Mybatis/</url>
      
        <content type="html"><![CDATA[<h3 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h3><h4 id="一-MyBatis历史"><a href="#一-MyBatis历史" class="headerlink" title="一.MyBatis历史"></a>一.MyBatis历史</h4><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁 移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于 2013年11月迁移到Github。 </p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架 包括SQL Maps和Data Access Objects（DAO）。</p><h4 id="二-MyBatis特性"><a href="#二-MyBatis特性" class="headerlink" title="二.MyBatis特性"></a>二.MyBatis特性</h4><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p><p>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p><p>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</p><p>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><h4 id="三-MyBatis下载"><a href="#三-MyBatis下载" class="headerlink" title="三.MyBatis下载"></a>三.MyBatis下载</h4><p>MyBatis下载地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><h4 id="四-和其它持久化层技术对比"><a href="#四-和其它持久化层技术对比" class="headerlink" title="四.和其它持久化层技术对比"></a>四.和其它持久化层技术对比</h4><p>JDBC<br>        SQL 夹杂在Java代码中耦合度高，导致硬编码内伤<br>        维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见<br>        代码冗长，开发效率低</p><p>Hibernate 和 JPA<br>        操作简便，开发效率高<br>        程序中的长难复杂 SQL 需要绕过框架<br>        内部自动生产的 SQL，不容易做特殊优化<br>        基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。<br>        反射操作太多，导致数据库性能下降<br>        （注：Hibernate 是全自动化的，不需要去写sql代码）</p><p>MyBatis<br>        轻量级，性能出色<br>        SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据<br>        开发效率稍逊于HIbernate，但是完全能够接受<br>        （注：MyBatis是半自动化的）</p><h3 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h3><h4 id="一-开发环境"><a href="#一-开发环境" class="headerlink" title="一.开发环境"></a>一.开发环境</h4><p>IDE：idea 2021.2.2<br>构建工具：maven 3.8.4<br>MySQL版本：MySQL 8.0.28<br>MyBatis版本：3.5.10</p><h4 id="二-创建maven工程"><a href="#二-创建maven工程" class="headerlink" title="二.创建maven工程"></a>二.创建maven工程</h4><p>1.打包方式：jar</p><p>2.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三-创建MyBatis的核心配置文件"><a href="#三-创建MyBatis的核心配置文件" class="headerlink" title="三.创建MyBatis的核心配置文件"></a>三.创建MyBatis的核心配置文件</h4><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p><p>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：spring的约束是xml，mybatis的约束是dtd。功能是一样的。<br>       dtd约束的DOCTYPE标签后边的单词必定是底下当前配置文件的根标签，此处是configuration</p><p>​mybatis官方文档里有各种配置信息</p><h4 id="四-创建mapper接口"><a href="#四-创建mapper接口" class="headerlink" title="四.创建mapper接口"></a>四.创建mapper接口</h4><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要创建mapper接口，因为mybatis有面向接口编程的功能。每当我们调用接口中的方法，它就会自动匹配一个sql语句，并且去执行</p><h4 id="五-创建MyBatis的映射文件"><a href="#五-创建MyBatis的映射文件" class="headerlink" title="五.创建MyBatis的映射文件"></a>五.创建MyBatis的映射文件</h4><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。<br>        对象：Java的实体类对象<br>        关系：关系型数据库<br>        映射：二者之间的对应关系</p><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><p>1、映射文件的命名规则：<br>        表所对应的实体类的类名+Mapper.xml<br>        例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml<br>        因此一个映射文件对应一个实体类，对应一张表的操作<br>        MyBatis映射文件用于编写SQL，访问以及操作表中的数据<br>        MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</p><p>2、MyBatis中可以面向接口操作数据，要保证两个一致：<br>        1）mapper接口的全类名和映射文件的命名空间（namespace）保持一致<br>        2）mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p><p>表–实体类–mapper接口–映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yc.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user value (null,&#x27;admin&#x27;,&#x27;123456&#x27;.&#x27;男&#x27;,&#x27;123@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="六-通过junit测试功能"><a href="#六-通过junit测试功能" class="headerlink" title="六.通过junit测试功能"></a>六.通过junit测试功能</h4><p>MyBatis提供了一个操作数据库的会话对象，SqlSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//加载核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获取mapper接口对象  getMapper底层使用的代理模式，使用方法getMapper 的好处是：可以不需要对接口中的方法进行实现，由Mybaits 框架实现</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//测试功能</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的 会话） SqlSessionFactory：是“生产”SqlSession的“工厂”。<br>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的 相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p><p><img src="D:\Typora\images\image-20220714210814310.png" alt="image-20220714210814310"></p><h4 id="七-加入log4j日志功能"><a href="#七-加入log4j日志功能" class="headerlink" title="七.加入log4j日志功能"></a>七.加入log4j日志功能</h4><p>1.加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.加入log4j的配置文件</p><p>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日志的级别<br>        FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)<br>        从左到右打印的内容越来越详细</p><h4 id="八-总结：测试增删改查功能"><a href="#八-总结：测试增删改查功能" class="headerlink" title="八.总结：测试增删改查功能"></a>八.总结：测试增删改查功能</h4><p>1.mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        MyBatis面向接口编程的两个一致：</span></span><br><span class="line"><span class="comment">        1.映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">        2.映射文件中SQL语句的id要和mapper接口中的方法名一致</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        表--实体类--mapper接口--映射文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有的用户信息</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.MyBatis的映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yc.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user value (null,&#x27;admin&#x27;,&#x27;123456&#x27;,20,&#x27;男&#x27;,&#x27;123@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--void updateUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update t_user set username = &#x27;张三&#x27; where id = 4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--void deleteUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from t_user where id = 5</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        查询功能的标签必须设置resultType或resultMap</span></span><br><span class="line"><span class="comment">        resultType：设置默认的映射关系</span></span><br><span class="line"><span class="comment">        resultMap：设置自定义的映射关系</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.yc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.yc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SqlSession默认不自动提交事务，若需要自动提交事务。可以使用sqlSessionFactory.openSession(true);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);    <span class="comment">//true：设置自动提交事务</span></span><br><span class="line">        <span class="comment">//获取mapper接口对象  getMapper底层使用的代理模式，使用方法getMapper 的好处是：可以不需要对接口中的方法进行实现，由Mybaits 框架实现</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//测试功能</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDetele</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.deleteUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectUserById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有用户信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAllUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = mapper.getAllUser();</span><br><span class="line">        list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询一条数据，对应的是实体类对象<br>查询多条数据，对应的就是list集合</p><h3 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h3><p>核心配置文件中的标签必须按照固定的顺序：</p><p>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MyBatis核心配置文件中，标签的顺序：</span></span><br><span class="line"><span class="comment">        properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="line"><span class="comment">        objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,</span></span><br><span class="line"><span class="comment">        environments?,databaseIdProvider?,mappers?--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--typeAlias:设置某个类型的别名     （用的少，通常用package标签）</span></span><br><span class="line"><span class="comment">            属性：type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">                 alias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">                 (注：类型别名不区分大小写</span></span><br><span class="line"><span class="comment">                 如果不写alias，那所设置的类型将拥有默认的别名，这个别名就是他的类名，且不区分大小写，即如果不写alias，那么他的类名就是他的别名，不区分大小写)</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.yc.mybatis.pojo.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.yc.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--environments：配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">            属性：id：表示连接数据库的环境的唯一标识，不能重复</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">                属性：type=“JDBC/MANAGED&quot;</span></span><br><span class="line"><span class="comment">                     JDBC:表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">                     MANAGED:被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--dataSource：配置数据源</span></span><br><span class="line"><span class="comment">                属性：type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                     type=”POOLED/UNPOOLED/JNDI“</span></span><br><span class="line"><span class="comment">                     POOLED:表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                     UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">                     JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位引入映射文件</span></span><br><span class="line"><span class="comment">            要求：1.mapper接口所在的包要和映射文件所在的包一致   (resources目录下创建包时用/分隔，若用.分隔，那么.会作为包名创建出来)</span></span><br><span class="line"><span class="comment">                 2.mapper接口要和映射文件的名字一致</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.yc.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h3><p>1.添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user value (null,&#x27;admin&#x27;,&#x27;123456&#x27;,20,&#x27;男&#x27;,&#x27;123@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id = 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set username = &#x27;张三&#x27; where id = 4</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.查询一个实体类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    查询功能的标签必须设置resultType或resultMap</span></span><br><span class="line"><span class="comment">    resultType：设置默认的映射关系</span></span><br><span class="line"><span class="comment">    resultMap：设置自定义的映射关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.yc.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = 3</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.查询集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<br>        1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系<br>                resultType：自动映射，用于属性名和表中字段名一致的情况<br>                resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况<br>        2、当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常<br>                TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p><h3 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h3><p>MyBatis获取参数值的两种方式：${}和#{} </p><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值 </p><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号，不用手动添加了</p><h4 id="一-单个字面量类型的参数"><a href="#一-单个字面量类型的参数" class="headerlink" title="一.单个字面量类型的参数"></a>一.单个字面量类型的参数</h4><p>若mapper接口中的方法参数为单个的字面量类型</p><p>此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><p>一般情况下不使用字符串拼接：很麻烦，而且会造成Sql注入。<br>若能用#{}，就不用${}。除非必须要使用${}</p><p>案例：（获取sqlSession在utils工具类里SqlSessionUtils）</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;username&#125;--&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByUsername</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserByUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装的sqlSession类，以后再实现功能直接调用即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-多个字面量类型的参数"><a href="#二-多个字面量类型的参数" class="headerlink" title="二.多个字面量类型的参数"></a>二.多个字面量类型的参数</h4><p>若mapper接口中的方法参数为多个时<br>此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以 param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的 值，注意${}需要手动加单引号</p><p>理解：<br>在mybatis底层，如果检测到了当前mapper接口中的方法有多个参数时，它会自动把这些参数放在map集合里，这个mapper集合里会以两种方式存取数据：<br>        1.以arg0、arg1…为键，以参数为值<br>        2.以param1，param2…为键，以参数为值</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证登录</span></span><br><span class="line">User <span class="title function_">checkLogin</span><span class="params">(String username , String password)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username , String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;param1&#125; and password= #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLogin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLogin(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-map集合类型的参数"><a href="#三-map集合类型的参数" class="headerlink" title="三.map集合类型的参数"></a>三.map集合类型的参数</h4><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中<br>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证登录（参数为map）</span></span><br><span class="line">User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password= #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">    System.out.println(user);</span><br></pre></td></tr></table></figure><h4 id="四-实体类类型的参数"><a href="#四-实体类类型的参数" class="headerlink" title="四.实体类类型的参数"></a>四.实体类类型的参数</h4><p>若mapper接口中的方法参数为实体类对象时<br>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加用户信息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;1234@qq.com&quot;</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-使用-Param标识参数"><a href="#五-使用-Param标识参数" class="headerlink" title="五.使用@Param标识参数"></a>五.使用@Param标识参数</h4><p>可以通过@Param注解标识mapper接口中的方法参数<br>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值， 注意${}需要手动加单引号</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证登录（使用@Param）</span></span><br><span class="line">User <span class="title function_">checkLoginByParam</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username , <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByParam(@Param(&quot;usernanme&quot;) String username , @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password= #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByParam(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>MyBatis获取参数值的两种方式：${}和#{}<br>${}本质就是字符串拼接<br>#{}本质就是占位符赋值<br>若能用#{}，就不用${}。除非必须要使用${}</p><p>MyBatis获取参数的各种情况：<br>        1.mapper接口方法的参数为单个字面量类型<br>                可以通过${}和#{}以任意的名称获取参数值，但是需要注意${}的单引号问题<br>        2.mapper接口方法的参数为多个时<br>                此时MyBatis会将这些参数放在一个map集合中，以两种方式进行存储<br>                        a&gt; 以arg0、arg1…为键，以参数为值<br>                        b&gt; 以param1，param2…为键，以参数为值<br>                因此只需要通过#{}和${}以键的方式访问值即可，但是需要注意${}的单引号问题<br>        3.若mapper接口方法的参数有多个时，可以手动将这些参数放在一个map中存储<br>                只需要通过#{}和${}以键的方式访问值即可，但是需要注意${}的单引号问题<br>        4.mapper接口方法的参数是实体类类型的参数<br>                只需要通过#{}和${}以属性的方式访问属性值即可，但是需要注意${}的单引号问题<br>        5.使用@Param注解命名参数<br>                此时MyBatis会将这些参数放在一个map集合中，以两种方式进行存储<br>                        a&gt; 以@Param注解的值为键，以参数为值<br>                        b&gt; param1，param2…为键，以参数为值<br>                因此只需要通过#{}和${}以键的方式访问值即可，但是需要注意${}的单引号问题</p><p><strong>建议</strong>：最终整合为两种情况使用：<br>        1.实体类对象（第4种）<br>        2.全部都用@Param（第5种）<br>（当然用哪种方法都可以）</p><h3 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h3><h4 id="一-查询一个实体类对象"><a href="#一-查询一个实体类对象" class="headerlink" title="一.查询一个实体类对象"></a>一.查询一个实体类对象</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户信息</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    System.out.println(mapper.getUserById(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-查询一个list集合"><a href="#二-查询一个list集合" class="headerlink" title="二.查询一个list集合"></a>二.查询一个list集合</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的用户信息</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    System.out.println(mapper.getAllUser());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-查询单个数据"><a href="#三-查询单个数据" class="headerlink" title="三.查询单个数据"></a>三.查询单个数据</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户信息的总记录数</span></span><br><span class="line">Integer <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Integer getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span>    <span class="comment">&lt;!--resultType里写java.long.Integer或者Integer或者integer或者Int或者int都可以，在MyBatis官方文档里可以看到是因为类型别名--&gt;</span></span><br><span class="line">    select count(*) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    System.out.println(mapper.getCount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-查询一条数据为map集合"><a href="#四-查询一条数据为map集合" class="headerlink" title="四.查询一条数据为map集合"></a>四.查询一条数据为map集合</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户id查询用户信息为map集合</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">getUserByIdToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String,Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByIdToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    System.out.println(mapper.getUserByIdToMap(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-查询多条数据为map集合"><a href="#五-查询多条数据为map集合" class="headerlink" title="五.查询多条数据为map集合"></a>五.查询多条数据为map集合</h4><p>方法一：</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有用户信息为map集合        查询出来一条数据会转换为一个map。要是查询多条数据，每一条数据都会转换成map，那么不能用一个map集合去接收，因为这和用实体类对象接收多条数据是同一个性质。可以把多个map放到一个list集合中</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String,Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllUserToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    System.out.println(mapper.getAllUserToMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><p>创建mapper接口（通过id作为标识查询多条数据）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span>   <span class="comment">//设置map集合的键，它会把当前查询出来的数据的某一个字段来作为键，把当前查询出来的数据转换成的map集合作为值</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>输出的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;3=&#123;password=123456, sex=男, id=3, age=20, email=123@qq.com, username=admin&#125;, 4=&#123;password=123456, sex=男, id=4, age=20, email=123@qq.com, username=张三&#125;, 6=&#123;password=123, sex=男, id=6, age=23, email=1234@qq.com, username=李四&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>MyBatis的各种查询功能<br>1.若查询出的数据只有一条<br>        a&gt;可以通过实体类对象接收<br>        b&gt;可以通过list集合接收<br>        c&gt;可以通过map集合接收（以字段为键，以字段所对应的值为值）<br>                结果：{password&#x3D;123456, sex&#x3D;男, id&#x3D;3, age&#x3D;20, email&#x3D;<a href="mailto:&#49;&#50;&#51;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#49;&#50;&#51;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a>, username&#x3D;admin}<br>2.若查询出的数据有多条<br>        a&gt;可以通过实体类类型的list集合接收<br>        b&gt;可以通过map类型的list集合接收<br>        c&gt;可以在mapper接口的方法上添加@MapKey注解，此时就可以将每条数据转换的map集合作为值，以某个字段的值作为键，放在同一个map结合中<br>注意：一定不能通过实体类对象接收，此时会抛出异常TooManyResultsException</p><p>MyBatis中设置了默认的类型别名：<br>        java.long.Integer–&gt;int,integer<br>        Map–&gt;map<br>        String–&gt;string<br>        …</p><h3 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h3><h4 id="一-模糊查询（前两种方法不能用-）"><a href="#一-模糊查询（前两种方法不能用-）" class="headerlink" title="一.模糊查询（前两种方法不能用#{}）"></a>一.模糊查询（前两种方法不能用#{}）</h4><p>三种模糊查询的sql语句。前两种不能用#{}，第三种可以，第三种直接拼接是最常用的</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名模糊查询用户信息</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;username&#125;%&#x27;--&gt;</span>    <span class="comment">&lt;!--使用$&#123;&#125;的方法。不能用#&#123;&#125;，因为sql语句中，单引号代表里面是字符串，那么问号就代表字符串，不会被解析成占位符--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)--&gt;</span>    <span class="comment">&lt;!--使用字符串拼接的方法。concat进行字符串拼接--&gt;</span></span><br><span class="line">    select * from t_user where username like &quot;%&quot;#&#123;username&#125;&quot;%&quot;  <span class="comment">&lt;!--在两边百分号加上双引号，中间直接拼接#&#123;&#125;的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByLike</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    List&lt;User&gt; list = mapper.getUserByLike(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-批量删除（不能用-）"><a href="#二-批量删除（不能用-）" class="headerlink" title="二.批量删除（不能用#{}）"></a>二.批量删除（不能用#{}）</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id in($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteMore</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-动态设置表名（不能用-）"><a href="#三-动态设置表名（不能用-）" class="headerlink" title="三.动态设置表名（不能用#{}）"></a>三.动态设置表名（不能用#{}）</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态设置表名,查询指定表中的数据</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTableName</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTableName(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTableName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from $&#123;tableName&#125;  <span class="comment">&lt;!--不能用#&#123;&#125;，否则有单引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByTableName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    List&lt;User&gt; list = mapper.getUserByTableName(<span class="string">&quot;t_user&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-添加功能获取自增的主键"><a href="#四-添加功能获取自增的主键" class="headerlink" title="四.添加功能获取自增的主键"></a>四.添加功能获取自增的主键</h4><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加用户信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    useGeneratedKeys:设置当前标签中的sql使用了自增的id</span></span><br><span class="line"><span class="comment">    keyProperty：将自增的主键的值赋值给传输到映射文件中参数的某个属性</span></span><br><span class="line"><span class="comment">    （若不加这两个属性，idea里输出的结果的id就是null，不会显示出来，不过数据库上边的id还是会自增）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="number">24</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@163.com&quot;</span>);</span><br><span class="line">    mapper.insertUser(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h3><h4 id="一-resultMap处理字段和属性的映射关系"><a href="#一-resultMap处理字段和属性的映射关系" class="headerlink" title="一.resultMap处理字段和属性的映射关系"></a>一.resultMap处理字段和属性的映射关系</h4><p>若字段名和实体类中的属性名不一致，字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰），即若字段名和实体类中的属性名不一致，那就赋不了值，则可以通过三种方法解决</p><p>有三种方法：</p><p>1.为字段名起别名，保持和属性名的一致</p><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的员工信息</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getAllEmp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid,emp_name empName,age sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllEmp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    List&lt;Emp&gt; list = mapper.getAllEmp();</span><br><span class="line">    list.forEach(emp -&gt; System.out.println(emp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.全局配置</p><p>在mybatis配置文件中，设置全局配置mapUnderscoreToCamelCase：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置全局配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将下划线自动映射为驼峰，emp_name:empName--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ture&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完后就可以在mapper映射文件里写select * from t_emp</p><p>3.resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    resultMap：设置自定义映射关系</span></span><br><span class="line"><span class="comment">    id：唯一标识，不能重复</span></span><br><span class="line"><span class="comment">    type：设置映射关系中的实体类类型</span></span><br><span class="line"><span class="comment">    子标签：</span></span><br><span class="line"><span class="comment">        id：设置主键的映射关系</span></span><br><span class="line"><span class="comment">        result：设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">        property：设置映射关系中的属性名，必须是type属性所设置的实体类类型中的属性名</span></span><br><span class="line"><span class="comment">        column：设置映射关系中的字段名，必须是sql语句查询出的字段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResulterMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResulterMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二-多对一映射处理（对一，对对象）"><a href="#二-多对一映射处理（对一，对对象）" class="headerlink" title="二.多对一映射处理（对一，对对象）"></a>二.多对一映射处理（对一，对对象）</h4><p>有三种方式：</p><h5 id="1-处理多对一映射关系方式一：级联属性"><a href="#1-处理多对一映射关系方式一：级联属性" class="headerlink" title="1.处理多对一映射关系方式一：级联属性"></a>1.处理多对一映射关系方式一：级联属性</h5><p>案例：</p><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询员工以及员工所对应的部门信息</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpAndDept</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理多对一映射关系方式一：级联属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.did = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpAndDept</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    List&lt;Emp&gt; emp = mapper.getEmpAndDept(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-处理多对一映射关系方式二：association"><a href="#2-处理多对一映射关系方式二：association" class="headerlink" title="2.处理多对一映射关系方式二：association"></a>2.处理多对一映射关系方式二：association</h5><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理多对一映射关系方式二：association--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--association：处理多对一的映射关系</span></span><br><span class="line"><span class="comment">        property：需要处理多对一的映射关系的属性名</span></span><br><span class="line"><span class="comment">        javaType：该属性的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.did = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-处理多对一映射关系方式二：分步查询"><a href="#3-处理多对一映射关系方式二：分步查询" class="headerlink" title="3.处理多对一映射关系方式二：分步查询"></a>3.处理多对一映射关系方式二：分步查询</h5><p>1）查询员工信息</p><p>EmpMapper接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过分布查询，查询员工以及员工所对应的部门信息</span></span><br><span class="line"><span class="comment">    分布查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure><p>EmpMapper映射文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select:设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）、</span></span><br><span class="line"><span class="comment">        column:设置分布查询的条件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.yc.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）根据员工所对应的部门id查询部门信息</p><p>DeptMapper接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过分布查询，查询员工以及员工所对应的部门信息</span></span><br><span class="line"><span class="comment">    分布查询第二步：通过did查询员工所对应的部门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><p>DeptMapper映射文件中（开启驼峰自动转换，用resultType即可）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where  did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpAndDeptByStep</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    List&lt;Emp&gt; emp = mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</p><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</p><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</p><h4 id="三-一对多映射处理（对多，对集合）"><a href="#三-一对多映射处理（对多，对集合）" class="headerlink" title="三.一对多映射处理（对多，对集合）"></a>三.一对多映射处理（对多，对集合）</h4><p>有两种方式：</p><h5 id="1-collection"><a href="#1-collection" class="headerlink" title="1.collection"></a>1.collection</h5><p>创建mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取部门以及部门中所有的员工信息</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmp</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><p>创建映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--collection：处理一对多的映射关系</span></span><br><span class="line"><span class="comment">        ofType：表示该属性所对应的集合中存储数据的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptAndEmp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DeptMapper.class);</span><br><span class="line">    <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> mapper.getDeptAndEmp(<span class="number">1</span>);</span><br><span class="line">    System.out.println(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-分步查询"><a href="#2-分步查询" class="headerlink" title="2.分步查询"></a>2.分步查询</h5><p>1）查询部门信息</p><p>EmpMapper接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过分步查询，查询部门以及部门中所有的员工信息</span></span><br><span class="line"><span class="comment">    分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><p>EmpMapper映射文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.yc.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）根据部门id查询部门中的所有员工</p><p>EmpMapper接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过分步查询，查询部门以及部门中所有的员工信息</span></span><br><span class="line"><span class="comment">    分步查询第二步：根据did查询员工信息 （跟上边的第一步不是一起的，和DeptMapper里的第一步是一起的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><p>EmpMapper映射文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptAndEmpByStep</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">        <span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DeptMapper.class);</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> mapper.getDeptAndEmpByStepOne(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        System.out.println(dept);</span></span><br><span class="line">        System.out.println(dept.getDeptName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一对多分步查询的优点与多对一的分步查询的优点相同</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 解决字段名和属性名不一致的情况：</span><br><span class="line">*   a&gt;为字段名起别名，保持和属性名的一致</span><br><span class="line">*   b&gt;设置全局配置，将下划线自动映射为驼峰</span><br><span class="line">*       &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;ture&quot;/&gt;</span><br><span class="line">*   c&gt;通过resultMap设置自定义的映射关系</span><br><span class="line">*       &lt;resultMap id=&quot;empResulterMap&quot; type=&quot;Emp&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;eid&quot; column=&quot;eid&quot;&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property=&quot;empName&quot; column=&quot;emp_name&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=&quot;sex&quot; column=&quot;sex&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property=&quot;email&quot; column=&quot;email&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/resultMap&gt;</span><br><span class="line">*</span><br><span class="line">* 处理多对一的映射关系：</span><br><span class="line">*   a&gt;级联属性赋值</span><br><span class="line">*   b&gt;association</span><br><span class="line">*   c&gt;分步查询</span><br><span class="line">*</span><br><span class="line">* 处理一对多的映射关系：</span><br><span class="line">*   a&gt;collection</span><br><span class="line">*   b&gt;分步查询</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决<br>拼接SQL语句字符串时的痛点问题</p><h4 id="一-if"><a href="#一-if" class="headerlink" title="一.if"></a>一.if</h4><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中<br>的内容不会执行</p><p>mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条件查询</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpByCondition</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and emp_name = #&#123;empName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and age = #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and sex = #&#123;sex&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpByCondition</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    List&lt;Emp&gt; list = mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-where"><a href="#二-where" class="headerlink" title="二.where"></a>二.where</h4><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span>    <span class="comment">&lt;!--同样的接口，把上边的sql语句标识改了，让程序匹配这个标识的SQL语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>where和if一般结合使用：<br>a&gt;若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字<br>b&gt;若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and去掉<br>注意：where标签不能去掉条件最后多余的and</p><h4 id="三-trim"><a href="#三-trim" class="headerlink" title="三.trim"></a>三.trim</h4><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span>    <span class="comment">&lt;!--同样的接口，把上边的sql语句标识改了，让程序匹配这个标识的SQL语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>trim用于去掉或添加标签中的内容<br>常用属性：<br>prefix：在trim标签中的内容的前面添加某些内容<br>prefixOverrides：在trim标签中的内容的前面去掉某些内容<br>suffix：在trim标签中的内容的后面添加某些内容<br>suffixOverrides：在trim标签中的内容的后面去掉某些内容</p><h4 id="四-choose、when、otherwise"><a href="#四-choose、when、otherwise" class="headerlink" title="四.choose、when、otherwise"></a>四.choose、when、otherwise</h4><p>choose、when、otherwise相当于if…else if..else</p><p>mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试choose、when、otherwise</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpByChoose</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByChoose(Emp emp);--&gt;</span>   <span class="comment">&lt;!--如果有一个when标签里的语句成立，那么后边的就都不会执行了，就相当于if else语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                emp_name = #&#123;empName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                sex = #&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                email = #&#123;email&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                did = 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpByChoose</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    List&lt;Emp&gt; list = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-foreach"><a href="#五-foreach" class="headerlink" title="五.foreach"></a>五.foreach</h4><p>可以通过foreach实现批量删除和批量添加的操作</p><h5 id="1-通过数组实现批量删除"><a href="#1-通过数组实现批量删除" class="headerlink" title="1.通过数组实现批量删除"></a>1.通过数组实现批量删除</h5><p>mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过数组实现批量删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMoreByArray</span><span class="params">(<span class="meta">@Param(&quot;eids&quot;)</span> Integer[] eids)</span>;</span><br></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(@Param(&quot;eids&quot;) Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种写法</span></span><br><span class="line"><span class="comment">        delete from t_emp where eid in</span></span><br><span class="line"><span class="comment">        &lt;foreach collection=&quot;eids&quot; item=&quot;eid&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span></span><br><span class="line"><span class="comment">            #&#123;eid&#125;</span></span><br><span class="line"><span class="comment">        &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第二种写法--&gt;</span></span><br><span class="line">    delete from t_emp where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">        eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testdeleteMoreByArray</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-通过List集合实现批量添加"><a href="#2-通过List集合实现批量添加" class="headerlink" title="2.通过List集合实现批量添加"></a>2.通过List集合实现批量添加</h5><p>mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过List集合实现批量添加</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertMoreByList</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span> List&lt;Emp&gt; emps)</span>;</span><br></pre></td></tr></table></figure><p>映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp value</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertMoreByList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">32</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>);</span><br><span class="line">    List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">    System.out.println(mapper.insertMoreByList(emps));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性：<br>collection：设置要循环的数组或集合<br>item：表示集合或数组中的每一个数据<br>separator：设置循环体之间的分隔符<br>open：设置foreach标签中的内容的开始符<br>close：设置foreach标签中的内容的结束符</p><h4 id="六-SQL片段"><a href="#六-SQL片段" class="headerlink" title="六.SQL片段"></a>六.SQL片段</h4><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询语句时可用sql片段来代替--&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 动态SQL：</span><br><span class="line"> * 1.if：根据标签中test属性所对应的表达式决定标签中的内容是否需要拼接到SQL中</span><br><span class="line"> * 2.where:</span><br><span class="line"> *      当where标签中有内容时，会自动生成where关键字，并且将内容前多余的and或or去掉</span><br><span class="line"> *      where标签中没有内容时，此时where标签没有任何效果</span><br><span class="line"> *      注意：where标签不能将其中内容后面多余的and或or去掉</span><br><span class="line"> * 3.trim：</span><br><span class="line"> * 若标签中有内容时：</span><br><span class="line"> *      prefix:将trim标签中内容前面添加指定内容</span><br><span class="line"> *      suffix:将trim标签中内容后面添加指定内容</span><br><span class="line"> *      prefixOverrides:将trim标签中内容前面去掉指定内容</span><br><span class="line"> *      suffixOverrides:将trim标签中内容后面去掉指定内容</span><br><span class="line"> * 若标签中没有内容时，trim标签也没有任何效果</span><br><span class="line"> * 4.choose、when、otherwise，相当于if...else if...else</span><br><span class="line"> *      when至少要有一个，otherwise最多只能有一个</span><br><span class="line"> * 5.foreach</span><br><span class="line"> *      collection:设置需要循环的数组或集合</span><br><span class="line"> *      item：表示数组或集合中的每一个数据</span><br><span class="line"> *      separator：循环体之间的分隔符</span><br><span class="line"> *      open：表示foreach标签所循环的所有内容的开始符</span><br><span class="line"> *      close：表示foreach标签所循环的所有内容的结束符</span><br><span class="line"> * 6.sql标签</span><br><span class="line"> *      设置SQL片段：&lt;sql id=&quot;empColumns&quot;&gt;eid,emp_name,age,sex,email&lt;/sql&gt;</span><br><span class="line"> *      引用SQL片段：&lt;include refid=&quot;empColumns&quot;&gt;&lt;/include&gt;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h3><p>缓存只对查询功能有效果</p><h4 id="一-MyBatis的一级缓存"><a href="#一-MyBatis的一级缓存" class="headerlink" title="一.MyBatis的一级缓存"></a>一.MyBatis的一级缓存</h4><p>一级缓存是默认开启的</p><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p><p>使一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓试，即使用clearCache()，不过clearCache()只会对一级缓存有效果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试一级缓存</span></span><br><span class="line">Emp <span class="title function_">getEmpByEid</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertEmp</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Emp getEmpByEid(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where eid =#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--void insertEmp(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmp&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp value (null,#&#123;empName&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试一级缓存，通过两个SqlSession使缓存失效</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp1);</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper2.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过增删改和手动清空缓存使缓存失效</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两次查询中增加一次添加的操作（增删改会造成清空缓存）</span></span><br><span class="line"><span class="comment">//    mapper1.insertEmp(new Emp(null,&quot;abc&quot;,23,&quot;男&quot;,&quot;12345@qq.com&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动清空缓存</span></span><br><span class="line">    sqlSession1.clearCache();</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper1.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-MyBatis的二级缓存"><a href="#二-MyBatis的二级缓存" class="headerlink" title="二.MyBatis的二级缓存"></a>二.MyBatis的二级缓存</h4><p>二级缓存需要手动开启</p><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存开启的条件：<br>        1.在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置<br>        2.在映射文件中设置标签<cache /><br>        3.二级缓存必须在SqlSession关闭或提交之后有效<br>        4.查询的数据所转换的实体类类型必须实现序列化的接口</p><p>使二级缓存失效的情况：<br>        两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><p>在映射文件中设置标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在要查询的实体类上实现序列化的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTwoCache</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line">        System.out.println(mapper1.getEmpByEid(<span class="number">1</span>));</span><br><span class="line">        sqlSession1.close();</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line">        System.out.println(mapper2.getEmpByEid(<span class="number">1</span>));</span><br><span class="line">        sqlSession2.close();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-二级缓存的相关配置"><a href="#三-二级缓存的相关配置" class="headerlink" title="三.二级缓存的相关配置"></a>三.二级缓存的相关配置</h4><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><p>eviction属性：缓存回收策略<br>        LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。<br>        FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。<br>        SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br>        WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。<br>    默认的是 LRU。</p><p>flushInterval属性：刷新间隔，单位毫秒<br>        默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p><p>size属性：引用数目，正整数<br>        代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p><p>readOnly属性：只读，true&#x2F;false<br>        true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。<br>        false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p><h4 id="四-MyBatis缓存查询的顺序"><a href="#四-MyBatis缓存查询的顺序" class="headerlink" title="四.MyBatis缓存查询的顺序"></a>四.MyBatis缓存查询的顺序</h4><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。<br>如果二级缓存没有命中，再查询一级缓存<br>如果一级缓存也没有命中，则查询数据库<br>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p><h4 id="五-整合第三方缓存EHCache"><a href="#五-整合第三方缓存EHCache" class="headerlink" title="五.整合第三方缓存EHCache"></a>五.整合第三方缓存EHCache</h4><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.各jar包功能</p><table><thead><tr><th align="left">jar包功能</th><th>作用</th></tr></thead><tbody><tr><td align="left">mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td align="left">ehcache</td><td>EHCache核心包</td></tr><tr><td align="left">slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td align="left">logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><p>3.创建EHCache的配置文件ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\Java\Mybatis\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.设置二级缓存的类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>5.加入logback日志</p><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。</p><p>创建logback的配置文件logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger]</span><br><span class="line">                [%msg]%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.EHCache配置文件说明</p><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</td></tr></tbody></table><h3 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h3><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<br>        Java实体类<br>        Mapper接口<br>        Mapper映射文件</p><h4 id="一-创建逆向工程的步骤"><a href="#一-创建逆向工程的步骤" class="headerlink" title="一.创建逆向工程的步骤"></a>一.创建逆向工程的步骤</h4><p>1.添加依赖和插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建MyBatis的核心配置文件</p><p>比如需要的jdbc.properties、log4j.xml、mybatis-config.xml等等</p><p>3.创建逆向工程的配置文件</p><p>文件名必须是：generatorConfig.xml（里边的信息根据自身要求做修改）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span>  <span class="comment">&lt;!--此处报红不需要管--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">            MyBatis3Simple: 生成基本的CRUD（清新简洁版）（只有增删改查5个方法：增、删、改、查一条、查所有）</span></span><br><span class="line"><span class="comment">            MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;1234&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.yc.mybatis.bean&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>   <span class="comment">&lt;!--是否能够使用子包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.yc.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.yc.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.执行MBG插件的generate目标</p><p>双击maven下的mybatis-generator:generate插件</p><p><img src="D:\Typora\images\image-20220802100015993.png" alt="image-20220802100015993"></p><p>效果：</p><p><img src="D:\Typora\images\image-20220802113724409.png" alt="image-20220802113724409"></p><h4 id="二-QBC查询"><a href="#二-QBC查询" class="headerlink" title="二.QBC查询"></a>二.QBC查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询所有数据</span></span><br><span class="line"><span class="comment">//            List&lt;Emp&gt; list = mapper.selectByExample(null);</span></span><br><span class="line"><span class="comment">//            list.forEach(emp -&gt; System.out.println(emp));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据条件查询</span></span><br><span class="line">            <span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">            example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">            example.or().andDidIsNotNull();</span><br><span class="line">            List&lt;Emp&gt; list = mapper.selectByExample(example);</span><br><span class="line">            list.forEach(emp -&gt; System.out.println(emp));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><h4 id="一-分页插件使用步骤"><a href="#一-分页插件使用步骤" class="headerlink" title="一.分页插件使用步骤"></a>一.分页插件使用步骤</h4><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置分页插件</p><p>在MyBatis的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-分页插件的使用"><a href="#2-分页插件的使用" class="headerlink" title="2.分页插件的使用"></a>2.分页插件的使用</h4><p>1..分页相关数据</p><p>（1）</p><p>Page{count&#x3D;true, pageNum&#x3D;2, pageSize&#x3D;5, startRow&#x3D;5, endRow&#x3D;10, total&#x3D;9, pages&#x3D;2, reasonable&#x3D;false, pageSizeZero&#x3D;false}[Emp{eid&#x3D;9, empName&#x3D;’a’, age&#x3D;23, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#x31;&#50;&#51;&#x34;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#x31;&#50;&#51;&#x34;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;</a>‘, did&#x3D;null}, Emp{eid&#x3D;10, empName&#x3D;’b’, age&#x3D;32, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#49;&#x32;&#51;&#x34;&#64;&#113;&#113;&#46;&#99;&#x6f;&#x6d;">&#49;&#x32;&#51;&#x34;&#64;&#113;&#113;&#46;&#99;&#x6f;&#x6d;</a>‘, did&#x3D;null}, Emp{eid&#x3D;11, empName&#x3D;’c’, age&#x3D;22, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#x31;&#x32;&#x33;&#52;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#x31;&#x32;&#x33;&#52;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a>‘, did&#x3D;null}, Emp{eid&#x3D;12, empName&#x3D;’abc’, age&#x3D;23, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#x31;&#x32;&#x33;&#x34;&#x35;&#64;&#113;&#113;&#x2e;&#99;&#111;&#109;">&#x31;&#x32;&#x33;&#x34;&#x35;&#64;&#113;&#113;&#x2e;&#99;&#111;&#109;</a>‘, did&#x3D;null}]</p><p>（2）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">        <span class="comment">//在查询功能之前开启分页</span></span><br><span class="line">        <span class="comment">//Page&lt;Object&gt; page = PageHelper.startPage(2, 5);//获取第二页，每页显示5条数据</span></span><br><span class="line">        PageHelper.startPage(<span class="number">6</span>, <span class="number">5</span>);<span class="comment">//获取第6页，每页显示5条数据</span></span><br><span class="line">        List&lt;Emp&gt; list = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">        PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//list.forEach(emp -&gt; System.out.println(emp));</span></span><br><span class="line">        System.out.println(page);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PageInfo{pageNum&#x3D;6, pageSize&#x3D;5, size&#x3D;5, startRow&#x3D;26, endRow&#x3D;30, total&#x3D;47, pages&#x3D;10,<br> prePage&#x3D;5, nextPage&#x3D;7, isFirstPage&#x3D;false, isLastPage&#x3D;false, hasPreviousPage&#x3D;true, hasNextPage&#x3D;true, navigatePages&#x3D;5, navigateFirstPage&#x3D;4, navigateLastPage&#x3D;8, navigatepageNums&#x3D;[4, 5, 6, 7, 8]}</p><p>常用数据：<br>pageNum：当前页的页码<br>pageSize：每页显示的条数<br>size：当前页显示的真实条数<br>total：总记录数<br>pages：总页数<br>prePage：上一页的页码<br>nextPage：下一页的页码<br>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页<br>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页<br>navigatePages：导航分页的页码数<br>navigatepageNums：导航分页的页码，[4, 5, 6, 7, 8]</p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    limit index,pageSize</span></span><br><span class="line"><span class="comment">        index:当前页的起始索引。比如第一页第一条数据的索引应该是0，条数减一</span></span><br><span class="line"><span class="comment">        pageSize：每页显示的条数</span></span><br><span class="line"><span class="comment">        pageNum：当前页的页码</span></span><br><span class="line"><span class="comment">        index=(pageNum-1)*pageSize</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        使用MyBatis的分页插件实现分页功能</span></span><br><span class="line"><span class="comment">            1.需要在查询功能之前开启分页</span></span><br><span class="line"><span class="comment">                PageHelper.startPage(int pageNum , int pageSize);</span></span><br><span class="line"><span class="comment">            2.在查询功能之后获取分页相关信息、</span></span><br><span class="line"><span class="comment">                PageInfo&lt;Emp&gt; page = new PageInfo&lt;&gt;(list, 5);</span></span><br><span class="line"><span class="comment">                    list表示分页数据</span></span><br><span class="line"><span class="comment">                    5：表示当前导航分页的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="一-配置过程"><a href="#一-配置过程" class="headerlink" title="一.配置过程"></a>一.配置过程</h4><p>1.加入依赖</p><p>mybatis、junit、mysql-connector-java、log4j</p><p>2.创建核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.yc.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.yc.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为连接数据库创建properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220720212803880.png" alt="image-20220720212803880"></p><p>3.创建mapper接口，创建映射文件，实现功能</p><p>4.实现功能前可以将获取sqlSession对象封装成工具类，再用就直接调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.mybatis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: utils工具类：因为获取sqlSession对象是一个重复的过程，所以将获取sqlSession对象的过程封装起来，以后再用直接调就可以了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>:2022/7/20 21:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-集合添加元素方法"><a href="#二-集合添加元素方法" class="headerlink" title="二.集合添加元素方法"></a>二.集合添加元素方法</h4><p>map集合用put方法</p><p>list集合用add方法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022/05/20/SpringMVC/"/>
      <url>/2022/05/20/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h3><h4 id="一-什么是MVC"><a href="#一-什么是MVC" class="headerlink" title="一.什么是MVC"></a>一.什么是MVC</h4><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据<br>        JavaBean分为两类：<br>                一类称为实体类Bean：专门存储业务数据的，如Student、User等<br>                一类称为业务处理Bean：指Service或Dao对象，专门用于处理业务逻辑和数据访问</p><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>        用户通过视图层发送请求到服务器，在服务器中请求被Controller，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h4 id="二-什么是SpringMVC"><a href="#二-什么是SpringMVC" class="headerlink" title="二.什么是SpringMVC"></a>二.什么是SpringMVC</h4><p>SpringMVC是spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC是Spring为表述层开发提供的一整套完备的解决方案。在表述层框架经历Strust、WebWork、Strust2等诸多产品的历经迭代之后，目前业界普遍选择了SpringMVC作为JavaEE项目表述层开发的首选方案。</p><p>注：三层架构分别为表述层（或表示层）、业务逻辑层、数据访问层。表述层表示前台页面和后台servlet</p><h4 id="三-SpringMVC的特点"><a href="#三-SpringMVC的特点" class="headerlink" title="三.SpringMVC的特点"></a>三.SpringMVC的特点</h4><p>Spring家族原生产品，与IOC容器等基础设施无缝对接<br>基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一处理<br>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案<br>代码清新简洁，大幅度提升开发效率<br>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可<br>性能卓越，尤其适合现代大型，超大型互联网项目要求</p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><h4 id="一-开发环境"><a href="#一-开发环境" class="headerlink" title="一.开发环境"></a>一.开发环境</h4><p>目前用的是：<br>        IDE：idea 2021.2.2<br>        构建工具：maven 3.8.4<br>        服务器：tomcat 10.0.17<br>        Spring版本：5.3.19</p><h4 id="二-创建maven工程"><a href="#二-创建maven工程" class="headerlink" title="二.创建maven工程"></a>二.创建maven工程</h4><p>1.添加web模块<br>2.打包方式：war<br>3.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--ServletAPI--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring5和Thymeleaf整合包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三-配置web-xml"><a href="#三-配置web-xml" class="headerlink" title="三.配置web.xml"></a>三.配置web.xml</h4><p>注册SpringMVC的前端控制器DispatcherServlet</p><p>1.默认配置方式（默认：SpringMVC配置文件位置默认，名称默认）</p><p>​此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;</code>-servlet.xml，例如，以下配置所对应的SpringMVC的配置文件 位于WEB-INF下，文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.扩展配置方式（推荐）</p><p>​可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SpringMVC配置文件的位置和名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  <span class="comment">&lt;!--contextConfigLocation为固定值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  <span class="comment">&lt;!--使用classpath:表示从路径查找配置文件，例如maven工程中的src/main/resources--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将前端控制器DiapatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">        作为框架的核心组件，在启动过程中有大量的初始化操作要做，而这些操作放在第一次请求时才执行会严重影响访问速度，因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="四-创建请求控制器"><a href="#四-创建请求控制器" class="headerlink" title="四.创建请求控制器"></a>四.创建请求控制器</h4><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IOC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-创建springMVC的配置"><a href="#五-创建springMVC的配置" class="headerlink" title="五.创建springMVC的配置"></a>五.创建springMVC的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yc.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="六-测试HelloWorld"><a href="#六-测试HelloWorld" class="headerlink" title="六.测试HelloWorld"></a>六.测试HelloWorld</h4><p>1.实现对首页的访问（Tomcat10启动报404，换成8可以启动）</p><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&quot;/&quot;--&gt;/WEB-INF/templates/index.html</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法名无所谓</span></span><br><span class="line">    <span class="comment">//@RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line">    <span class="comment">//@RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径。localhost:8080/springMVC/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value =&quot;/&quot;)</span>     <span class="comment">//只有value一个值的时候，可以省略不写value，直接@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//返回视图名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.通过超链接跳转到指定页面</p><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>访问目标页面target.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前注解value属性值要和当前的请求地址保持一致</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">target</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七-总结"><a href="#七-总结" class="headerlink" title="七.总结"></a>七.总结</h4><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h3><h4 id="一-RequestMapping注解的功能"><a href="#一-RequestMapping注解的功能" class="headerlink" title="一.@RequestMapping注解的功能"></a>一.@RequestMapping注解的功能</h4><p>​从注解的名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器关联起来，建立映射关系。<br>​SpringMVC接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求</p><p>​控制器中不能有多个方法响应同一个请求的情况</p><h4 id="二-RequestMapping注解的位置"><a href="#二-RequestMapping注解的位置" class="headerlink" title="二.@RequestMapping注解的位置"></a>二.@RequestMapping注解的位置</h4><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求的请求路径的具体信息</p><h4 id="三-RequestMapping注解的value属性"><a href="#三-RequestMapping注解的value属性" class="headerlink" title="三.@RequestMapping注解的value属性"></a>三.@RequestMapping注解的value属性</h4><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><p>（注：若没有与value匹配，报404；如果两个请求的value值一样，那么它们的method一定不能一样）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/testRequestMapping&#125;&quot;</span>&gt;</span>测试RequestMapping注解的value属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/test&#125;&quot;</span>&gt;</span>测试RequestMapping注解的value属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot; , &quot;/test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-RequestMapping注解的method属性"><a href="#四-RequestMapping注解的method属性" class="headerlink" title="四.@RequestMapping注解的method属性"></a>四.@RequestMapping注解的method属性</h4><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request Method ‘post’ not supported</p><p>（注：若没有与method匹配，报405）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/test&#125;&quot;</span>&gt;</span>测试RequestMapping注解的mathod属性--&gt;GET<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/hello/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试RequestMapping注解的method属性--&gt;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot; , &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">                method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<br>        1.对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解<br>                处理get请求的映射–&gt;@GetMapping<br>                处理post请求的映射–&gt;@PostMapping<br>                处理put请求的映射–&gt;@PutMapping<br>                处理delete请求的映射–&gt;@DeleteMapping</p><p>​2.常用的请求方式有get，post，put，delete<br>​但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理<br>​若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在restful部分会讲到</p><h4 id="五-RequestMapping注解的params属性（了解）"><a href="#五-RequestMapping注解的params属性（了解）" class="headerlink" title="五.@RequestMapping注解的params属性（了解）"></a>五.@RequestMapping注解的params属性（了解）</h4><p>@RequestMapping注解的params属性通过请求的参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数<br>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数<br>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value<br>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param!&#x3D;value</p><p>（注：value和method类型也是数组，设置多个值，只要满足一个就能找到其中的请求映射。但params和headers设置多个值，必须同时满足才行。若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/testParamsAndHeaders?(username=admin,password=123456)&#125;&quot;</span>&gt;</span>测试RequestMapping注解的params属性--&gt;/testParamsAndHeaders<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testParamsAndHeaders&quot; , &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParamsAndHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六-RequestMapping注解的headers属性（了解）"><a href="#六-RequestMapping注解的headers属性（了解）" class="headerlink" title="六.@RequestMapping注解的headers属性（了解）"></a>六.@RequestMapping注解的headers属性（了解）</h4><p>@RequestMapping注解的headers属性通过请求的请求头匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息<br>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息<br>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value<br>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>（注：value和method类型也是数组，设置多个值，只要满足一个就能找到其中的请求映射。但params和headers设置多个值，必须同时满足才行。若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404）</p><h4 id="七-SpringMVC支持ant风格的路径"><a href="#七-SpringMVC支持ant风格的路径" class="headerlink" title="七.SpringMVC支持ant风格的路径"></a>七.SpringMVC支持ant风格的路径</h4><p>?：表示任意的单个字符（不能是空，必须有一个，有且只有一个。&#x2F;和?关键字不能使用）<br>*：表示任意的0个或多个字符（&#x2F;和?关键字不能使用）<br>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用&#x2F;**&#x2F;xxx的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/a1a/testAnt&#125;&quot;</span>&gt;</span>测试@RequestMapping可以匹配ant风格的路径--&gt;使用?<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/a1a/testAnt&#125;&quot;</span>&gt;</span>测试@RequestMapping可以匹配ant风格的路径--&gt;使用*<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/a1a/testAnt&#125;&quot;</span>&gt;</span>测试@RequestMapping可以匹配ant风格的路径--&gt;使用**<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(&quot;/a?a/testAnt&quot;)</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;/a*a/testAnt&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/**/testAnt&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testAnt</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="八-SpringMVC支持路径中的占位符（重点）"><a href="#八-SpringMVC支持路径中的占位符（重点）" class="headerlink" title="八.SpringMVC支持路径中的占位符（重点）"></a>八.SpringMVC支持路径中的占位符（重点）</h4><p>原始方式：&#x2F;deleteUser?id&#x3D;1<br>rest方式：&#x2F;deleteUser&#x2F;1</p><p>SpringMVC路径中的占位符常用于restful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符（xxx）表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><p>（注：路径中有占位符，那么匹配的请求地址中，也必须要有这一层路径，不能为空）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello/testPath/1/admin&#125;&quot;</span>&gt;</span>测试@RequestMapping支持路径中的占位符--&gt;/testPath<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testPath/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPath</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,<span class="meta">@PathVariable(&quot;username&quot;)</span>String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span> + id + <span class="string">&quot;，&quot;</span> + <span class="string">&quot;username:&quot;</span> + username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1，username:admin</span></span><br></pre></td></tr></table></figure><h3 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h3><h4 id="一-通过ServletAPI获取"><a href="#一-通过ServletAPI获取" class="headerlink" title="一.通过ServletAPI获取"></a>一.通过ServletAPI获取</h4><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="comment">//形参位置的request表示当前请求</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;password:&quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-通过控制器方法的形参获取请求参数"><a href="#二-通过控制器方法的形参获取请求参数" class="headerlink" title="二.通过控制器方法的形参获取请求参数"></a>二.通过控制器方法的形参获取请求参数</h4><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试使用控制器形参获取请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="comment">//若请求参数中出现多个同名的请求参数，可以在控制器方法的形参位置设置字符串类型或字符串数组来接收此请求参数</span></span><br><span class="line"><span class="comment">//1.当使用字符串类型的形参，最终结果为请求参数的每一个值之间使用逗号进行拼接：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public String testParam(String username,String password,String hobby)&#123;</span></span><br><span class="line"><span class="comment">    System.out.println(&quot;username:&quot; + username + &quot;,password:&quot; + &quot;,hobby:&quot; + hobby);</span></span><br><span class="line"><span class="comment">    return &quot;success&quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//2.当使用字符串数组的形参，最终结果为数组里边有当前请求参数所对应的值：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username,String password,String[] hobby)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + <span class="string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-RequestParam"><a href="#三-RequestParam" class="headerlink" title="三.@RequestParam"></a>三.@RequestParam</h4><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>1.value：指定为形参赋值的请求参数的参数名（当请求参数名和控制器形参的名不一致时，可以建立映射，来获取）</p><p>2.required：设置是否必须传输此请求参数，默认值为true<br>        若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>3.defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””（空字符串）时，则使用默认值为形参赋值</p><p>以下代码将请求参数username改成user_name</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试使用控制器形参获取请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;user_name&quot;,required = false,defaultValue = &quot;hehe&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                        String password,</span></span><br><span class="line"><span class="params">                        String[] hobby)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password + <span class="string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-RequestHeader"><a href="#四-RequestHeader" class="headerlink" title="四.@RequestHeader"></a>四.@RequestHeader</h4><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;user_name&quot;,required = false,defaultValue = &quot;hehe&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                        String password,</span></span><br><span class="line"><span class="params">                        String[] hobby,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestHeader(value = &quot;Host111&quot;,required = false,defaultValue = &quot;haha&quot;)</span> String host)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password + <span class="string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">    System.out.println(<span class="string">&quot;host:&quot;</span> + host);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-CookieValue"><a href="#五-CookieValue" class="headerlink" title="五.@CookieValue"></a>五.@CookieValue</h4><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h4 id="六-通过实体类型的形参获取请求参数"><a href="#六-通过实体类型的形参获取请求参数" class="headerlink" title="六.通过实体类型的形参获取请求参数"></a>六.通过实体类型的形参获取请求参数</h4><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testBean&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用实体类接收请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要创建个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, String sex, Integer age, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testBean</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七-解决获取请求参数的乱码问题"><a href="#七-解决获取请求参数的乱码问题" class="headerlink" title="七.解决获取请求参数的乱码问题"></a>七.解决获取请求参数的乱码问题</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h3><p>一到六讲的是向request域对象共享数据的五种方法，第一种是servlet原生API提供的，建议使用后四种springMVC提供的</p><h4 id="一-使用servletAPI向request域对象共享数据"><a href="#一-使用servletAPI向request域对象共享数据" class="headerlink" title="一.使用servletAPI向request域对象共享数据"></a>一.使用servletAPI向request域对象共享数据</h4><p>在控制器方法的形参设置httpservletrequest对象，这个request对象表示了当前的请求。有了request对象就可以使用最原始的方式往域对象中共享数据</p><p>注：html中：<br>        @{}：解析路径<br>        ${}：解析键值</p><p>首页html中的跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestByServletAPI&#125;&quot;</span>&gt;</span>通过servletAPI向request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用servletAPI向request域对象共享数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestByServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestByServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>success.html页面中访问域对象中的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;testRequestScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>       <span class="comment">&lt;!--这个报错不影响--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二-使用ModelAndView向request域对象共享数据"><a href="#二-使用ModelAndView向request域对象共享数据" class="headerlink" title="二.使用ModelAndView向request域对象共享数据"></a>二.使用ModelAndView向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//处理模型数据，即请求域request共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-使用Model向request域对象共享数据"><a href="#三-使用Model向request域对象共享数据" class="headerlink" title="三.使用Model向request域对象共享数据"></a>三.使用Model向request域对象共享数据</h4><p><img src="D:\Typora\images\image-20220628073346202.png" alt="image-20220628073346202"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-使用Map向request域对象共享数据"><a href="#四-使用Map向request域对象共享数据" class="headerlink" title="四.使用Map向request域对象共享数据"></a>四.使用Map向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-使用ModelMap向request域对象共享数据"><a href="#五-使用ModelMap向request域对象共享数据" class="headerlink" title="五.使用ModelMap向request域对象共享数据"></a>五.使用ModelMap向request域对象共享数据</h4><p><img src="D:\Typora\images\image-20220628074306545.png" alt="image-20220628074306545"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModeMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModeMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六-Model、Map、ModelMap之间的关系"><a href="#六-Model、Map、ModelMap之间的关系" class="headerlink" title="六.Model、Map、ModelMap之间的关系"></a>六.Model、Map、ModelMap之间的关系</h4><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><p>源码中的关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="七-通过servletAPI向session域共享数据"><a href="#七-通过servletAPI向session域共享数据" class="headerlink" title="七.通过servletAPI向session域共享数据"></a>七.通过servletAPI向session域共享数据</h4><p>首页html中的跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testSession&#125;&quot;</span>&gt;</span>通过servletAPI向Session域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>,<span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>success.html页面中访问域对象中的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.testSessionScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="八-通过servletAPI向application域共享数据"><a href="#八-通过servletAPI向application域共享数据" class="headerlink" title="八.通过servletAPI向application域共享数据"></a>八.通过servletAPI向application域共享数据</h4><p>实际上就是servletcontext</p><p>首页html中的跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testApplication&#125;&quot;</span>&gt;</span>通过servletAPI向Application域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>,<span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>success.html页面中访问域对象中的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.testApplication&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpringMVC的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h3><p>SpringMVC中的视图时View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向试图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器由此视图解析器解析之后所得到的时ThymeleafView</p><h4 id="一-ThymeleafView"><a href="#一-ThymeleafView" class="headerlink" title="一.ThymeleafView"></a>一.ThymeleafView</h4><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testThymeleafView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testThymeleafView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\img002.png" alt="img002"></p><h4 id="二-转发试图：InternalResourceView"><a href="#二-转发试图：InternalResourceView" class="headerlink" title="二.转发试图：InternalResourceView"></a>二.转发试图：InternalResourceView</h4><p>注：<br>1.控制器中方法的return返回值如果什么都不加，就会被thymeleaf视图解析器解析到，然后转发到相应的html页面<br>2.但如果在return返回的值的前边加上forword&#x2F;:   那么就不会被视图解析器解析到，而是直接转发到相应的请求<br>3.但如果在return返回的值的前边加上redirect&#x2F;:   那么就不会被视图解析器解析到，而是直接重定向跳转到相应的请求或网址<br>用了thymeleaf只能通过转发去访问webinf下的页面资源</p><p>SpringMVC中创建转发视图的情况：<br>        当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;testThymeleafView”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testThymeleafView&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220630075849741.png" alt="image-20220630075849741"></p><h4 id="三-重定向视图：RedirectView"><a href="#三-重定向视图：RedirectView" class="headerlink" title="三.重定向视图：RedirectView"></a>三.重定向视图：RedirectView</h4><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span><span class="string">&quot;redirect:testThymeleafView&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220630080134636.png" alt="image-20220630080134636"></p><p>注：<br>        转发能访问webinf下的资源，但是重定向不行。因为webinf下的资源具有安全性，隐藏性，只能通过服务器内部来访问，不能通过浏览器来访问。可以访问请求<br>        转发不能跨域，重定向可以。转发发生在服务器内部，那它就只能访问服务器内部的资源；而重定向是浏览器发送的两次请求，那通过浏览器可以访问任何资源，比如在项目里重定向到百度</p><h4 id="四-视图控制器view-controller"><a href="#四-视图控制器view-controller" class="headerlink" title="四.视图控制器view-controller"></a>四.视图控制器view-controller</h4><p>当控制器方法中，没有任何请求处理的过程，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><h4 id="一-RESTful简介"><a href="#一-RESTful简介" class="headerlink" title="一.RESTful简介"></a>一.RESTful简介</h4><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><p>1.资源：<br>        资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><p>2.资源的表述：<br>        资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><p>3.状态转移：<br>        状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><p>注：<br>        1.表现层：视图层(前端视图页面)+控制层<br>        2.资源：可以理解为一种表现形式。可以是html、xml、jsp、json、纯文本、图片、视频、音频等等，万物皆资源<br>        3.操作资源的表述就是请求路径</p><h4 id="二-RESTful的实现"><a href="#二-RESTful的实现" class="headerlink" title="二.RESTful的实现"></a>二.RESTful的实现</h4><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th align="left">操作</th><th align="left">传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td align="left">查询操作</td><td align="left">getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td align="left">保存操作</td><td align="left">saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td align="left">删除操作</td><td align="left">deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td align="left">更新操作</td><td align="left">updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h4 id="三-HiddenHttpMethodFilter过滤器"><a href="#三-HiddenHttpMethodFilter过滤器" class="headerlink" title="三.HiddenHttpMethodFilter过滤器"></a>三.HiddenHttpMethodFilter过滤器</h4><p>1.概念：<br>        由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？<br>        SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p>​HiddenHttpMethodFilter的父类是OncePerRequestFilter，它继承了父类的doFilterInternal方法，工作原理是将jsp页面的form表单的method属性值在doFilterInternal方法中转化为标准的Http方法，即GET,、POST、 HEAD、OPTIONS、PUT、DELETE、TRACE，然后到Controller中找到对应的方法。例如，在使用注解时我们可能会在Controller中用于@RequestMapping(value &#x3D; “list”, method &#x3D; RequestMethod.PUT)，所以如果你的表单中使用的是<form method="put">，那么这个表单会被提交到标了Method&#x3D;”PUT”的方法中。</p><p>2.设置：<br>        <strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的两个条件：<br>                (1).当前请求的请求方式必须为post<br>                (2).当前请求必须传输请求参数 _method<br>                满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数 _method的值，因此请求参数 _method的值才是最终的请求方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;...&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span> /&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置HiddenHTTPMethodFilter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>底层代码：</p><p><img src="D:\Typora\images\image-20220703115605264.png" alt="image-20220703115605264"></p><h4 id="四-两个过滤器的配置顺序"><a href="#四-两个过滤器的配置顺序" class="headerlink" title="四.两个过滤器的配置顺序"></a>四.两个过滤器的配置顺序</h4><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li></ul><p>String paramValue &#x3D; request.getParameter(this.methodParam);</p><h3 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h3><p>​HttpMessageConverter：报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>​HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，ResponseEntity（@RequestBody，@ResponseBody是注解；RequestEntity，ResponseEntity是类型）</p><p>注：请求报文由三部分组成，请求头，请求行，请求体。<br>                请求体只有在post请求的时候才有，get没有。因为请求体里放的就是请求参数。get把请求参数直接拼接在地址栏中，post把请求参数放在了请求体里</p><h4 id="一-RequestBody"><a href="#一-RequestBody" class="headerlink" title="一.@RequestBody"></a>一.@RequestBody</h4><p>将当前的请求报文中的请求体转换为Java数据</p><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试@RequestBody&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody&quot;</span> + requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：requestBodyusername&#x3D;admin&amp;password&#x3D;123456</p><h4 id="二-RequestEntity"><a href="#二-RequestEntity" class="headerlink" title="二.RequestEntity"></a>二.RequestEntity</h4><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestEntity&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试RequestEntity&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    <span class="comment">//当前requestEntity表示整个请求报文的信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请求头：&quot;</span> + requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;请求体：&quot;</span> + requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>请求头：[host:”localhost:8080”, connection:”keep-alive”, content-length:”30”, cache-control:”max-age&#x3D;0”, sec-ch-ua:”” Not A;Brand”;v&#x3D;”99”, “Chromium”;v&#x3D;”102”, “Google Chrome”;v&#x3D;”102””, sec-ch-ua-mobile:”?0”, sec-ch-ua-platform:””Windows””, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a>, user-agent:”Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;102.0.0.0 Safari&#x2F;537.36”, accept:”text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9”, sec-fetch-site:”same-origin”, sec-fetch-mode:”navigate”, sec-fetch-user:”?1”, sec-fetch-dest:”document”, referer:”<a href="http://localhost:8080/springMVC/&quot;">http://localhost:8080/springMVC/&quot;</a>, accept-encoding:”gzip, deflate, br”, accept-language:”zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7”, cookie:”Hm_lvt_cd8218cd51f800ed2b73e5751cb3f4f9&#x3D;1644640777,1644717225; Idea-8374e3b0&#x3D;c67bec8c-7b13-4cb3-bc89-a5fe2d9dc14f”, Content-Type:”application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8”]<br>请求体：username&#x3D;admin&amp;password&#x3D;123456</p><h4 id="三-通过HTTPServletResponse响应浏览器数据、"><a href="#三-通过HTTPServletResponse响应浏览器数据、" class="headerlink" title="三.通过HTTPServletResponse响应浏览器数据、"></a>三.通过HTTPServletResponse响应浏览器数据、</h4><p>通过原生servletAPI的response对象响应浏览器数据（下边的@ResponseBody是springMVC提供的响应浏览器数据的方法）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testResponse&#125;&quot;</span>&gt;</span>通过servletAPI的response对象响应浏览器数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResponse</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;hello,response&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：<img src="D:\Typora\images\image-20220703173938558.png" alt="image-20220703173938558"></p><h4 id="四-ResponseBody"><a href="#四-ResponseBody" class="headerlink" title="四.@ResponseBody"></a>四.@ResponseBody</h4><p>将Java对象转换为响应体</p><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：<img src="D:\Typora\images\image-20220703175513150.png" alt="image-20220703175513150"></p><p>（注：微服务哪里用到的非常多，微服务中控制器的每一个方法都要加@ResponseBody注解）</p><h4 id="五-SpringMVC处理json"><a href="#五-SpringMVC处理json" class="headerlink" title="五.SpringMVC处理json"></a>五.SpringMVC处理json</h4><p>如果响应回去的是一个对象呢？<br>        创建个User类，里边有id，username，password，age，sex属性，设置无参有参构造，设置get、set方法，先别设置toString，这样输出的显示更明显。<br>        发现报406，浏览器不知道后台使用的什么语言，需要将服务器的语言转换成json，即需要将java对象转换为json</p><p>浏览器能接收到服务器中的数据只能是字符串，再有就是json是JavaScript中的东西，不能在java中转换json对象，所以只能转换为json字符串</p><p>@ResponseBody处理json的步骤：<br>        1.导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​2.在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串（第三次用了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>​3.在处理器方法上使用@ResponseBody注解进行标识<br>​4.将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：<img src="D:\Typora\images\image-20220703181110990.png" alt="image-20220703181110990"></p><h4 id="六-回顾json"><a href="#六-回顾json" class="headerlink" title="六.回顾json"></a>六.回顾json</h4><p>json是JavaScript里的一种数据格式，是一种数据交互格式（xml也是，只不过xml更多的是配置文件，json更多的是数据交互，因为json数据结构比较简单，解析起来比较简单，生成的数据量比较少）</p><p>json有两种格式，一种是对象，一种是数组。<br>对象是放在大括号里边的以键值对的方式存储输出。而数组是放在方括号里边，存储的是一个一个数据<br>比如：<br>1.实体类对象转换为json是一个json对象。实体类中是属姓名和属性值，对应json对象中是键值对<br>2.map转换为json是json对象<br>3.list转换为json是json数组。list和数组的结构一样</p><p>如果不是将java对象响应到浏览器的话，是不需要加jackson的jar包</p><h4 id="七-RestController注解"><a href="#七-RestController注解" class="headerlink" title="七.@RestController注解"></a>七.@RestController注解</h4><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><p>（俩注解合二为一了呗）</p><h4 id="八-ResponseEntity"><a href="#八-ResponseEntity" class="headerlink" title="八.ResponseEntity"></a>八.ResponseEntity</h4><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文 </p><h3 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h3><h4 id="一-文件下载"><a href="#一-文件下载" class="headerlink" title="一.文件下载"></a>一.文件下载</h4><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    System.out.println(realPath);   <span class="comment">//可以看看真实路径在哪里</span></span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-文件上传"><a href="#二-文件上传" class="headerlink" title="二.文件上传"></a>二.文件上传</h4><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：<br>        1.添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​2.在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器，将上传的文件封装为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​3.控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先看看这两个什么意思</span></span><br><span class="line">    System.out.println(photo.getName());    <span class="comment">//获取表单元素的name属性值</span></span><br><span class="line">    System.out.println(photo.getOriginalFilename());    <span class="comment">//获取当前上传文件的名字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取上传文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="comment">//获取上传的文件的后缀名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));  <span class="comment">//substring一个参数表示从该参数截取到末尾，且包前不包后，会包括这个.</span></span><br><span class="line">    <span class="comment">//将UUID作为文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">//将uuid和后缀名拼接后的结果作为最终的文件名</span></span><br><span class="line">    fileName = uuid + suffixName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过ServletContext获取服务器中photo目录的路径（即想要获取服务器路径，先有session，通过session获得ServletContext对象，再通过ServletContext.getRealPath()）</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);     <span class="comment">//上传到服务器的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断photoPath所对应路径是否存在</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">        <span class="comment">//若不存在，则创建目录</span></span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;   <span class="comment">//separator是文件的分隔符</span></span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));     <span class="comment">//上传到哪里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="一-拦截器的配置"><a href="#一-拦截器的配置" class="headerlink" title="一.拦截器的配置"></a>一.拦截器的配置</h4><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><p><img src="D:\Typora\images\image-20220705074058155.png" alt="image-20220705074058155"></p><h4 id="二-拦截器的三个抽象方法"><a href="#二-拦截器的三个抽象方法" class="headerlink" title="二.拦截器的三个抽象方法"></a>二.拦截器的三个抽象方法</h4><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h4 id="三-创建并配置拦截器"><a href="#三-创建并配置拦截器" class="headerlink" title="三.创建并配置拦截器"></a>三.创建并配置拦截器</h4><p>创建一个用于放拦截器的包，包里创建拦截器类，让创建的类实现（implements）HandlerInterceptor类，类里重写三种拦截器方法。然后再springMVC.xml里配置拦截器</p><p>1.创建拦截器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.mvc.interceptors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 拦截器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/7/7 7:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置拦截器，三种方法：1.&lt;bean/&gt;    2.&lt;ref/&gt;    3.&lt;mvc:interceptor/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以下两种配置方式(bean标签、ref标签)都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean class=&quot;com.yc.mvc.interceptors.FirstInterceptor&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;ref bean=&quot;firstInterceptor&quot;&gt;&lt;/ref&gt;   &amp;lt;!&amp;ndash;把拦截器交给IOC，通过标识组件的方式把拦截器标识为一个bean，再开启组件扫描&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义拦截。以下配置方式(mvc:interceptor标签)可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span>            <span class="comment">&lt;!--拦截所有页面--&gt;</span><span class="comment">&lt;!--拦截器里匹配所以请求：/**--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>/&gt;</span>     <span class="comment">&lt;!--把主页面排除。即拦截除了主页面的所有页面--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：preHandle方法负责拦截，如果返回的是false，则表示被拦截</p><h4 id="四-多个拦截器的执行顺序"><a href="#四-多个拦截器的执行顺序" class="headerlink" title="四.多个拦截器的执行顺序"></a>四.多个拦截器的执行顺序</h4><p>1.若每个拦截器的preHandle()都返回true<br>        此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：<br>        preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>2.若某个拦截器的preHandle()返回了false<br>        preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h3 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p><img src="D:\Typora\images\image-20220710110212816.png" alt="image-20220710110212816"></p><p>DefaultHandlerExceptionResolver返回的是ModelAndView，所以它是干什么的：如果在控制器方法执行的过程中出现了指定的异常，他就可以返回一个新的ModelAndView，来代替原来方法要返回的ModelAndView，跳转到指定的页面</p><h4 id="一-基于配置的异常处理"><a href="#一-基于配置的异常处理" class="headerlink" title="一.基于配置的异常处理"></a>一.基于配置的异常处理</h4><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置异常处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--properties的键表示处理器方法执行过程中出现的异常。properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span>     <span class="comment">&lt;!--类型是properties，properties继承了Hashtable，所以里边的结构应该是键值对--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>    <span class="comment">&lt;!--key里写的是当前异常的全类名。后边的值就写要跳到的页面名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享。即设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>      <span class="comment">&lt;!--可以设置一个键来存储当前的异常信息，默认存储到请求域中。value设置的是存储到请求域中异常信息的键。以设置的value值为键，以当前的异常为值--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二-基于注解的异常处理"><a href="#二-基于注解的异常处理" class="headerlink" title="二.基于注解的异常处理"></a>二.基于注解的异常处理</h4><p>@ControllerAdvice是被@Component标识的，所以@ControllerAdvice也是组件的扩展注解。</p><h3 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h3><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h4 id="一-创建初始化类，代替web-xml"><a href="#一-创建初始化类，代替web-xml" class="headerlink" title="一.创建初始化类，代替web.xml"></a>一.创建初始化类，代替web.xml</h4><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器（也就是配置Tomcat服务器）。</p><p>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.mvc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.HiddenHttpMethodFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/7/10 16:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//web工程的初始化类，用来代替web.xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*指定spring的配置类*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*指定SpringMVC的配置类*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*指定DispatcherServlet的映射规则，即url-pattern*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册过滤器*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">characterEncodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        characterEncodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        characterEncodingFilter.setForceResponseEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;characterEncodingFilter,hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-创建SpringConfig配置类，代替spring的配置文件"><a href="#二-创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="二.创建SpringConfig配置类，代替spring的配置文件"></a>二.创建SpringConfig配置类，代替spring的配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#三-创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="三.创建WebConfig配置类，代替SpringMVC的配置文件"></a>三.创建WebConfig配置类，代替SpringMVC的配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    代替SpringMVC的配置文件：</span></span><br><span class="line"><span class="comment">    1.扫描组件  2.视图解析器 3.view-controller   4.default-servlet-handler   5.mvc注解驱动   6.文件上传解析器   7.异常处理  8.拦截器</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将当前类表示为一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//1.扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yc.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//5.开启mvc注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.使用默认的servlet处理静态资源：default-servlet-handler</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">TestInterceptor</span> <span class="variable">testInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(testInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.view-controller</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">commonsMultipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">        <span class="keyword">return</span> commonsMultipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.异常处理    注：Properties继承了Hashtable连泛型都没了，因为它在操作Properties文件的方面，它只能操作字符串类型的键和字符串类型的值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">exceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;java.lang.ArithmeticException&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//设置异常映射</span></span><br><span class="line">        exceptionResolver.setExceptionMappings(prop);</span><br><span class="line">        <span class="comment">//设置共享异常信息的键</span></span><br><span class="line">        exceptionResolver.setExceptionAttribute(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        resolvers.add(exceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.视图解析器</span></span><br><span class="line">    <span class="comment">//以下的每个@Bean注解的方法都对应着之前项目里配置springMVC.xml里的前端控制器里的bean标签。springMVC.xml里的bean标签应该是先有最里层的，再有外层的</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="comment">//在一个方法中所使用的参数，必须是符合自动装配的规则的。也就是说能够使用的参数，必须得是spring的IOC容器所拥有的bean，这个bean能为这个参数赋值</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h3><h4 id="一-SpringMVC常用组件"><a href="#一-SpringMVC常用组件" class="headerlink" title="一.SpringMVC常用组件"></a>一.SpringMVC常用组件</h4><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法。（将请求和控制器方法进行映射）</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行。（找到控制器方法后要调用控制器方法，就用到HandlerAdapter，即源码的ha）</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h4 id="二-DispatcherServlet初始化过程"><a href="#二-DispatcherServlet初始化过程" class="headerlink" title="二.DispatcherServlet初始化过程"></a>二.DispatcherServlet初始化过程</h4><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="D:\Typora\images\img005.png" alt="img005"></p><h5 id="1-初始化WebApplicationContext"><a href="#1-初始化WebApplicationContext" class="headerlink" title="1.初始化WebApplicationContext"></a>1.初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(<span class="built_in">this</span>.getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext)wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        wac = <span class="built_in">this</span>.findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = <span class="built_in">this</span>.createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            <span class="built_in">this</span>.onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContextAttributeName();</span><br><span class="line">        <span class="built_in">this</span>.getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-创建WebApplicationContext"><a href="#2-创建WebApplicationContext" class="headerlink" title="2.创建WebApplicationContext"></a>2.创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="built_in">this</span>.getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + <span class="built_in">this</span>.getServletName() + <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() + <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">        <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext)BeanUtils.instantiateClass(contextClass);</span><br><span class="line">        wac.setEnvironment(<span class="built_in">this</span>.getEnvironment());</span><br><span class="line">        <span class="comment">// 设置父容器</span></span><br><span class="line">        wac.setParent(parent);</span><br><span class="line">        <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> <span class="built_in">this</span>.getContextConfigLocation();</span><br><span class="line">        <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">            wac.setConfigLocation(configLocation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.configureAndRefreshWebApplicationContext(wac);</span><br><span class="line">        <span class="keyword">return</span> wac;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-DispatcherServlet初始化策略"><a href="#3-DispatcherServlet初始化策略" class="headerlink" title="3.DispatcherServlet初始化策略"></a>3.DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initMultipartResolver(context);</span><br><span class="line">    <span class="built_in">this</span>.initLocaleResolver(context);</span><br><span class="line">    <span class="built_in">this</span>.initThemeResolver(context);</span><br><span class="line">    <span class="built_in">this</span>.initHandlerMappings(context);</span><br><span class="line">    <span class="built_in">this</span>.initHandlerAdapters(context);</span><br><span class="line">    <span class="built_in">this</span>.initHandlerExceptionResolvers(context);</span><br><span class="line">    <span class="built_in">this</span>.initRequestToViewNameTranslator(context);</span><br><span class="line">    <span class="built_in">this</span>.initViewResolvers(context);</span><br><span class="line">    <span class="built_in">this</span>.initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-DispatcherServlet调用组件处理请求"><a href="#三-DispatcherServlet调用组件处理请求" class="headerlink" title="三.DispatcherServlet调用组件处理请求"></a>三.DispatcherServlet调用组件处理请求</h4><h5 id="1-processRequest"><a href="#1-processRequest" class="headerlink" title="1.processRequest()"></a>1.processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> <span class="built_in">this</span>.buildLocaleContext(request);</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> <span class="built_in">this</span>.buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">FrameworkServlet</span>.RequestBindingInterceptor());</span><br><span class="line">    <span class="built_in">this</span>.initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        <span class="built_in">this</span>.doService(request, response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ServletException var16) &#123;</span><br><span class="line">        failureCause = var16;</span><br><span class="line">        <span class="keyword">throw</span> var16;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">        failureCause = var17;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, var17);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.logResult(request, response, (Throwable)failureCause, asyncManager);</span><br><span class="line">        <span class="built_in">this</span>.publishRequestHandledEvent(request, response, startTime, (Throwable)failureCause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-doService"><a href="#2-doService" class="headerlink" title="2.doService()"></a>2.doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="built_in">this</span>.logRequest(request);</span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">attrNames</span> <span class="operator">=</span> request.getAttributeNames();</span><br><span class="line"></span><br><span class="line">        label116:</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            String attrName;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!attrNames.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="keyword">break</span> label116;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                attrName = (String)attrNames.nextElement();</span><br><span class="line">            &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.cleanupAfterInclude &amp;&amp; !attrName.startsWith(<span class="string">&quot;org.springframework.web.servlet&quot;</span>));</span><br><span class="line"></span><br><span class="line">            attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="built_in">this</span>.getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, <span class="built_in">this</span>.getThemeSource());</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">previousRequestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath) &#123;</span><br><span class="line">        previousRequestPath = (RequestPath)request.getAttribute(ServletRequestPathUtils.PATH_ATTRIBUTE);</span><br><span class="line">        ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        <span class="built_in">this</span>.doDispatch(request, response);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted() &amp;&amp; attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath) &#123;</span><br><span class="line">            ServletRequestPathUtils.setParsedRequestPath(previousRequestPath, request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-doDispatch"><a href="#3-doDispatch" class="headerlink" title="3.doDispatch()"></a>3.doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                processedRequest = <span class="built_in">this</span>.checkMultipart(request);</span><br><span class="line">                multipartRequestParsed = processedRequest != request;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">                mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">                <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> HttpMethod.GET.matches(method);</span><br><span class="line">                <span class="keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">                <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                dispatchException = var20;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, var21);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">            <span class="built_in">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, var23));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-processDispatchResult"><a href="#4-processDispatchResult" class="headerlink" title="4.processDispatchResult()"></a>4.processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv, <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException)exception).getModelAndView();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>;</span><br><span class="line">            mv = <span class="built_in">this</span>.processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = mv != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        <span class="built_in">this</span>.render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">            mappedHandler.triggerAfterCompletion(request, response, (Exception)<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-SpringMVC的执行流程"><a href="#四-SpringMVC的执行流程" class="headerlink" title="四.SpringMVC的执行流程"></a>四.SpringMVC的执行流程</h4><p>1.用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p><p>2.DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p><p>a) 不存在<br>        i. 再判断是否配置了mvc:default-servlet-handler<br>        ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="D:\Typora\images\img006.png" alt="img006"></p><p><img src="D:\Typora\images\img007.png" alt="img007"></p><p>​iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="D:\Typora\images\img008.png" alt="img008"></p><p><img src="D:\Typora\images\img009.png" alt="img009"></p><p>b) 存在则执行下面的流程</p><p>3.根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p><p>4.DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p><p>5.如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p><p>6.提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：<br>        a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>        b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>        c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>        d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><p>7.Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p><p>8.此时将开始执行拦截器的postHandle(…)方法【逆向】。</p><p>9.根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p><p>10渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p><p>11.将渲染结果返回给客户端。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="一-基于配置的mvc创建过程"><a href="#一-基于配置的mvc创建过程" class="headerlink" title="一.基于配置的mvc创建过程"></a>一.基于配置的mvc创建过程</h4><p>1.引入依赖 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ServletAPI--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring5和Thymeleaf整合包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.添加webapp，在项目结构里添加项目描述符（webapp没有那个小蓝点的话，点一下代码区右上方的maven小图标，或者刷新一下maven）</p><p><img src="D:\Typora\images\image-20220627202915386.png" alt="image-20220627202915386"></p><p><img src="D:\Typora\images\image-20220627203009102.png" alt="image-20220627203009102"></p><p><img src="D:\Typora\images\image-20220627203040818.png" alt="image-20220627203040818"></p><p>3.web.xml里配置编码过滤器，配置HiddenHTTPMethodFilter过滤器，配置springMVC的前端控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置HiddenHTTPMethodFilter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置springMVC的前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.在resources里创建springMVC.xml，然后启动扫描组件，并配置视图解析器，创建templates文件夹（创建templates文件夹是因为视图解析器的视图前缀），html都放在templates文件夹里边</p><p><img src="D:\Typora\images\image-20220627204712970.png" alt="image-20220627204712970"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yc.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图控制器view-controller （必须要搭配mvc注解驱动使用，否则其他请求映射都会失效）</span></span><br><span class="line"><span class="comment">       path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">       view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span>  <span class="comment">&lt;!--这是进入首页--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开放对静态资源的访问 （必须要搭配mvc注解驱动使用，否则其他请求映射都会失效）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:default-servlet-handler&gt;&lt;/mvc:default-servlet-handler&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220627204857410.png" alt="image-20220627204857410"></p><p>5.搭建tomcat。在Deployment里把原来的删除，点加号创建一个新的，可以改一下上下文路径</p><p><img src="D:\Typora\images\image-20220627205328125.png" alt="image-20220627205328125"></p><p><img src="D:\Typora\images\image-20220627205342650.png" alt="image-20220627205342650"></p><p><img src="D:\Typora\images\image-20220703164626220.png" alt="image-20220703164626220"></p><p>6.就可以创建控制层了，搭建完成</p><h4 id="二-小问题"><a href="#二-小问题" class="headerlink" title="二.小问题"></a>二.小问题</h4><p>1.如果两个请求的value值一样，那么它们的method一定不能一样</p><p>2.服务器的部署路径：<br>        如果是web工程，是放在out下，也可以在Project Structure下的Project 的project compiler output设置<br>                Idea项目下的out目录是用来存放.java文件编译后的字节码文件的</p><p><img src="D:\Typora\images\image-20220704110926326.png" alt="image-20220704110926326"></p><p>​如果是maven工程，放在target下</p><p><img src="D:\Typora\images\image-20220704111007682.png" alt="image-20220704111007682"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/04/20/Spring/"/>
      <url>/2022/04/20/Spring/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h3><h4 id="一-课程内容介绍"><a href="#一-课程内容介绍" class="headerlink" title="一.课程内容介绍"></a>一.课程内容介绍</h4><p>1.Spring框架概述<br>2.IOC容器<br>3.Aop<br>4.JdbcTemplate<br>5.事务管理<br>6.Spring5新特性</p><h4 id="二-Spring框架概述"><a href="#二-Spring框架概述" class="headerlink" title="二.Spring框架概述"></a>二.Spring框架概述</h4><p>1.Spring是轻量级的开源的JavaEE框架<br>2.Spring可以解决企业应用开发的<br>3.Spring有两个核心部分：IOC和Aop<br>     （1）IOC：控制反转，把创建对象过程交给Spring进行管理<br>     （2）Aop：面向切面，不修改源代码进行功能增强<br>4.Spring特点<br>     （1）方便解耦，简化开发<br>     （2）Aop编程支持<br>     （3）方便程序测试<br>     （4）方便和其他框架进行整合<br>     （5）方便进行事物操作<br>     （6）降低API开发难度<br>5.此课程选取Spring版本5.x</p><h4 id="三-入门案例"><a href="#三-入门案例" class="headerlink" title="三.入门案例"></a>三.入门案例</h4><p>1.下载Spring5<br>      （1）使用Spring最新稳定版本（版本号后带GA的是稳定版本）<br>               Spring官网 -&gt; Project -&gt; Spring Framework -&gt; LEARN</p><p>​      （2）下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a><br>​               点击右上角github图标 -&gt; 往下拉看到Access to Binaries -&gt; 点击 Spring Framework Artifacts -&gt; 往下拉找到Downloading a Distribution -&gt; 点击<a href="https://repo.spring.io/">https://repo.spring.io</a>.   -&gt;  打开Artifactory下的Artifacts -&gt; 找到release下的org下的springframework下的spring -&gt; 将Repository Path后的地址拼接到该网页网址的io后面，即上边的下载地址 -&gt; 找到确认的稳定版本号 -&gt; 点进去后下载dist.zip的即可</p><p>2.打开idea工具，创建普通java工程</p><p>3.导入Spring5相关jar包<br>      基础先找到刚刚下载的spring里libs里的Beans，Core，Context，Expression四个jar包，外加上commons-logging的包</p><p>4.创建普通类，在这个类创建普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.创建Spring怕配置文件，在配置文件配置创建的对象<br>      （1）Spring配置文件使用xml格式</p><p><img src="D:\Typora\images\image-20220504223547071.png" alt="image-20220504223547071"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置User对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.进行测试代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.加载spring配置文件,参数是配置文件的路径，在src下直接写（相对路径）</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取配置文件chuan的对象，参数user是配置文件里id的值</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h3><p>（1）IOC底层原理<br>（2）IOC接口（BeanFactory）<br>（3）IOC操作Bean管理（基于xml）<br>（4）IOC操作Bean管理（基于注解）</p><h4 id="一-IOC概念和原理"><a href="#一-IOC概念和原理" class="headerlink" title="一.IOC概念和原理"></a>一.IOC概念和原理</h4><p>1.什么是IOC<br>        （1）控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理<br>        （2）使用 IOC目的：为了耦合度降低<br>        （3）做入门案例就是IOC实现</p><p>2.IOC底层原理<br>        （1）xml解析、工厂模式、反射</p><p>3.画图讲解IOC底层原理</p><p><img src="D:\Typora\images\image-20220505095528424.png" alt="image-20220505095528424"></p><p><img src="D:\Typora\images\image-20220505095456284.png" alt="image-20220505095456284"></p><p>工厂模式的目的是为了降低耦合度，但它没有降到最低限度</p><p>IOC过程：</p><p><img src="D:\Typora\images\image-20220506180159712.png" alt="image-20220506180159712"></p><h4 id="二-IOC（接口）"><a href="#二-IOC（接口）" class="headerlink" title="二.IOC（接口）"></a>二.IOC（接口）</h4><p>1.IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p><p>2.Spring提供IOC容器实现两种方式：（两个接口）<br>        1）.BeanFactory：IOC容器基本实现，是Spring内部的使用的接口，不提供开发人员进行使用<br>                   *加载配置文件的时候不会创建对象，在获取对象（使用）才去创建对象</p><p>​        2）.ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用<br>​                   *加载配置文件的时候就会把在配置文件对象进行创建</p><p>3.ApplicationContext接口有实现类</p><p>​             （鼠标点到ApplicationContext然后按ctrl+h查看接口的实现类）</p><p><img src="D:\Typora\images\image-20220510094023947.png" alt="image-20220510094023947"></p><p>FileSystemXmlApplicationContext：后面的参数要用绝对路径（带盘符路径）<br>ClassPathXmlApplicationContext：后面的参数用类路径，比如bean.xml文件就在src下，那么直接写文件名字</p><h4 id="三-IOC操作Bean管理（概念）"><a href="#三-IOC操作Bean管理（概念）" class="headerlink" title="三.IOC操作Bean管理（概念）"></a>三.IOC操作Bean管理（概念）</h4><p>1.什么是Bean管理<br>          0）.Bean管理指的是两个操作<br>          1）.Spring创建对象<br>          2）.Spring注入属性</p><p>2.Bean管理操作有两种方式<br>          1）.基于xml配置文件方式实现<br>          2）.基于注解方式实现</p><h4 id="四-IOC操作Bean管理（基于xml方式）"><a href="#四-IOC操作Bean管理（基于xml方式）" class="headerlink" title="四.IOC操作Bean管理（基于xml方式）"></a>四.IOC操作Bean管理（基于xml方式）</h4><h5 id="1-基于xml方式创建对象"><a href="#1-基于xml方式创建对象" class="headerlink" title="1.基于xml方式创建对象"></a>1.基于xml方式创建对象</h5><p><img src="D:\Typora\images\image-20220510100103471.png" alt="image-20220510100103471"></p><p>​          1）.在Spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建<br>​          2）.在bean标签里有很多属性，介绍常用的属性<br>​                     *id属性：唯一标识（取得一个别名）<br>​                     *class属性：类的全路径（包类路径）<br>​          3）.创建对象的时候，默认也是执行无参构造方法</p><h5 id="2-基于xml方式注入属性"><a href="#2-基于xml方式注入属性" class="headerlink" title="2.基于xml方式注入属性"></a>2.基于xml方式注入属性</h5><p>​          DI：依赖注入，就是注入属性          （DI是IOC中一种具体实现，就表示注入属性，但注入属性需要在创建对象的基础之上进行完成）</p><h6 id="第一种注入方式：使用set方式进行注入"><a href="#第一种注入方式：使用set方式进行注入" class="headerlink" title="*第一种注入方式：使用set方式进行注入"></a>*第一种注入方式：使用set方式进行注入</h6><p>​                               （1）.创建类，定义属性和对应的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用set方式进行注入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String Bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用set方式进行注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">        Bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBauthor</span><span class="params">(String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                               （2）.在spring配置文件 配置对象创建 ，配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.Book&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">    name：类里面属性名称</span></span><br><span class="line"><span class="comment">    value：向属性注入的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西游记&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吴承恩&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="第二种注入方式：使用有参构造进行注入"><a href="#第二种注入方式：使用有参构造进行注入" class="headerlink" title="*第二种注入方式：使用有参构造进行注入"></a>*第二种注入方式：使用有参构造进行注入</h6><p>​                               （1）.创建类，定义属性，创建属性对应有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用有参构造进行注入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">(String oname, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                               （2）.在spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.有参构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--也可以通过索引值注入，写个0就代表有参构造中的第一个参数：  &lt;constructor-arg index=&quot;0&quot; value=&quot;鼠标&quot;&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-p名称空间注入（了解）"><a href="#3-p名称空间注入（了解）" class="headerlink" title="3.p名称空间注入（了解）"></a>3.p名称空间注入（了解）</h5><p>​           1）.使用p名称空间注入，可以简化基于xml配置方式<br>​                      第一步：添加p名称空间在配置文件中</p><p><img src="D:\Typora\images\image-20220510111649514.png" alt="image-20220510111649514"></p><p>​                      第二步：进行属性注入，在bean标签里面进行操作</p><p><img src="D:\Typora\images\image-20220510112058225.png" alt="image-20220510112058225"></p><h4 id="五-IOC操作Bean管理（xml注入其他类型属性）"><a href="#五-IOC操作Bean管理（xml注入其他类型属性）" class="headerlink" title="五.IOC操作Bean管理（xml注入其他类型属性）"></a>五.IOC操作Bean管理（xml注入其他类型属性）</h4><h5 id="1-字面量"><a href="#1-字面量" class="headerlink" title="1.字面量"></a>1.字面量</h5><p>​          1）.null值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置null值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​          2）.属性值包含特殊符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment">    1.把&lt;&gt;进行转义：&amp;lt，&amp;gt</span></span><br><span class="line"><span class="comment">    2.把特殊符号的内容写到CDATA</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-注入属性-外部bean"><a href="#2-注入属性-外部bean" class="headerlink" title="2.注入属性-外部bean"></a>2.注入属性-外部bean</h5><p>​        1）.创建两个类service类和dao类<br>​        2）.在service调用dao里面的方法<br>​        3）.在spring配置文件中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao类型属性，生成set方法   (对象类型)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userdao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userdao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add........&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.service和dao对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入userDao对象</span></span><br><span class="line"><span class="comment">        name属性值：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref属性：创建userDao对象bean标签的id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-注入属性-内部bean"><a href="#3-注入属性-内部bean" class="headerlink" title="3.注入属性-内部bean"></a>3.注入属性-内部bean</h5><p>​         1）.一对多关系：部门和员工<br>​                      一个部门有多个员工，一个员工属于一个部门<br>​                      部门是一，员工是多</p><p>​         2）.在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        3）.在spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-注入属性-级联赋值"><a href="#4-注入属性-级联赋值" class="headerlink" title="4.注入属性-级联赋值"></a>4.注入属性-级联赋值</h5><p>​       1）.第一种写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​      2）.第二种写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>       //需要写出dept的get方法</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="六-IOC操作Bean管理（xml注入集合属性）"><a href="#六-IOC操作Bean管理（xml注入集合属性）" class="headerlink" title="六.IOC操作Bean管理（xml注入集合属性）"></a>六.IOC操作Bean管理（xml注入集合属性）</h4><p>1.注入数组类型属性<br>2.注入List集合类型属性<br>3.注入Map集合类型属性</p><p>1）.创建类、定义数组、list、map、set类型属性，生成对应set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">//1.数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.list集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.map集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.set集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）.在spring配置文件进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.集合类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.在集合里面设置对象类型值   （上面设置的都是字符串，这是对象类型）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个course对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注入list集合类型，值是对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.把集合注入部分提取出来</p><p>​      1）.在spring配置文件中引入名称空间util           （加两个东西）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​      2）.使用util标签完成list集合注入提取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.提取list集合类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.提取list集合类型属性注入使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="七-IOC操作Bean管理（FactoryBean）"><a href="#七-IOC操作Bean管理（FactoryBean）" class="headerlink" title="七.IOC操作Bean管理（FactoryBean）"></a>七.IOC操作Bean管理（FactoryBean）</h4><p>1.Spring有两种类型bean，一种普通bean，另外一种工厂bean（FactoryBean）</p><p>2.普通bean：在配置文件中定义bean类型就是返回类型        （之前做的都是普通bean）</p><p>3.工厂bean：在配置文件中定义bean类型可以和返回类型不一样<br>                   第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean<br>                   第二步：实现接口里面的方法，在实现的方法中定义返回的bean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">    <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="八-IOC操作Bean管理（bean作用域）"><a href="#八-IOC操作Bean管理（bean作用域）" class="headerlink" title="八.IOC操作Bean管理（bean作用域）"></a>八.IOC操作Bean管理（bean作用域）</h4><p>1.在Spring里面，设置创建bean实例是单实例还是多实例</p><p>2.在Spring里面，默认情况下，bean是单实例对象</p><p><img src="D:\Typora\images\image-20220511115907659.png" alt="image-20220511115907659"></p><p><img src="D:\Typora\images\image-20220511120020202.png" alt="image-20220511120020202"></p><p>3.如何设置单实例还是多实例<br>           1）.在spring配置文件bean标签里面有属性（scope）用于设置单实例还是多实例<br>           2）.scope属性值<br>                      第一个值：默认值，singleton，表示是单实例对象（什么都不写即默认值）<br>                      第二个值：prototype，表示是多实例对象</p><p><img src="D:\Typora\images\image-20220511140059798.png" alt="image-20220511140059798"></p><p><img src="D:\Typora\images\image-20220511140326794.png" alt="image-20220511140326794"></p><p>​           3）.singleton和prototype区别<br>​                      第一：singleton单实例，prototype多实例<br>​  第二：设置scope值是singleton的时候（或不写），加载spring配置文件的时候就会创建单实例对象<br>​     设置scope值是prototype的时候，不是在加载spring配置文件的时候创建对象，在调用getBean方法的时候创建多实例对象</p><h4 id="九-IOC操作Bean管理（bean生命周期）"><a href="#九-IOC操作Bean管理（bean生命周期）" class="headerlink" title="九.IOC操作Bean管理（bean生命周期）"></a>九.IOC操作Bean管理（bean生命周期）</h4><p>1.生命周期<br>            1）.从对象创建到对象销毁的过程</p><p>2.bean生命周期<br>            1）.通过构造器创建bean实例（无参构造）<br>            2）.为bean的属性设置值和对其他bean的引用（调用set方法）<br>            3）.调用bean的初始化的方法（需要进行配置）<br>            4）.bean可以使用了（对象获取到了）<br>            5）.当容器关闭的时候，调用bean销毁的方法（需要进行配置销毁的方法）</p><p>3.演示bean生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：执行无参构造创建bean实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：调用set方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：执行初始化的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行的销毁的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步：执行销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--初始化和销毁需要在配置文件中配置，加上相的属性：初始化init-method；销毁destroy-method--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--init-method--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testbean</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);     (ApplicationContext中没有close方法，需要用他的子接口或实现类 )</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：获取创建bean实例对象&quot;</span>);</span><br><span class="line">        System.out.println(orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动让bean实例销毁</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="D:\Typora\images\image-20220511154232535.png" alt="image-20220511154232535"></p><p>4.bean的后置处理器，bean生命周期有七步<br>            1）.通过构造器创建bean实例（无参构造）<br>            2）.为bean的属性设置值和对其他bean的引用（调用set方法）<br>            <strong>3）.把bean实例传递bean后置处理器的方法：postProcessBeforeInitialization</strong><br>            4）.调用bean的初始化的方法（需要进行配置）<br>            <strong>5）.把bean实例传递bean后置处理器的方法：postProcessAfterInitialization</strong><br>            6）.bean可以使用了（对象获取到了）<br>            7）.当容器关闭的时候，调用bean销毁的方法（需要进行配置销毁的方法）</p><p>5.演示添加后置处理器效果<br>            1）.创建类，实现接口BeanPostProcessor，创建后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="D:\Typora\images\image-20220511160625599.png" alt="image-20220511160625599"></p><p>spring怎么知道后置处理器的：因为类实现的是个接口，当实现接口之后，spring就把他作为后置处理器执行。<br>而后置处理器会对当前配置文件中所有bean都添加后置处理器的处理。</p><p>（网上的说明：<a href="https://www.jb51.net/article/225253.htm%EF%BC%89">https://www.jb51.net/article/225253.htm）</a></p><h4 id="十-IOC操作Bean管理（自动装配）"><a href="#十-IOC操作Bean管理（自动装配）" class="headerlink" title="十.IOC操作Bean管理（自动装配）"></a>十.IOC操作Bean管理（自动装配）</h4><p>1.什么是自动装配<br>        1）.根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入</p><p>2.演示自动装配过程<br>        1）.根据属性名称自动注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    实现自动装配</span></span><br><span class="line"><span class="comment">        bean标签属性autowire，配置自动装配</span></span><br><span class="line"><span class="comment">        autowire属性常用两个值：</span></span><br><span class="line"><span class="comment">            1.byName根据属性名称注入。注入值bean的id值和属性名称一样（即bean中的id值和Emp类中的属性名一样）</span></span><br><span class="line"><span class="comment">            2.byType根据属性类型注入。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以前用到的手动装配        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​2）.根据属性类型自动注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    实现自动装配</span></span><br><span class="line"><span class="comment">        bean标签属性autowire，配置自动装配</span></span><br><span class="line"><span class="comment">        autowire属性常用两个值：</span></span><br><span class="line"><span class="comment">            1.byName根据属性名称注入。注入值bean的id值和属性名称一样（即bean中的id值和Emp类中的属性名一样）</span></span><br><span class="line"><span class="comment">            2.byType根据属性类型注入。相同类型的bean，不能定义多个，因为他就找不到，会报错。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以前用到的手动装配        &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="十一-IOC操作Bean管理（外部属性文件）"><a href="#十一-IOC操作Bean管理（外部属性文件）" class="headerlink" title="十一.IOC操作Bean管理（外部属性文件）"></a>十一.IOC操作Bean管理（外部属性文件）</h4><p>1.直接配置数据库信息<br>        1）.配置德鲁伊连接池<br>        2）.引入德鲁伊连接池依赖jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.引入外部属性文件配置数据库的连接池<br>        1）.创建外部属性文件，properties格式文件，写数据库信息</p><p><img src="D:\Typora\images\image-20220511171711506.png" alt="image-20220511171711506"></p><p>​2）.把外部properties属性文件引入到spring配置文件中<br>​*引入context名称空间（）</p><p><img src="D:\Typora\images\image-20220511172205817.png" alt="image-20220511172205817"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​*在spring配置文件使用标签引入外部属性文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--直接配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="十二-IOC操作Bean管理（基于注解方式）"><a href="#十二-IOC操作Bean管理（基于注解方式）" class="headerlink" title="十二.IOC操作Bean管理（基于注解方式）"></a>十二.IOC操作Bean管理（基于注解方式）</h4><p>1.什么是注解<br>        1）.注解是代码特殊标记，格式：@注解名称（属性名称&#x3D;属性值，属性名称&#x3D;属性值，…）<br>        2）.使用注解，注解作用在类上面，方法上面，属性上面<br>        3）.使用注解目的：简化xml配置</p><p>2.Sping针对Bean管理中创建对象提供的注解<br>        1）.@Component<br>        2）.@Service<br>        3）.@Controller<br>        4）.@Repository<br>*上面的四个注解功能是一样的，都可以用来创建bean实例</p><p>3.基于注解方式实现对象创建<br>        第一步：引入依赖：spring-aop-5.3.19.jar<br>        第二部：开启组件扫描     （让spring知道哪个位置有注解，好去创建对象）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment">        1.如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment">        2.扫描包上层目录</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;context:component-scan base-package=&quot;com.company.spring5.dao,com.company.spring5.service&quot;&gt;&lt;/context:component-scan&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​3）.第三步：创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面value属性值可以省略不写，即默认值，默认值格式是类名称，把首字母小写</span></span><br><span class="line"><span class="comment">//四种注解哪个都能实现对象创建，一般按习惯把不同注解放到不同层中</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span>   <span class="comment">//这句话和之前学的xml配置是类似的   &lt;bean id=&quot;userService&quot; class=&quot;com.company.spring5.service.UserService&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.开启 组件扫描细节配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例一</span></span><br><span class="line"><span class="comment">    use-default-filters=&quot;false&quot; ：表示现在不使用默认filter，自己配置filter</span></span><br><span class="line"><span class="comment">    context:include-filter  ：设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--示例二</span></span><br><span class="line"><span class="comment">    下面配置扫描包所有内容，用的默认filters</span></span><br><span class="line"><span class="comment">    context:exclude-filter  ：设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.基于注解方式实现属性注入<br>        1）.@AutoWired：根据属性类型进行自动装配<br>                第一步：把service和dao对象创建，在service和dao类添加创建对象注解<br>                第二部：在service注入dao对象，在service类添加dao类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义dao类型属性</span></span><br><span class="line">    <span class="comment">//不需要添加set方法</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span>    <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2）.@Qualifier：根据属性名称进行注入<br>​这个注解的使用，和上面@AutoWired一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义dao类型属性</span></span><br><span class="line"><span class="comment">//不需要添加set方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span>    <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl&quot;)</span>   <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p>​3）.@Resource：可以根据类型注入，也可以根据名称注入<br>​这个注解的包是import javax.annotation.Resource;   说明不是spring官方提供的，而是javax扩展包中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @Resource    //根据类型进行注入</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span>    <span class="comment">//根据名称进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p>​4）.@Value：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>6.完全注解开发<br>        1）.创建配置类，替代xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>    <span class="comment">//作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.company&quot;)</span>   <span class="comment">//替代xml里的配置组件扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时xml配置可以删掉了，没用了</p><p>​2）.编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载配置类</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        userService.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另：对IOC的理解<br>        <a href="https://www.cnblogs.com/liubin1988/p/8909610.html">https://www.cnblogs.com/liubin1988/p/8909610.html</a>     （标题三或二）</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="一-AOP（概念）"><a href="#一-AOP（概念）" class="headerlink" title="一.AOP（概念）"></a>一.AOP（概念）</h4><p>1.什么是AOP？<br>        1）.面向切面编程（面向方面编程）：利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率<br>        2）.通俗描述：不通过修改源代码方式，在主干功能里面添加新功能<br>        3）.使用登录例子说明AOP</p><p><img src="D:\Typora\images\image-20220523100018545.png" alt="image-20220523100018545"></p><h4 id="二-AOP（底层原理）"><a href="#二-AOP（底层原理）" class="headerlink" title="二.AOP（底层原理）"></a>二.AOP（底层原理）</h4><p>1.AOP底层使用动态代理<br>        1）.有两种情况的动态代理<br>                第一种：有接口的情况 ，使用JDK动态代理<br>                        *创建接口实现类代理对象，增强类的方法</p><p><img src="D:\Typora\images\image-20220523101036130.png" alt="image-20220523101036130"></p><p>​第二种：没有接口的情况，使用CGLIB动态代理<br>​*创建子类的代理对象，增强类的方法</p><p><img src="D:\Typora\images\image-20220523101631387.png" alt="image-20220523101631387"></p><h4 id="三-AOP（JDK动态代理）"><a href="#三-AOP（JDK动态代理）" class="headerlink" title="三.AOP（JDK动态代理）"></a>三.AOP（JDK动态代理）</h4><p>1.使用JDK动态代理，使用Proxy类里面的方法创建代理对象<br>        API中的proxy类：</p><p><img src="D:\Typora\images\image-20220523111130469.png" alt="image-20220523111130469"></p><p>​1）.调用newProxyInstance方法</p><p><img src="D:\Typora\images\image-20220523111717328.png" alt="image-20220523111717328"></p><p>​方法中有三个参数：<br>​第一个参数：类加载器<br>​第二个参数：增强方法所在的的类，这个类实现的接口，支持多个接口<br>​第三个参数：实现这个接口InvocationHandler，创建代理对象，写增强的方法</p><p>2.编写JDK动态代理代码<br>        1）.创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2）.创建接口实现类，实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update方法执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​3）.使用Proxy类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/23 11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //第三个参数直接new，用匿名内部类实现</span></span><br><span class="line"><span class="comment">//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//                return null;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dao.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span>  <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="keyword">private</span> Object  obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法写增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行...&quot;</span> + method.getName() + <span class="string">&quot;传递的参数&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行...&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-AOP（操作术语）"><a href="#四-AOP（操作术语）" class="headerlink" title="四.AOP（操作术语）"></a>四.AOP（操作术语）</h4><p>1.连接点<br>        类里面哪些方法可以被增强，这些方法称为连接点</p><p>2.切入点<br>        实际被真正增强的方法，称为切入点</p><p>3.通知（增强）<br>        1）.实际增强的逻辑部分称为通知（增强）<br>        2）.通知有多种类型<br>                *前置通知：方法前执行<br>                *后置通知：方法后执行<br>                *环绕通知：方法前后都执行<br>                *异常通知：方法异常执行<br>                *最终通知：相当于try catch的finally，不管异不异常都执行</p><p>4.切面<br>        是动作<br>        1）.把通知应用到切入点的过程</p><h4 id="五-AOP操作（准备）"><a href="#五-AOP操作（准备）" class="headerlink" title="五.AOP操作（准备）"></a>五.AOP操作（准备）</h4><p>1.Spring框架中一般基于AspectJ实现AOP操作<br>        1）.什么是AspectJ<br>                AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</p><p>2.基于AspectJ实现AOP操作<br>        1）.基于xml配置文件<br>        2）.基于注解方式实现（使用此）</p><p>3.在项目工程里面引入AOP相关依赖</p><p><img src="D:\Typora\images\image-20220523171406260.png" alt="image-20220523171406260"></p><p>4.切入点表达式<br>        1）.切入点表达式的作用：知道对哪个类里边的哪个 方法 进行增强<br>        2）.语法结构<br>                execution( [权限修饰符] [返回类型] [类全路径] [参数列表] )</p><p>​举例1：对com.yc.dao.BookDao类里面的add进行增强<br>​execution(* com.yc.dao.BookDao.add(..))        &#x2F;&#x2F;星号表示任意修饰符，后边有空格；返回类型可以省略不写</p><p>​举例2：对com.yc.dao.BookDao类里面的所有的方法进行增强<br>​execution(* com.yc.dao.BookDao.*(..))         &#x2F;&#x2F;后面的星号代表对类中的所有的方法进行增强</p><p>​举例3：对com.yc.dao包里面的所有类，类里面的所有的方法进行增强<br>​execution(* com.yc.dao<code>*.*</code>(..))</p><h4 id="六-AOP操作（AspectJ注解）"><a href="#六-AOP操作（AspectJ注解）" class="headerlink" title="六.AOP操作（AspectJ注解）"></a>六.AOP操作（AspectJ注解）</h4><p>1.创建类，在类里面定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 被增强的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/24 9:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建增强类（编写增强逻辑）<br>        1）.在增强类里面，创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 增强的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/24 9:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.进行通知配置<br>        1）.在spring配置文件中，开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company.spring5.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​2）.使用注解创建User和UserProxy对象（类上边加spring注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​3）.在增强类上面添加注解@Aspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>    <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​4）.在spring配置文件中开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.配置不同类型的通知<br>        1）.在增强类中的里面，在作为通知方法上面添加通知类型的注解，使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 增强的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/24 9:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>    <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.company.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知     （方法之后执行，有没有异常都执行）</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.company.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知（或叫返回通知）     （返回值之后进行执行，有异常不执行）</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.company.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知        （有异常才执行）</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.company.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.company.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.相同的切入点抽取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 增强的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/24 9:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>    <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取相同切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.company.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知     （方法之后执行，有没有异常都执行）</span></span><br><span class="line">    <span class="meta">@After(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知（或叫返回通知）     （返回值之后进行执行，有异常不执行）</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知        （有异常才执行）</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.有多个增强类对同一个方法进行增强，设置增强类优先级<br>        1）.在增强类上面添加注解@Order（数字类型值），数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> </span><br></pre></td></tr></table></figure><p>7.完全使用注解开发<br>        1）.创建配置类，不需要创建xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.company&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>   <span class="comment">//此注解等同于在xml中配置 &lt;aop:aspectj-autoproxy&gt;，也就是生成代理对象，表示开启spring对注解AOP的支持。默认不写就是false。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七-AOP操作（AspectJ配置文件）"><a href="#七-AOP操作（AspectJ配置文件）" class="headerlink" title="七.AOP操作（AspectJ配置文件）"></a>七.AOP操作（AspectJ配置文件）</h4><p>开发过程中一般都用注解方式</p><p>1.创建两个类，增强类和被增强类，创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在spring配置文件中创建两个类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.在spring配置文件中配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.company.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;befor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><h4 id="一-JdbcTemplate（概念和准备）"><a href="#一-JdbcTemplate（概念和准备）" class="headerlink" title="一.JdbcTemplate（概念和准备）"></a>一.JdbcTemplate（概念和准备）</h4><p>1.什么是JdbcTemplate<br>        1）.Spring框架对JDBC进行封装，使用JdbcTemplate方便实现对数据库操作</p><p>2.准备工作<br>        1）.引入相关jar包</p><p><img src="D:\Typora\images\image-20220524135912682.png" alt="image-20220524135912682"></p><p>​2）.在spring配置文件配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://jdbctemplatetest&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​3）.配置JdbcTemplate对象，注入DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set方法注入dataSource--&gt;</span>   <span class="comment">&lt;!--点进JdbcTemplate源码，发现注入dataSource的方法有有参构造和set，但是有参构造有个set方法，所以注入dataSource其实是用set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​4）.创建service类，创建dao类，在dao注入jdbcTemplate对象<br>​*配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​*Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​*Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-JdbcTemplate操作数据库（添加）"><a href="#二-JdbcTemplate操作数据库（添加）" class="headerlink" title="二.JdbcTemplate操作数据库（添加）"></a>二.JdbcTemplate操作数据库（添加）</h4><p>1.对应数据库创建实体类    （数据库表中对应的属性和它们的get，set方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.spring5.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/24 14:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String ustatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUstatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ustatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUstatus</span><span class="params">(String ustatus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ustatus = ustatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.编写service和dao</p><p>​service里注入dao，添加add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        bookDao.add(book);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加的方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​1）.在dao进行数据库添加操作<br>​2）.调用Jdbctemplate对象里面update方法实现添加操作<br>​<img src="D:\Typora\images\image-20220524144847441.png" alt="image-20220524144847441"></p><p>​有两个参数：<br>​第一个参数：sql语句<br>​第二个参数：可变参数，设置sql语句的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into book values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">//2.调用方法实现</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, book.getUserId(), book.getUsername(), book.getUstatus());</span><br><span class="line">        System.out.println(update);      <span class="comment">//上边返回的int值，代表影响的行数，成功添加了几条记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*      //或者这样写，因为update第二个参数是可变的，实际上就是一个数组形式，可以先把他们放到数组里，再把数组传进去</span></span><br><span class="line"><span class="comment">        //2.调用方法实现</span></span><br><span class="line"><span class="comment">        Object[] args = &#123;book.getUserId(), book.getUsername(), book.getUstatus()&#125;;</span></span><br><span class="line"><span class="comment">        int update = jdbcTemplate.update(sql, args);</span></span><br><span class="line"><span class="comment">        System.out.println(update);      //上边返回的int值，代表影响的行数，成功添加了几条记录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setUserId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    book.setUsername(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    book.setUstatus(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    bookService.addBook(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220524155053367.png" alt="image-20220524155053367"></p><h4 id="三-JdbcTemplate操作数据库（修改和删除）"><a href="#三-JdbcTemplate操作数据库（修改和删除）" class="headerlink" title="三.JdbcTemplate操作数据库（修改和删除）"></a>三.JdbcTemplate操作数据库（修改和删除）</h4><p>1.修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update book set username = ? , ustatus = ? where user_id = ?&quot;</span>;</span><br><span class="line">    Object[] args = &#123;book.getUsername(), book.getUstatus(), book.getUserId()&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //添加</span></span><br><span class="line"><span class="comment">//        Book book = new Book();</span></span><br><span class="line"><span class="comment">//        book.setUserId(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        book.setUsername(&quot;java&quot;);</span></span><br><span class="line"><span class="comment">//        book.setUstatus(&quot;a&quot;);</span></span><br><span class="line"><span class="comment">//        bookService.addBook(book);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setUserId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        book.setUsername(<span class="string">&quot;java123&quot;</span>);</span><br><span class="line">        book.setUstatus(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        bookService.updateBook(book);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//删除的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from book where user_id =?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, id);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //添加</span></span><br><span class="line"><span class="comment">//        Book book = new Book();</span></span><br><span class="line"><span class="comment">//        book.setUserId(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        book.setUsername(&quot;java&quot;);</span></span><br><span class="line"><span class="comment">//        book.setUstatus(&quot;a&quot;);</span></span><br><span class="line"><span class="comment">//        bookService.addBook(book);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //修改</span></span><br><span class="line"><span class="comment">//        Book book = new Book();</span></span><br><span class="line"><span class="comment">//        book.setUserId(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        book.setUsername(&quot;java123&quot;);</span></span><br><span class="line"><span class="comment">//        book.setUstatus(&quot;b&quot;);</span></span><br><span class="line"><span class="comment">//        bookService.updateBook(book);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        bookService.deleteBook(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="四-JdbcTemplate操作数据库（查询返回某个值）"><a href="#四-JdbcTemplate操作数据库（查询返回某个值）" class="headerlink" title="四.JdbcTemplate操作数据库（查询返回某个值）"></a>四.JdbcTemplate操作数据库（查询返回某个值）</h4><p>1.查询表里面有多少条记录，返回是某个值</p><p>2.使用JdbcTemplate实现查询返回某个值代码<br>        <img src="D:\Typora\images\image-20220524164014317.png" alt="image-20220524164014317"><br>        有两个参数：<br>                第一个参数：sql语句<br>                第二个参数：返回类型Class（返回int，就是int类型Class；返回String，就是String类型Class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询表记录数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selectCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from book&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-JdbcTemplate操作数据库（查询返回对象）"><a href="#五-JdbcTemplate操作数据库（查询返回对象）" class="headerlink" title="五.JdbcTemplate操作数据库（查询返回对象）"></a>五.JdbcTemplate操作数据库（查询返回对象）</h4><p>1.场景：查询图书详情</p><p>2.JdbcTemplate实现查询返回对象<br>        <img src="D:\Typora\images\image-20220524165625628.png" alt="image-20220524165625628"><br>        有三个参数：<br>                第一个参数：sql语句<br>                第二个参数：RowMapper，是接口，针对返回不同类型的数据，使用这个接口里面的实现类完成数据封装<br>                第三个参数：sql语句的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBookInfo</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from book where user_id = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六-JdbcTemplate操作数据库（查询返回集合）"><a href="#六-JdbcTemplate操作数据库（查询返回集合）" class="headerlink" title="六.JdbcTemplate操作数据库（查询返回集合）"></a>六.JdbcTemplate操作数据库（查询返回集合）</h4><p>1.场景：查询图书列表分页…</p><p>2.调用JdbcTemplate方法实现查询返回集合<br>        <img src="D:\Typora\images\image-20220524171752297.png" alt="image-20220524171752297"><br>        有三个参数：<br>                第一个参数：sql语句<br>                第二个参数：RowMapper，是接口，针对返回不同类型的数据，使用这个接口里面的实现类完成数据封装<br>                第三个参数：sql语句的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回集合</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from book&quot;</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> bookList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七-JdbcTemplate操作数据库（批量操作）"><a href="#七-JdbcTemplate操作数据库（批量操作）" class="headerlink" title="七.JdbcTemplate操作数据库（批量操作）"></a>七.JdbcTemplate操作数据库（批量操作）</h4><p>1.批量操作：操作表里面多条记录</p><p>2.JdbcTemplate实现批量添加操作<br>        <img src="D:\Typora\images\image-20220524173418269.png" alt="image-20220524173418269"><br>        有两个参数：<br>                第一个参数：sql语句<br>                第二个参数：List集合，表示添加的多条记录数据</p><p>dao层实现类进行批量添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into book values(?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;5&quot;</span>,<span class="string">&quot;musql&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//将三个数组放到list集合里边</span></span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用批量添加</span></span><br><span class="line">bookService.batchAdd(batchArgs);</span><br></pre></td></tr></table></figure><p>3.JdbcTemplate实现批量修改操作</p><p>批量修改<br>dao层实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update book set username = ? , ustatus = ? where user_id = ?&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量修改   （参数顺序有要求）</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;java1&quot;</span>,<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;c++2&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;musql3&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//将三个数组放到list集合里边</span></span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用方法实现批量修改</span></span><br><span class="line">bookService.batchUpdate(batchArgs);</span><br></pre></td></tr></table></figure><p>批量删除<br>dao层实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchDeleteBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from book where user_id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//将三个数组放到list集合里边</span></span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用方法实现批量修改</span></span><br><span class="line">bookService.batchDelete(batchArgs);</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="一-事务操作（事务概念）"><a href="#一-事务操作（事务概念）" class="headerlink" title="一.事务操作（事务概念）"></a>一.事务操作（事务概念）</h4><p>1.什么是事务<br>        1）.事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败<br>        2）.典型场景：银行转账<br>                张三转账100给李四，张三少100，李四多100。有任何一方有问题，都失败</p><p>2.事务四个特性（ACID）<br>        1）.原子性：过程中不可分割，要么都成功，一个失败都失败<br>        2）.一致性：操作之前和操作之后总量是不变的<br>        3）.隔离性：多事务操作的时候，他们之间不会产生影响<br>        4）.持久性：提交事务之后，表中数据真正发生变化</p><h4 id="二-事务操作（搭建事务操作环境）"><a href="#二-事务操作（搭建事务操作环境）" class="headerlink" title="二.事务操作（搭建事务操作环境）"></a>二.事务操作（搭建事务操作环境）</h4><p><img src="D:\Typora\images\image-20220525110309064.png" alt="image-20220525110309064"></p><p>1.创建数据库表，添加记录</p><p><img src="D:\Typora\images\image-20220525111206199.png" alt="image-20220525111206199"></p><p>2.创建service，搭建dao，完成对象创建 和注入关系<br>        1）.service注入dao，在dao注入JdbcTemplate，在JdbcTemplate注入DataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UersDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///jdbctemplatetest&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set方法注入dataSource--&gt;</span>   <span class="comment">&lt;!--点进JdbcTemplate源码，发现注入dataSource的方法有有参构造和set，但是有参构造有个set方法，所以注入dataSource其实是用set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.在dao创建两个方法：多钱和少钱的方法，在service创建方法（转账的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//少钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UersDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//zhangsan转账100给李四</span></span><br><span class="line">    <span class="comment">//少钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money=money-? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money=money+? where username=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转账的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//zhangsan少100</span></span><br><span class="line">        userDao.reduceMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lisi多100</span></span><br><span class="line">        userDao.addMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.上面代码，如果正常执行没有问题的，但如果代码执行过程中出现异常，有问题</p><p><img src="D:\Typora\images\image-20220525134621757.png" alt="image-20220525134621757"></p><p>​1）.上面问题如何解决呢<br>​使用事务进行解决</p><p>​2）.事务操作过程</p><p><img src="D:\Typora\images\image-20220525135320982.png" alt="image-20220525135320982"></p><h4 id="三-事务操作（Spring管理）"><a href="#三-事务操作（Spring管理）" class="headerlink" title="三.事务操作（Spring管理）"></a>三.事务操作（Spring管理）</h4><p>1.事务添加到JavaEE三层结构里面Service层（业务逻辑层）</p><p>2.在Spring进行事务管理操作<br>        1）.有两种方式：编程式事务管理和声明式事务管理（通常使用后者）</p><p>3.声明式事务管理（通常用第一种）<br>        1）.基于注解方式<br>        2）.基于xml配置文件方式</p><p>4.在Spring进行声明式事务管理，底层使用AOP原理</p><p>5.Spring事务管理API<br>        1）.提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类<br>                PlatformTransactionManager</p><p><img src="D:\Typora\images\image-20220525140624716.png" alt="image-20220525140624716"></p><h4 id="四-事务操作（注解声明式事务管理）"><a href="#四-事务操作（注解声明式事务管理）" class="headerlink" title="四.事务操作（注解声明式事务管理）"></a>四.事务操作（注解声明式事务管理）</h4><p>1.在spring配置文件配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span>    <span class="comment">&lt;!--指定自己创建数据源的部分，上边的数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在spring配置文件，开启事务注解<br>        1）.在spring配置文件中引入名称空间tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​2）.开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.在service类上面（或者service类里面的方法上面）添加事务注解<br>        1）.@Transactional，这个注解可以添加到类上面，也可以添加到方法上面<br>        2）.如果把这个注解添加类上面，这个类里面所有的方法都添加事务<br>        3）.如果把这个注解添加方法上面，为这个方法添加事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-事务管理（声明式事务管理参数配置）"><a href="#五-事务管理（声明式事务管理参数配置）" class="headerlink" title="五.事务管理（声明式事务管理参数配置）"></a>五.事务管理（声明式事务管理参数配置）</h4><p>在service类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><p><img src="D:\Typora\images\image-20220525143451041.png" alt="image-20220525143451041"></p><p>1.propagation：事务传播行为<br>        1）.多事务方法之间进行调用，这个过程中事务是如何进行管理的</p><p><img src="D:\Typora\images\image-20220525155900667.png" alt="image-20220525155900667"></p><p><img src="D:\Typora\images\image-20220525155924393.png" alt="image-20220525155924393"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span>   <span class="comment">//不写默认就是REQUIRED</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.isolation：事务隔离级别<br>        1).事务有个特性称为隔离性，多事务操作之间不会产生影响，不考虑隔离性会产生很多问题<br>        2）.有三个读的问题：脏读、不可重复读、虚（幻）读<br>                (1).脏读：一个未提交的事务读取到另一个未提交事务的数据</p><p><img src="D:\Typora\images\image-20220525161113503.png" alt="image-20220525161113503"></p><p><img src="D:\Typora\images\d01373f082025aaf5be5454896a1dd6d024f1a37.jpeg" alt="d01373f082025aaf5be5454896a1dd6d024f1a37"></p><p>​(2).不可重复读：一个未提交事务读取到另一提交事务修改数据（事务之间应该不会产生影响 ）</p><p><img src="D:\Typora\images\image-20220525161757035.png" alt="image-20220525161757035"></p><p><img src="D:\Typora\images\不可重复读.jpeg" alt="不可重复读"></p><p>​(3).幻读：一个未提交的事务读取到另一提交事务添加数据</p><p><img src="D:\Typora\images\虚读.jpeg" alt="虚读"></p><p>​3）.解决：通过设置事务隔离性，解决读问题</p><p><img src="D:\Typora\images\image-20220525163432191.png" alt="image-20220525163432191"></p><p>​隔离级别设置：（第二个参数）（Mysql默认隔离级别是REPEATABLE_READ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.timeout：超时时间<br>        1）.事务需要在一定的时间内进行提交，如果不提交就会进行回滚<br>        2）.默认值是-1，代表不超时。设置的话时间以秒单位进行计算<br>                第一个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(timeout = -1 ,propagation = Propagation.REQUIRED，isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.readOnly：是否只读<br>        1）.读：查询操作，写：添加修改删除操作<br>        2）.readOnly默认值false，表示可以查询，可以增加修改删除操作<br>        3）.设置readOnly值是true，设置成true之后，只能查询</p><p>5.rollbackFor：回滚<br>        1）.设置出现哪些异常进行事务回滚</p><p>6.noRollbackFor：不回滚<br>        1）.设置出现哪些异常不进行事务回滚</p><h4 id="六-事务操作（XML声明式事务管理）"><a href="#六-事务操作（XML声明式事务管理）" class="headerlink" title="六.事务操作（XML声明式事务管理）"></a>六.事务操作（XML声明式事务管理）</h4><p>1.在spring配置文件中进行<br>        第一步：配置事务管理器<br>        第二步：配置通知<br>        第三步：配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--1.创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span>    <span class="comment">&lt;!--指定自己创建数据源的部分，上边的数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.配置通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定哪种规则的方法上面添加事务</span></span><br><span class="line"><span class="comment">            两种方式：1.在哪个方法添加事务，就写那个方法名</span></span><br><span class="line"><span class="comment">                     2.比如account*代表方法名只要以account开头的，都加上事务操作</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.配置切入点和切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.company.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="七-事务操作（完全注解声明式事务管理）"><a href="#七-事务操作（完全注解声明式事务管理）" class="headerlink" title="七.事务操作（完全注解声明式事务管理）"></a>七.事务操作（完全注解声明式事务管理）</h4><p>1.创建配置类，使用配置类替代xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 完全注解声明式事务管理（完全替代xml配置文件）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/25 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.company&quot;)</span>    <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>     <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span>  <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///jdbctemplatetest&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;    <span class="comment">//参数的意思是到ioc容器中根据类型找到dataSource，传给下面的setDataSource方法里</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        <span class="comment">//注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完全注解测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAccount2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TxConfig.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.accountMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/04/01/JavaWeb/"/>
      <url>/2022/04/01/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="一-HTML中的基础标签"><a href="#一-HTML中的基础标签" class="headerlink" title="一.HTML中的基础标签"></a>一.HTML中的基础标签</h4><p>HTML能决定页面上展示哪些内容</p><p>html语言是解释型语言，不是编译型<br>浏览器是容错的</p><h5 id="1）-lt-html-gt-lt-html-gt"><a href="#1）-lt-html-gt-lt-html-gt" class="headerlink" title="1）&lt;html&gt;&lt;/html&gt;"></a>1）<code>&lt;html&gt;&lt;/html&gt;</code></h5><p>html页面中由一对标签组成：<code>&lt;html&gt;&lt;/html&gt;</code></p><p><code>&lt;html&gt;</code>  称之为开始标签<br><code>&lt;/html&gt;</code>称之为结束标签</p><h5 id="2）-lt-title-gt-lt-title-gt"><a href="#2）-lt-title-gt-lt-title-gt" class="headerlink" title="2）&lt;title&gt;&lt;/title&gt;"></a>2）<code>&lt;title&gt;&lt;/title&gt;</code></h5><p><code>&lt;title&gt;&lt;/title&gt;</code>表示网页的标题 </p><p><img src="D:\Typora\images\image-20220417151137976.png" alt="image-20220417151137976"></p><p><img src="D:\Typora\images\image-20220417151150384.png" alt="image-20220417151150384"></p><h5 id="3）-lt-meta-gt"><a href="#3）-lt-meta-gt" class="headerlink" title="3）&lt;meta&gt;"></a>3）<code>&lt;meta&gt;</code></h5><p>可以在<code>&lt;meta&gt;</code>标签中设置编码格式 </p><p><img src="D:\Typora\images\image-20220417172745339.png" alt="image-20220417172745339"></p><h5 id="4）-lt-br-gt"><a href="#4）-lt-br-gt" class="headerlink" title="4）&lt;br/&gt;"></a>4）<code>&lt;br/&gt;</code></h5><p><code>&lt;br/&gt;</code>表示换行。br标签是一个单标签。单标签：开始标签和结束标签是同一个，斜杠放在 单词 后面</p><p><img src="D:\Typora\images\image-20220417151104791.png" alt="image-20220417151104791"></p><p><img src="D:\Typora\images\image-20220417151115501.png" alt="image-20220417151115501"></p><h5 id="5）-lt-p-gt-lt-p-gt"><a href="#5）-lt-p-gt-lt-p-gt" class="headerlink" title="5）&lt;p&gt;&lt;/p&gt;"></a>5）<code>&lt;p&gt;&lt;/p&gt;</code></h5><p><code>&lt;p&gt;&lt;/p&gt;</code>表示段落标签</p><h5 id="6）-lt-img-gt"><a href="#6）-lt-img-gt" class="headerlink" title="6）&lt;img/&gt;"></a>6）<code>&lt;img/&gt;</code></h5><p><code>&lt;img/&gt;</code>图片标签<br>         src属性表示图片的文件路径<br>         width和height表示图片大小<br>         alt表示图片的提示</p><p><img src="D:\Typora\images\image-20220417151006617.png" alt="image-20220417151006617"></p><h5 id="7）路径问题："><a href="#7）路径问题：" class="headerlink" title="7）路径问题："></a>7）路径问题：</h5><p>​     1.相对路径<br>​     2.绝对路径</p><h5 id="8）h1-h6"><a href="#8）h1-h6" class="headerlink" title="8）h1~h6"></a>8）h1~h6</h5><p>h1~h6：标题标签（标题一到标题六 ）<br><code>&lt;h1&gt;&lt;/h1&gt;</code>：标题一<br><code>&lt;h2&gt;&lt;/h2&gt;</code>：标题二<br>…</p><p><img src="D:\Typora\images\image-20220417150747646.png" alt="image-20220417150747646"><img src="D:\Typora\images\image-20220417150821636.png" alt="image-20220417150821636"></p><h5 id="9）列表标签-lt-ol-gt-lt-ol-gt-lt-ul-gt-lt-ul-gt"><a href="#9）列表标签-lt-ol-gt-lt-ol-gt-lt-ul-gt-lt-ul-gt" class="headerlink" title="9）列表标签  &lt;ol&gt;&lt;/ol&gt; &lt;ul&gt;&lt;/ul&gt;"></a>9）列表标签  <code>&lt;ol&gt;&lt;/ol&gt;</code> <code>&lt;ul&gt;&lt;/ul&gt;</code></h5><p>列表标签：<br>         <code>&lt;ol&gt;&lt;/ol&gt;</code>：有序列表<br>                 start 表示从几开始，type显示的类型：A ， a ， I ， i ，1<br>          <code>&lt;ul&gt;&lt;/ul&gt;</code>：无序列表<br>                 type显示类型：disc（default），   circle  ， square</p><p><img src="D:\Typora\images\image-20220417150512835.png" alt="image-20220417150512835"><img src="D:\Typora\images\image-20220417150522518.png"></p><p><img src="D:\Typora\images\image-20220417150634895.png" alt="image-20220417150634895"><img src="D:\Typora\images\image-20220417150642866.png" alt="image-20220417150642866"></p><h5 id="10）字体标签ubi"><a href="#10）字体标签ubi" class="headerlink" title="10）字体标签ubi"></a>10）字体标签ubi</h5><p>​         u：下划线<br>​         b：加粗<br>​         i：斜体</p><p><img src="D:\Typora\images\image-20220411100638642.png" alt="image-20220411100638642"></p><p><img src="D:\Typora\images\image-20220417150426224.png" alt="image-20220417150426224"></p><h5 id="11）-lt-sup-gt-lt-sup-gt-和-lt-sub-gt-lt-sub-gt"><a href="#11）-lt-sup-gt-lt-sup-gt-和-lt-sub-gt-lt-sub-gt" class="headerlink" title="11）&lt;sup&gt;&lt;/sup&gt;和&lt;sub&gt;&lt;/sub&gt;"></a>11）<code>&lt;sup&gt;&lt;/sup&gt;</code>和<code>&lt;sub&gt;&lt;/sub&gt;</code></h5><p>上标<code>&lt;sup&gt;&lt;/sup&gt;</code><br>下标<code>&lt;sub&gt;&lt;/sub&gt;</code></p><p><img src="D:\Typora\images\image-20220417144122436.png" alt="image-20220417144122436"></p><p><img src="D:\Typora\images\image-20220417144139032.png" alt="image-20220417144139032"></p><h5 id="12）字符实体"><a href="#12）字符实体" class="headerlink" title="12）字符实体"></a>12）字符实体</h5><p>html中的字符实体（等等很多字符实体标签去网上搜就行）</p><p>​             小于号：<code>&amp;lt;</code><br>​             大于等于号：<code>&amp;ge;</code><br>​             版权：<code>&amp;copy</code></p><p><img src="D:\Typora\images\image-20220417144236721.png" alt="image-20220417144236721"></p><p><img src="D:\Typora\images\image-20220417144300173.png" alt="image-20220417144300173"></p><h5 id="13）-lt-span-gt-lt-span-gt"><a href="#13）-lt-span-gt-lt-span-gt" class="headerlink" title="13）&lt;span&gt;&lt;/span&gt;"></a>13）<code>&lt;span&gt;&lt;/span&gt;</code></h5><p>不换行的块标记<br><code>&lt;span&gt;&lt;/span&gt;</code></p><h5 id="14）超链接a"><a href="#14）超链接a" class="headerlink" title="14）超链接a"></a>14）超链接a</h5><p>   a表示超链接<br>           href：链接的地址<br>           target：<br>                    _self：在本窗口打开<br>                    _blank：在一个新窗口的打开<br>                    _parent：在父窗口打开<br>                    _top：在顶层窗口打开</p><p><img src="D:\Typora\images\image-20220417150016346.png" alt="image-20220417150016346"></p><h5 id="15）div层"><a href="#15）div层" class="headerlink" title="15）div层"></a>15）div层</h5><p>先了解，就是一层一层的</p><h4 id="二-HTML中的table标签"><a href="#二-HTML中的table标签" class="headerlink" title="二.HTML中的table标签"></a>二.HTML中的table标签</h4><p>表格     <code>&lt;table&gt;&lt;/table&gt;</code><br>      行         <code>&lt;tr&gt;&lt;/tr&gt;</code><br>      列         <code>&lt;td&gt;&lt;/td&gt;</code><br>      表头列   <code>&lt;th&gt;&lt;/th&gt;</code></p><p>​      table中有如下属性（虽然已经淘汰，但是最好了解一下）<br>​          border：表格边框的粗细（如果不写的话就是无表格）<br>​          width：表格的宽度<br>​          cellspacing：单元格间距<br>​          cellpadding：单元格填充</p><p>​      tr中有一个属性：align（对齐方式）：left（左对齐，默认），center（居中），right（右对齐）</p><p><img src="D:\Typora\images\image-20220417174956388.png" alt="image-20220417174956388"></p><p><img src="D:\Typora\images\image-20220417175018563.png" alt="image-20220417175018563"></p><p>rowspan：行合并<br>colspan：列合并</p><p>​                （在苹果的第二个标签处写上rowspan&#x3D;”2”，代表着两行合并）</p><p><img src="D:\Typora\images\image-20220417182543353.png" alt="image-20220417182543353"></p><p><img src="D:\Typora\images\image-20220417182732097.png" alt="image-20220417182732097"></p><p>​              （在最后加上一行标签写上colspan&#x3D;”4”，代表着四列合并）</p><p><img src="D:\Typora\images\image-20220417182920498.png" alt="image-20220417182920498"></p><p><img src="D:\Typora\images\image-20220417183104378.png" alt="image-20220417183104378"></p><h4 id="三-HTML-表单标签"><a href="#三-HTML-表单标签" class="headerlink" title="三.HTML-表单标签"></a>三.HTML-表单标签</h4><p>表单就是一个容器，他能够承载我们要发送给服务器的数据</p><p><code>&lt;form&gt;&lt;/form&gt;</code><br>action 表示发送的目的地。发送到哪个页面<br>method 表示发送方式。get方式都堆在地址栏了，不安全，且有大小限制。<br>                                      post方式就不会</p><p>input type&#x3D;”text”  表示文本框。其中name属性必须要指定(自己指定)，否则这个文本框的数据将来是不会发送给服务器的。文本框中可以有value值，文本框中输入的是什么，将来value就是什么<br>input type&#x3D;”password”  表示密码框。输入密码时是看不到的<br>input type&#x3D;”radio”  表示单选按钮。需要注意，name属性值保持一致，这样才会有互斥的效果。要加value值，因为单选按钮没法输入，所以要指定好当选中一个选项时，value值是什么。可以通过checked属性 设置成默认选中的项（实际上是checked&#x3D;”checked”   但当属性名和属性值相同时，可以省略属性值，直接写个属性名就行）<br>input type&#x3D;”checkbox”  表示复选框。name属性建议保持一致，这样将来我们服务器端获取值的时候获取的是一个数组<br><code>&lt;select&gt;&lt;/select&gt;</code>表示下拉列表。每一个选项是<code>&lt;option&gt;&lt;/option&gt;</code>，其中value属性是发送给服务器的值，selected表示默认选中的项<br><code>&lt;textarea&gt;&lt;/textarea&gt;</code>  表示多行文本框（或者称之为文本域）。rows是让他显示多少行(默认两行)，cols是一行多少 个字。他的value值就是开始结束标签之间的内容<br>input type&#x3D;”submit” 表示提交按钮<br>input type&#x3D;”radio” 表示重置按钮<br>input type&#x3D;”radio” 表示普通按钮</p><p><img src="D:\Typora\images\image-20220418110759349.png" alt="image-20220418110759349"></p><p><img src="D:\Typora\images\image-20220418125353453.png" alt="image-20220418125353453"></p><h4 id="四-frameset-iframe"><a href="#四-frameset-iframe" class="headerlink" title="四.frameset-iframe"></a>四.frameset-iframe</h4><p>frameset 表示页面框架，这个标签已经淘汰，了解即可<br>frame表示框架中的具体页面引用</p><p><img src="D:\Typora\images\image-20220418125114791.png" alt="image-20220418125114791"></p><p><img src="D:\Typora\images\image-20220418125144625.png" alt="image-20220418125144625"></p><p>iframe 在一个页面嵌入一个子页面</p><p><img src="D:\Typora\images\image-20220418125231180.png" alt="image-20220418125231180"></p><p><img src="D:\Typora\images\image-20220418125250969.png" alt="image-20220418125250969"></p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="一-CSS语法"><a href="#一-CSS语法" class="headerlink" title="一.CSS语法"></a>一.CSS语法</h4><p>CSS能决定页面的美观程度</p><p>CSS英文全称为Cascading　Style　Sheet，中文译为“层叠样式表”。CSS主要是对HTML标记的内容进行更加丰富的装饰，并将网页表现样式与网页结构分离的一种样式设计语言。可以使用CSS控制HTM页面中的文本内容、图片外形以及版面布局等外观的显示样式。</p><p>1.为什么需要CSS</p><p>2.CSS最基本的分类：标签样式表、类样式表、ID样式表</p><p><img src="D:\Typora\images\image-20220425165527487.png" alt="image-20220425165527487"></p><p>3.CSS从位置上的分类：嵌入式样式表（行内样式）、内部样式表、外部样式表<br>               嵌入式样式表：写在一个标签的内部</p><p><img src="D:\Typora\images\image-20220419211147639.png" alt="image-20220419211147639"></p><p>​               内部样式表：</p><p><img src="D:\Typora\images\image-20220419211205631.png" alt="image-20220419211205631"></p><p>​               外部样式表：把CSS代码专门用一个文件去管理，然后再HTML页面导入这个CSS文件<br>​                                     在head标签中写link标签<code>&lt;link&gt;</code>,rel&#x3D;”stylesheet”是固定写法</p><p><img src="D:\Typora\images\image-20220419211218290.png" alt="image-20220419211218290"></p><h4 id="二-CSS盒子模型"><a href="#二-CSS盒子模型" class="headerlink" title="二.CSS盒子模型"></a>二.CSS盒子模型</h4><p>1.border：边框样式<br>          border-width：边框粗细<br>          border-style：边框样式：solid（实线），dotted（点状线），…<br>          border-color：边框颜色<br>可以直接写在一起：<code>border:4px double blue;</code></p><p><img src="D:\Typora\images\image-20220425190322310.png" alt="image-20220425190322310"></p><p>在div中可以嵌入一个div</p><p><img src="D:\Typora\images\image-20220425190117713.png" alt="image-20220425190117713"></p><p><img src="D:\Typora\images\image-20220425190143696.png" alt="image-20220425190143696"></p><p>2.margin：间距</p><p>可以设置内div在外div（父容器）中的位置<br>margin-top:100px;  据上边100px<br>margin-left:100px;  据左边100px<br>也可以写成一个：margin:100px;  代表着据上下左右都是100px</p><p>CSS文档中属性里外补丁里的margin有说明：<br>如果提供全部四个参数值，将按上－右－下－左的顺序作用于四边。<br>如果只提供一个，将用于全部的四边。<br>如果提供两个，第一个用于上－下，第二个用于左－右。<br>如果提供三个，第一个用于上，第二个用于左－右，第三个用于下。</p><p><img src="D:\Typora\images\image-20220425190454443.png" alt="image-20220425190454443"></p><p><img src="D:\Typora\images\image-20220425190651513.png" alt="image-20220425190651513"></p><p>3.padding：填充</p><p>也可用填充来调整内div的位置（给父容器进行填充来调整）<br>padding-top:50px;  上边填充50px<br>padding-left:50px;  左边填充50px</p><p><img src="D:\Typora\images\image-20220425191303373.png" alt="image-20220425191303373"></p><p><img src="D:\Typora\images\image-20220425191316086.png" alt="image-20220425191316086"></p><p>IE浏览器：实际尺寸+width<br>google浏览器：实际尺寸&#x3D;width+左右border-width+padding</p><p>div在页面上布局总是上边和左边有一小块空白，可以加个body，里面设置margin:0;和padding:0;</p><p><img src="D:\Typora\images\image-20220425185800201.png" alt="image-20220425185800201"></p><p><img src="D:\Typora\images\image-20220425185844571.png" alt="image-20220425185844571"></p><h4 id="三-CSS布局"><a href="#三-CSS布局" class="headerlink" title="三.CSS布局"></a>三.CSS布局</h4><p>position:absolute：绝对定位，需要配合使用left，top，代表横坐标和纵坐标的像素<br>position:relative：相对定位，一般会和float，margin，padding….一起使用</p><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h4 id="一-js语法快速学习"><a href="#一-js语法快速学习" class="headerlink" title="一.js语法快速学习"></a>一.js语法快速学习</h4><p>Javascript用来修饰页面的特效的（简称JS）</p><p>Javascript：客户端的一个脚本语言<br>js是一门弱类型的语言，变量的数据类型由后面赋的值的类型决定</p><p>alert(typeof str);<br>        alert()：警告框，对话框<br>        typeof：返回类型</p><p>Javascript大小写敏感</p><p>&#x2F;&#x2F;当鼠标悬浮时，显示背景颜色<br>funtion showBGColor(){<br>        &#x2F;&#x2F;event：当前发生的事件<br>        &#x2F;&#x2F;event.srcElement：事件源<br>        alert(event.srcElement);<br>        alert(event.srcElement.tagName);<br>        if(event &amp;&amp; event.srcElement &amp;&amp; event.srcElement.tagName &#x3D;&#x3D; “TD”){<br>                var td &#x3D; event.srcElement;<br>                &#x2F;&#x2F;td.parentElement 表示获取td的父元素 -&gt; TR<br>                var tr &#x3D; td.parentElement;<br>                &#x2F;&#x2F;如果想要通过js代码设置某节点的样式，则需要加上.style<br>                tr.style.backgroundColor &#x3D; “navy”;</p><p>​&#x2F;&#x2F;tr.cells表示获取这个tr中的所有单元格<br>​var tds &#x3D; tr。cells；<br>​for(var i &#x3D; 0 ; i &lt; tds.length ; i++){<br>​tds[i].style.color &#x3D; “white”;<br>​}<br>​}<br>}</p><p>&#x2F;&#x2F;当鼠标离开时，恢复原始样式<br>funtion clearBGColor(){<br>        if(event &amp;&amp; event.srcElement &amp;&amp; event.srcElement.tagName &#x3D;&#x3D; “TD”){<br>                var td &#x3D; event.srcElement;<br>                var tr &#x3D; td.parentElement;<br>                tr.style.backgroundColor &#x3D; “transparent”;<br>                var tds &#x3D; tr。cells；<br>                for(var i &#x3D; 0 ; i &lt; tds.length ; i++){<br>                        tds[i].style.color &#x3D; “threeddarkshadow”;<br>                }<br>        }<br>}</p><p>&#x2F;&#x2F;当鼠标悬浮在单价单元格时，显示手势<br>function showHand(){<br>        if(event &amp;&amp; event.srcElement &amp;&amp; event.srcElement.tagName &#x3D;&#x3D; “TD”){<br>                var td &#x3D; event.srcElement;<br>                &#x2F;&#x2F;cursor：光标<br>                td.style.cursor &#x3D; “hand”;<br>        }<br>}</p><p>&#x2F;&#x2F;当鼠标点击单价单元格时进行价格编辑<br>function editPrice(){<br>        if(event &amp;&amp; event.srcElement &amp;&amp; event.srcElement.tagName &#x3D;&#x3D; “TD”){<br>                var priceTD &#x3D; event.srcElement;<br>                &#x2F;&#x2F;目的是判断当前priceTD有子节点，而且第一个子节点是文本节点，TextNode对应的是3，ElementNode对应的是1<br>                if(priceTD.firstChild &amp;&amp; priceTD.firstChild.noteType &#x3D;&#x3D; 3){<br>                        &#x2F;&#x2F;innerText 表示设置或者获取当前节点的内部文本<br>                        var oldPrice &#x3D; priceTD.innerText;<br>                        &#x2F;&#x2F;innerHTML 表示设置当前节点的内部HTML，size设置文本框大小<br>                        priceTD.innerHML &#x3D; “<input type = 'text' size = '4'/>“;<br>                        var input  &#x3D; priceTD.firstChils;<br>                        if(input.tagName &#x3D;&#x3D; “INPUT”){<br>                                input.value &#x3D; oldPrice;<br>                                &#x2F;&#x2F;选中输入框内部的文本<br>                                input.select();<br>                                &#x2F;&#x2F;4.绑定输入框失去焦点事件，失去焦点，更新单价<br>                                input.onblur &#x3D; updatePrice;</p><p>​&#x2F;&#x2F;在输入框上绑定键盘摁下的事件，此处我需要保证用户输入的是数字</p><p>​}<br>​}<br>​}<br>}</p><p>&#x2F;&#x2F;检验键盘摁下的值的方法<br>function ckInput(){<br>        var kc &#x3D; event.keyCode;<br>        &#x2F;&#x2F;0<del>9的ASCII码：48</del>57<br>        &#x2F;&#x2F;backspace的ASCII码：8<br>        &#x2F;&#x2F;enter的ASCII码：13<br>        console.log(kc);    &#x2F;&#x2F;从控制台看到对应的ASCII码</p><pre><code>    if(!((kc&gt;=48 &amp;&amp; kc&lt;=57) || kc==8 || kc==13))&#123;            event.returnValue = false;    &#125;</code></pre><p>​if(kc&#x3D;&#x3D;13){<br>​event.srcElement.blur();<br>​}<br>}</p><p>&#x2F;&#x2F;更新单价的方法<br>funtion updatePrice(){<br>        if(event &amp;&amp; event.srcElement &amp;&amp; event.srcElement.tagName &#x3D;&#x3D; “INPUT”){<br>                var input &#x3D; event.srcElement;<br>                var newPrice &#x3D; input.value;<br>                &#x2F;&#x2F;input节点的父节点是td<br>                var priceTD &#x3D; input.parentElement;<br>                priceTD.innerText &#x3D; newPrice;</p><p>​&#x2F;&#x2F;更新当前行的小计这一个格子的值<br>​updateXJ(priceTD.parentElement);<br>​}<br>}</p><p>&#x2F;&#x2F;更新指定行的小计<br>function updateXJ(tr){<br>        if(tr &amp;&amp; tr.tagName &#x3D;&#x3D; “”TR){<br>                var tds &#x3D; tr.cells;<br>                var priceTD &#x3D; Tds[1].innerText;<br>                var countTD &#x3D; Tds[2].innerText;</p><p>​&#x2F;&#x2F;innerText获取到的值的类型是字符串类型，因此需要类型转换，才能进行数学运算parseInt(price) * parseInt(count);<br>​tds[3].innerText &#x3D; Xj;</p><p>​&#x2F;&#x2F;更新总计<br>​updateZJ();<br>​}<br>}</p><p>&#x2F;&#x2F;更新总计<br>function updateZJ(){<br>        var fruitbl &#x3D; document.getElementById(“tbl_fruit”);<br>        var rows &#x3D; fruitTbl.rows;<br>        var sum &#x3D; 0;<br>        for(var i &#x3D; 1; i &lt; rows.length-1 ; i++){<br>                var tr &#x3D; rows[i];<br>                var xj &#x3D; parseInt(tr.cells[3].innerText);     &#x2F;&#x2F;NaN：not a number，不是一个数字<br>                sum &#x3D; sum + xj;<br>        }<br>        rows[rows.length - 1].cells[1].innerText &#x3D; sum;<br>}</p><p>&#x2F;&#x2F;绑定删除小图标的点击事件<br>var img &#x3D; cells[4].firstChild;<br>if(img &amp;&amp; img.tagName &#x3D;&#x3D; “IMG”){<br>        &#x2F;&#x2F;绑定单击事件<br>        img.onclick &#x3D; delFruit;<br>}</p><p>function delFruit(){<br>        if(event &amp;&amp; event.srcElement &amp;&amp; event.srcElement.tagName &#x3D;&#x3D; “IMG”){<br>                &#x2F;&#x2F;alert表示弹出一个对话框，只有确认按钮<br>                &#x2F;&#x2F;confire表示弹出一个对话框，有确定和取消按钮。当点击确认，返回true，否则返回false<br>                if(windows.confire(“是否确认删除当前库存记录”)){<br>                        var img &#x3D; event.srcElement;<br>                        var tr &#x3D; img.parentElement.parentElement;<br>                        var fruitTbl &#x3D; document.getElementById(“tbl_fruit”);<br>                        fruitTbl &#x3D; document.getElementById(“tbl_fruit”);</p><p>​updateZJ();<br>​}<br>​}<br>}</p><p>onmouseover&#x3D;”showBGColor”：当鼠标悬浮时，显示背景颜色。<br>        onmouseover：当鼠标悬浮的时候。on表示当什么时候，mouse表示鼠标，over表示悬浮。<br>onmouseout&#x3D;”clearBGColor()”：当鼠标离开的时候。</p><p>onclick：当点击的时候</p><h3 id="Web，Tomcat"><a href="#Web，Tomcat" class="headerlink" title="Web，Tomcat"></a>Web，Tomcat</h3><h4 id="一-BS和CS异同点"><a href="#一-BS和CS异同点" class="headerlink" title="一.BS和CS异同点"></a>一.BS和CS异同点</h4><p>CS：客户端服务器架构模式<br>        优点：充分利用客户端机器的资源，减轻服务器的负荷<br>                    （一部分安全要求不高的计算任务存储任务放在客户端执行，不需要把所有的计算和存储都在服务器端执行，从而能够减轻服务器的压力，也能够减轻网络负荷）<br>        缺点：需要安装；升级维护成本较高</p><p>BS：浏览器服务器架构模式<br>        优点：客户端不需要安装；维护成本较低<br>        缺点：所有的计算和存储任务都是放在服务器端的，服务器的负荷较重；在服务端计算完成后把结果再传输给客户端，因此客户端和服务器端会进行非常频繁的数据通信，从而网络负荷较重。</p><h4 id="二-Tomcat"><a href="#二-Tomcat" class="headerlink" title="二.Tomcat"></a>二.Tomcat</h4><p>1.Tomcat的安装和配置<br>        1）.解压：不要有中文不要有空格<br>        2）.目录结构说明：<br>                bin：可执行文件目录<br>                con：配置文件目录<br>                lib：存放lib的目录<br>                logs：日志文件目录<br>                webapps：项目部署的目录<br>                work：工作目录<br>                temp：临时目录<br>        3）.配置环境变量，让tomcat能够运行<br>                因为tomcat也是用java和C写的，因此需要JRE，所以需要配置JAVA_HOME<br>        4）.启动tomcat，然后访问主页</p><p>2.新建Web项目，并在tomcat中部署，最后再访问</p><p>可以在idea里配置tomcat</p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="一-servlet入门：获取参数"><a href="#一-servlet入门：获取参数" class="headerlink" title="一.servlet入门：获取参数"></a>一.servlet入门：获取参数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            库存：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fcount&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            备注：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remark&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fname</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;fname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">priceStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> Integer.parseInt(priceStr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fcountStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;fcount&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">fcount</span> <span class="operator">=</span> Integer.parseInt(fcountStr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">remark</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;remark&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;fname = &quot;</span> + fname);</span><br><span class="line">        System.out.println(<span class="string">&quot;price = &quot;</span> + price);</span><br><span class="line">        System.out.println(<span class="string">&quot;fcount = &quot;</span> + fcount);</span><br><span class="line">        System.out.println(<span class="string">&quot;remark = &quot;</span> + remark);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将两个连接起来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AddServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlets.AddServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AddServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/add<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.用户发请求，action = add</span></span><br><span class="line"><span class="comment">    2.项目中，web.xml中找到url-pattern = /add</span></span><br><span class="line"><span class="comment">    3.找servlet-name = AddServlet</span></span><br><span class="line"><span class="comment">    4.找和servlet-mapping中servlet-name一致的servlet</span></span><br><span class="line"><span class="comment">    5.找到servlet-class对应的com.yc.servlets.AddServlet</span></span><br><span class="line"><span class="comment">    6.用户发送的是post请求（method=&quot;post），因此tomcat会执行AddServlet中的dopost方法</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（xml配置可以通过注解搞定，以后再说）</p><h4 id="二-中文乱码，设置编码"><a href="#二-中文乱码，设置编码" class="headerlink" title="二.中文乱码，设置编码"></a>二.中文乱码，设置编码</h4><p>​1）.post请求方式<br>​post方式下，设置编码，防止中文乱码<br>​request.setCharacterEncoding(“UTF-8”);<br>​需要注意的是，设置编码这一句代码必须在所有的获取参数动作之前</p><p>​2）.get请求方式<br>​tomcat8及之后，get方式目前不需要设置编码<br>​tomcat8之前的话，如果是get请求发送的中文数据，转码稍微有点麻烦<br>​String fname &#x3D; request.getParameter(“fname”);<br>​1.将字符串打散成字节数据<br>​byte[] bytes &#x3D; fname.getBytes(“ISO-8859-1”);<br>​2.将字节数组按照设定的编码重新组成字符串<br>​fname &#x3D; new String(bytes,”UTF-8”);</p><h4 id="三-继承关系以及servlet方法"><a href="#三-继承关系以及servlet方法" class="headerlink" title="三.继承关系以及servlet方法"></a>三.继承关系以及servlet方法</h4><p>servlet的继承关系  ——重点查看的是服务方法  servlet()</p><p>1.继承关系<br>        Servlet 接口<br>                GenericServlet 抽象类<br>                            HttpServlet 抽象子类</p><p>2.相关方法<br>        Servlet 接口：<br>                void init(config)    ——初始化方法<br>                void service(request,response)    ——服务方法<br>                void destory()    ——销毁方法</p><p>​GenericServlet 抽象类：<br>​void service(request,response)  ：仍然是抽象的</p><p>​HttpServlet 抽象子类：<br>​void service(request,response)  ：不是抽象的<br>​1.String method &#x3D; req.getMethod();  获取请求的方式<br>​2.各种if判断，根据请求方式不同，决定去调用不同的do方法<br>​3.在HttpServlet这个抽象类中，do方法都差不多</p><p>3.小结：<br>        1）.继承关系：HttpServlet -&gt; GenericServlet -&gt; Servlet<br>        2）.Servlet中的核心方法：init()，service()，destroy()<br>        3）.服务方法：当有请求过来时，service方法会自动相应（其实是tomcat容器调用的）<br>                在HttpServlet中我们会去分析请求的方式：到底是get，post，head还是delete等等<br>                然后再决定调用哪个do开头的方法<br>                那么在HttpServlet中这些do方法默认都是405的实现风格，要我们子类去实现对应的方法，否则默认会报405错误<br>        4）.因此，我们在新建servlet时，我们才会去考虑请求方法，从而决定重写哪个do方法</p><p>（要重写do方法，否则执行父类的do方法，那就是报405错误）</p><h4 id="四-Servlet的生命周期"><a href="#四-Servlet的生命周期" class="headerlink" title="四.Servlet的生命周期"></a>四.Servlet的生命周期</h4><p>1）.生命周期：从出生到死亡的过程就是生命周期。对应着Servlet中的三个方法：init()，service()，destroy()<br>2）.默认情况下：<br>        第一次接收请求时，这个Servlet会进行实例化（调用构造方法）、初始化（调用init()）、然后服务（调用service()）<br>        从第二次请求开始，每一次都是服务<br>        当容器关闭时，其中的所有的servlet实例会被销毁，调用销毁方法<br>3）.通过案例我们发现：<br>        Servlet实例tomcat只会创建一次，所有的请求都是这个实例去响应。<br>        默认情况下，第一次请求时，tomcat才会去实例化，初始化，然后再服务。<br>                好处：提高系统的启动速度。<br>                缺点：第一次请求时耗时较长：<br>        因此得出结论：<br>                如果需要提高系统的启动速度，当前默认情况就是这样。<br>                如果需要提高响应速度，我们应该设置Servlet的初始化时机。</p><p>4）.Servlet的初始化时机：<br>        默认时第一次接收请求时，实例化，初始化<br>        我们可以在web.xml里通过<load-on-startup>来设置servlet启动的先后顺序，数字越小，启动越靠前，最小值0</p><p>5）.Servlet在容器中是：单例的，线程不安全的<br>        单例：所有的请求都是同一个实例去响应<br>        线程不安全：一个线程需要根据这个实例中的某个成员变量值去做逻辑判断。但在中间某个时机，另一个线程改变了这个成员变量的值，从而导致第一个线程的执行路径发生了变化<br>        我们已经知道了servlet是线程不安全的，给我们的启发是：尽量不要在servlet中定义成员变量。如果不得不定义成员变量，那么不要去：①不要去修改成员变量的值  ②不要去根据成员变量的值做一些逻辑判断</p><h4 id="五-HTTP协议"><a href="#五-HTTP协议" class="headerlink" title="五.HTTP协议"></a>五.HTTP协议</h4><p>1）.Http 称之为 超文本传输协议<br>2）.Http是无状态的<br>3）.Http请求响应包含两个部分：请求和相应<br>        请求：请求包含三部分：1.请求行 ； 2.请求消息头 ； 3.请求主体<br>                1.请求行包含三个信息：1.请求的方式 ； 2.请求的URL ； 3.请求的协议（一般是HTTP1.1）<br>                2.请求消息头中包含了很多客户端需要告诉服务器的信息。比如：我的浏览器型号、版本，我能接收的内容的类型，我给你发的内容的类型，内容的长度…<br>                3.请求体：三种情况（目前先记住，只要不是form表单，即method&#x3D;post的形式，都是get请求）<br>                        get方式，没有请求体，但是有一个queryString<br>                        post方式，有请求体，form data<br>                        json格式，有请求体，request payload<br>        响应：相应也包含三本：1.响应行 ； 2.响应头 ； 3.响应体<br>                1.响应行包含三个信息：1.协议   2.响应状态码（200）   3.响应状态（ok）<br>                2.响应头：包含了服务器的信息；服务器发送给浏览器的信息（内容的媒体类型、编码、内容长度等）<br>                3.响应体：响应的实际内容（比如请求add.html页面时，相应的内容就是<html><head><body>&lt;form…）</p><h4 id="六-会话"><a href="#六-会话" class="headerlink" title="六.会话"></a>六.会话</h4><p>1.Http是无状态的<br>        Http是无状态：服务器无法判断这两次请求是同一个客户端发过来的，还是不同的客户端发送过来的<br>        无状态带来的现实问题：第一次请求是添加商品到购物车，第二次请求是结账；如果这两次请求服务器无法区分是同一个用户的，那么就会导致混乱<br>        通过会话跟踪技术来解决无状态的问题。</p><p><img src="D:\Typora\images\image-20220519172906365.png" alt="image-20220519172906365"></p><p>2.会话跟踪技术<br>        客户端第一次发送请求给服务器，服务器获取session，获取不到，则创建新的，然后响应给客户端<br>        下次客户端给服务器发送请求时，会把sessionID带给服务器，那么服务器就能获取到了，那么服务器就判断这一次请求和上次某次请求是同一个客户端，从而能够区分开客户端<br>        常用的API：<br>                request.getSession()  -&gt;  获取当前的会话，没有则创建一个新的会话<br>                request.getSession(true)  -&gt;  效果和不带参数相同<br>                request.getSession(false)  -&gt;  获取当前的会话，没有则返回null，不会创建新的</p><p>​session.getId()  -&gt;  获取sessionID<br>​session.isNew()  -&gt;  判断当前session是否是新的<br>​session.getMaxInactiveInterval()  -&gt;  session的非激活间隔时长，默认1800秒<br>​session.setMaxInactiveInterval()<br>​session.invalidate()  -&gt;  强制性让会话立即失效<br>​…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session，如果获取不到，则创建一个新的</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session ID：&quot;</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo03Servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Demo03Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo03Servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo03<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（继承Httpservlet时要导入Tomcat依赖）</p><p>3.session保存作用域<br>        session保存作用域是和具体的某一个session对应的<br>        常用的API：<br>                void session.setAttribute(k,v)<br>                Object session.getAttribute(k)<br>                void removeAttribute(k)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;yc1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">unameobj</span> <span class="operator">=</span> req.getSession().getAttribute(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        System.out.println(unameobj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo04Servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Demo04Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo04Servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo04<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo05Servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Demo05Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo05Servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo05<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过一个浏览器set后再get可以访问该key的value，但换个浏览器就不能再被访问，一个会话对应一个sessionID</p><h4 id="七-服务器内部转发以及客户端重定向"><a href="#七-服务器内部转发以及客户端重定向" class="headerlink" title="七.服务器内部转发以及客户端重定向"></a>七.服务器内部转发以及客户端重定向</h4><p>1.服务器内部转发：request.getRequestDispatcher(“…”).forward(request,response);<br>        *一次请求响应的过程，对于客户端而言，内部经过了多少次转发，客户端是不知道<br>        *浏览器地址栏没有变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo06...&quot;</span>);</span><br><span class="line">        <span class="comment">//服务器内部转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;demo07&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo07...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再把xml配置一下。</p><p><img src="D:\Typora\images\image-20220520105537028.png" alt="image-20220520105537028"></p><p>2.客户端重定向：response.sendRedirect(“…”);<br>        *两次请求响应的过程。客户端肯定知道请求URL有变化<br>        *浏览器地址栏有变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo06...&quot;</span>);</span><br><span class="line">        <span class="comment">//服务器内部转发</span></span><br><span class="line"><span class="comment">//        req.getRequestDispatcher(&quot;demo07&quot;).forward(req,resp);</span></span><br><span class="line">        <span class="comment">//客户端重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;demo07&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo07...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再把xml配置一下。</p><p><img src="D:\Typora\images\image-20220520105857684.png" alt="image-20220520105857684"></p><h4 id="八-Thymeleaf——视图模板技术"><a href="#八-Thymeleaf——视图模板技术" class="headerlink" title="八.Thymeleaf——视图模板技术"></a>八.Thymeleaf——视图模板技术</h4><p>1.添加thymeleaf的jar包</p><p>2.新建一个Servlet类ViewBaseServlet</p><p>3.在web.xml文件中添加配置<br>        配置前缀：view-prefix<br>        配置后缀：view-suffix</p><p>4.使得我们的Servlet继承ViewBaseServlet</p><p>5.根据逻辑视图名称得到物理视图名称<br>        &#x2F;&#x2F;此处的视图名称是index<br>        &#x2F;&#x2F;那么thymeleaf会将这个逻辑视图名称对应到物理视图名称上去<br>        &#x2F;&#x2F;逻辑视图名称：index<br>        &#x2F;&#x2F;物理视图名称：view-prefix + 逻辑视图名称 + view-suffix<br>        &#x2F;&#x2F;所以真实的视图名称是：   &#x2F;    index       .html<br>        super.processTemplate(“index” , request , response)</p><p>6.使用thymeleaf的标签<br>        th:if       ;       th:unless       ;       th:each       ;       th:text</p><h4 id="九-保存作用域"><a href="#九-保存作用域" class="headerlink" title="九.保存作用域"></a>九.保存作用域</h4><p>​原始情况下，保存作用域我们可以认为有4个：page（页面级别，现在几乎不用），request（一次请求响应范围），session（一次会话范围），application（整个应用程序范围）</p><p>1.request：一次请求响应范围<br>        客户端重定向的请求改变了，自然访问不到。请求2里想获取请求1的数据，取不到<br>        浏览器内部转发属于一次请求响应，所以可以访问的到。内部转几次没有关系，最终就是一次请求响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.向request保存作用域保存数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//2.客户端重定向</span></span><br><span class="line"><span class="comment">//        resp.sendRedirect(&quot;demo02&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.服务器内部转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;demo02&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取request保存作用域保存的数据，key为uname</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">unameObj</span> <span class="operator">=</span> req.getAttribute(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;unameObj = &quot;</span> + unameObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220520162750843.png" alt="image-20220520162750843"></p><p>2.session：一次会话范围有效<br>        一个客户端进程没断，属于同一sessionID，一次会话，所以只要没过期，是可以访问得到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo03&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.向session保存作用域保存数据</span></span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//2.客户端重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;demo04&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.服务器内部转发</span></span><br><span class="line"><span class="comment">//        req.getRequestDispatcher(&quot;demo04&quot;).forward(req,resp);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取session保存作用域保存的数据，key为uname</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">unameObj</span> <span class="operator">=</span> req.getSession().getAttribute(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;unameObj = &quot;</span> + unameObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220520162504354.png" alt="image-20220520162504354"></p><p>3.application：一次应用程序范围有效<br>        应用程序里相当于是公共的 ，所有的客户端去请求都能请求的到。当Tomcat停止了就请求不到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo05&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.向application保存作用域保存数据</span></span><br><span class="line">        <span class="comment">//ServletContext：Servlet上下文</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> req.getServletContext();</span><br><span class="line">        application.setAttribute(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//2.客户端重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;demo06&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.服务器内部转发</span></span><br><span class="line"><span class="comment">//        req.getRequestDispatcher(&quot;demo04&quot;).forward(req,resp);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo06&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取application保存作用域保存的数据，key为uname</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> req.getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">unameObj</span> <span class="operator">=</span> application.getAttribute(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line"><span class="comment">//合成一句是        Object unameObj = req.getServletContext().getAttribute(&quot;uname&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;unameObj = &quot;</span> + unameObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220520162611767.png" alt="image-20220520162611767"></p><h4 id="十-路径问题"><a href="#十-路径问题" class="headerlink" title="十.路径问题"></a>十.路径问题</h4><p>1.相对路径<br>        ..&#x2F;  代表到上一级目录<br>        比如user下的login.html要引用css下的login.css文件，那么在login.html里引用路径为 ..&#x2F;css&#x2F;login.css<br>        或者user下的member下的shopping.html要引用css下的shopping.css，那么路径应该为 ..&#x2F;..&#x2F;css&#x2F;shopping.css<br>2.绝对路径<br>        协议+IP地址+端口号+context root（项目名，项目根目录）+该文件路径<br>        比如user下的login.html的绝对路径为<a href="http://localhost:8080/pro10/css/login.css">http://localhost:8080/pro10/css/login.css</a></p><p><img src="D:\Typora\images\image-20220520170626030.png" alt="image-20220520170626030"></p><p>P40</p><h3 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="一-Servlet技术"><a href="#一-Servlet技术" class="headerlink" title="一.Servlet技术"></a>一.Servlet技术</h4><h5 id="1-什么是Servlet"><a href="#1-什么是Servlet" class="headerlink" title="1.什么是Servlet"></a>1.什么是Servlet</h5><p>​1）.Servlet是JavaEE规范之一。规范就是接口<br>​2）.Servlet是JavaWeb三大组件之一。三大组件分别是：Servlet程序、Filter过滤器、Listener监听器<br>​3）.Servlet是运行在服务器上的一个java小程序，他可以接收客户端发送过来的请求，并响应数据给客户端。</p><h5 id="2-手动实现Servlet程序"><a href="#2-手动实现Servlet程序" class="headerlink" title="2.手动实现Servlet程序"></a>2.手动实现Servlet程序</h5><p>​1）.编写一个类去实现Servlet接口<br>​2）.实现service方法，处理请求，并响应数据<br>​3）.到web.xml中去配置servlet程序的访问地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span>  <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service方法是专门用来处理请求和响应的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Servlet 被访问了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--servlet标签给Tomcat配置Servlet程序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name标签：给Servlet程序起一个别名（一般是类名）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class标签：是Servlet程序的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping标签给servlet程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name标签：是告诉服务器，我当前配置的地址给哪个Servlet程序使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--url-pattern标签：配置访问地址</span></span><br><span class="line"><span class="comment">            /：斜杠在服务器解析的时候，表示地址为http://ip:port/工程路径（工程路径就是Tomcat配置里的URL）</span></span><br><span class="line"><span class="comment">            /hello：表示地址为：http://ip:port/工程路径/hello</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-url地址到Servlet程序的访问"><a href="#3-url地址到Servlet程序的访问" class="headerlink" title="3.url地址到Servlet程序的访问"></a>3.url地址到Servlet程序的访问</h5><p><img src="D:\Typora\images\image-20220526145723702.png" alt="image-20220526145723702"></p><h5 id="4-Servlet的生命周期"><a href="#4-Servlet的生命周期" class="headerlink" title="4.Servlet的生命周期"></a>4.Servlet的生命周期</h5><p>​1）.执行Servlet构造方法<br>​2）.执行init初始化方法<br>​3）.执行service方法<br>​4）.执行destroy销毁方法</p><p>​第一、二步是在第一次访问的时候创建Servlet程序会调用。<br>​第三步，每次访问都会调用<br>​第四步，在web工程停止的时候调用</p><h5 id="5-通过继承HttpServlet实现Servlet程序"><a href="#5-通过继承HttpServlet实现Servlet程序" class="headerlink" title="5.通过继承HttpServlet实现Servlet程序"></a>5.通过继承HttpServlet实现Servlet程序</h5><p>​1）.一般在实际项目开发中，都是使用继承HttpServlet类的方式去实现Servlet程序<br>​2）.根据业务需要重写doGet或doPost方法<br>​3）.到web.xml中的配置Servlet程序的访问地址</p><h5 id="6-使用IDEA创建Servlet程序"><a href="#6-使用IDEA创建Servlet程序" class="headerlink" title="6.使用IDEA创建Servlet程序"></a>6.使用IDEA创建Servlet程序</h5><p>​配置Servlet信息：<br>​右击包名 -&gt; new -&gt; Servlet（注解先不勾选，先学习xml配置）</p><p><img src="D:\Typora\images\image-20220526164130916.png" alt="image-20220526164130916"></p><p>​创建好的类下自动生成doget、dopost方法。自动生成配置Servlet程序的xml，servlet程序的访问地址需要自己配</p><h5 id="7-Servlet类的继承"><a href="#7-Servlet类的继承" class="headerlink" title="7..Servlet类的继承"></a>7..Servlet类的继承</h5><p><img src="D:\Typora\images\image-20220526172533207.png" alt="image-20220526172533207"></p><h4 id="二-ServletConfig类"><a href="#二-ServletConfig类" class="headerlink" title="二.ServletConfig类"></a>二.ServletConfig类</h4><p>ServletConfig类从类名上来看，就知道是Servlet程序的配置信息</p><p>Servlet程序和ServletConfig对象都是由Tomcat负责创建，我们负责使用<br>Servlet程序默认是第一次访问的时候创建，ServletConfig是每个Servlet程序创建时，就创建一个对应的ServletConfig对象。每一个ServletConfig对应的是他自己的Servlet程序的，不能在一个Servlet里得到别的Servlet信息。</p><h5 id="1-ServletConfig类的三大作用"><a href="#1-ServletConfig类的三大作用" class="headerlink" title="1.ServletConfig类的三大作用"></a>1.ServletConfig类的三大作用</h5><p>​1）.可以获取Servlet程序的别名servlet-name的值<br>​就是xml里配置的servlet-name标签里的名字<br>​2）.获取初始化参数init-param<br>​在xml配置初始化参数，servlet程序里init方法里可以输出对应的参数名的参数值<br>​3）.获取ServletContext对象</p><p>web.xml中的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet标签给Tomcat配置Servlet程序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet-name标签：给Servlet程序起一个别名（一般是类名）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet-class标签：是Servlet程序的全类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--init-param是初始化参数（键值对）可以不止一对--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参数名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参数值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参数名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参数值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--servlet-mapping标签给servlet程序配置访问地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet-name标签：是告诉服务器，我当前配置的地址给哪个Servlet程序使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--url-pattern标签：配置访问地址</span></span><br><span class="line"><span class="comment">        /：斜杠在服务器解析的时候，表示地址为http://ip:port/工程路径（工程路径就是Tomcat配置里的URL）</span></span><br><span class="line"><span class="comment">        /hello：表示地址为：http://ip:port/工程路径/hello</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.init初始化方法&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1）.可以获取Servlet程序的别名servlet-name的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet程序的别名是：&quot;</span> + servletConfig.getServletName());</span><br><span class="line"><span class="comment">//        2）.获取初始化参数init-param</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数username的值是：&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数url的值是：&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line"><span class="comment">//        3）.获取ServletContext对象</span></span><br><span class="line">        System.out.println(servletConfig.getServletContext());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>补充：<br>        1.在do方法里还可以得到某些信息，但只能得到该Servlet程序里的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以使用。但每一个ServletConfig对应的是他自己的Servlet程序的，不能在一个Servlet程序里得到别的Servlet信息。</span></span><br><span class="line"><span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> getServletConfig();</span><br><span class="line">System.out.println(servletConfig);</span><br></pre></td></tr></table></figure><p>​2.重写init方法要加上super.init(config)，因为父类GenericServlet类里init把config保存起来了，不写super，调用的时候就调用子类了，保存操作就会丢失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="built_in">super</span>.init(config);</span><br><span class="line">    System.out.println(<span class="string">&quot;重写了init初始化方法，做了一些工作&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-ServletContext类"><a href="#三-ServletContext类" class="headerlink" title="三.ServletContext类"></a>三.ServletContext类</h4><h5 id="1-什么是ServletContext？"><a href="#1-什么是ServletContext？" class="headerlink" title="1.什么是ServletContext？"></a>1.什么是ServletContext？</h5><p>​1）.ServletContext是一个接口，他表示Servlet上下文对象。<br>​2）.一个web工程，只有一个ServletContext对象实例。<br>​3）.ServletContext对象是一个域对象。<br>​4）.ServletContext是在web工程部署启动的时候创建。在web工程停止的时候销毁。<br>​什么 是域对象？<br>​域对象，是可以像Map一样存取数据的对象，叫域对象<br>​这里的域指的是存取数据的操作范围，整个web项目工程</p><p>​存数据取数据删除数据<br>​Map   put()   get()  remove()<br>​域对象setAttribute()getAttribute()removeAttribute()</p><h5 id="2-ServletContext类的四个作用"><a href="#2-ServletContext类的四个作用" class="headerlink" title="2.ServletContext类的四个作用"></a>2.ServletContext类的四个作用</h5><p>​1）.获取web.xml中配置的上下文参数context-param<br>​2）.获取当前的工程路径，格式：&#x2F;工程路径<br>​3）.获取工程部署后在服务器硬盘上的绝对路径<br>​4）.像Map一样存取数据</p><p>​1）2）3）.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--context-param是上下文参数</span></span><br><span class="line"><span class="comment">它属于整个web工程。也就是说，但凡是在这个web工程里创建的Servlet程序、Filter过滤器、Listener监听器等都可以得到这些参数</span></span><br><span class="line"><span class="comment"> 可以配置多组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        1）.获取web.xml中配置的上下文参数context-param（不能获取init-param参数的值，init-param只能是ServletConfig获取的，context-param只能是ServletContext对象获取的）</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;context-param参数username的值是&quot;</span>+ username);</span><br><span class="line">        System.out.println(<span class="string">&quot;context-param参数password的值是&quot;</span>+ context.getInitParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"><span class="comment">//        2）.获取当前的工程路径，格式：/工程路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取当前工程路径&quot;</span> + context.getContextPath());</span><br><span class="line"><span class="comment">//        3）.获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">        <span class="comment">//斜杠被服务器解析地址为http://ip:port/工程名/       映射到IDEA代码的web目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;工程部署的路径是：&quot;</span> + context.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;工程下css目录的绝对路径是：&quot;</span> + context.getRealPath(<span class="string">&quot;/css&quot;</span>));</span><br><span class="line"><span class="comment">//        4）.像Map一样存取数据</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​4）.像Map一样存取数据（创建一个servlet程序，可以往里面存数据，还可以获取到）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextServlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象，可以简单些</span></span><br><span class="line"><span class="comment">//        ServletContext servletContext = getServletConfig().getServletContext();</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;保存之前：context1获取key1的值是：&quot;</span> + servletContext.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;context1中获取域数据key1的值是：&quot;</span> + servletContext.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​再创建一个servlet2，发现可以取到刚才servlet1里的值。但如果重启项目或重新部署就不行了，除非再访问servlet1，再存一遍数据，那servlet2就可以获取了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//会发现这个servler里也可以获取key1的值。如果重启服务或重新部署就不行了，除非再往里存数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;context1中获取域数据key1的值是：&quot;</span> + servletContext.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-Http协议"><a href="#四-Http协议" class="headerlink" title="四.Http协议"></a>四.Http协议</h4><h5 id="1-什么是HTTP协议？"><a href="#1-什么是HTTP协议？" class="headerlink" title="1.什么是HTTP协议？"></a>1.什么是HTTP协议？</h5><p>什么是协议？<br>        协议是指双方，或多方，相互约定好，大家都需要遵守的规则，叫协议</p><p>所谓HTTP协议，就是指，客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫HTTP协议</p><p>HTTP协议中的数据又叫报文</p><h5 id="2-请求的HTTP协议格式"><a href="#2-请求的HTTP协议格式" class="headerlink" title="2.请求的HTTP协议格式"></a>2.请求的HTTP协议格式</h5><p>客户端给服务器发送数据叫请求<br>服务器给客户端回传数据叫响应</p><p>请求又分为GET请求，和POST请求</p><p>1）.GET请求<br>        (1).请求行<br>                a）.请求的方式GET<br>                b）.请求的资源路径[+?+请求参数]<br>                c）.请求的协议的版本号HTTP&#x2F;1.1</p><p>​(2).请求头<br>​a）.key：value组成不同的键值对，表示不同的含义</p><p><img src="D:\Typora\images\image-20220527153351957.png" alt="image-20220527153351957"></p><p>2）.POST请求<br>        (1).请求行<br>                a）.请求的方式POST<br>                b）.请求的资源路径[+?+请求参数]<br>                c）.请求的协议的版本号HTTP&#x2F;1.1</p><p>​(2).请求头<br>​a）.key：value组成不同的键值对，表示不同的含义</p><p>​空行隔开</p><p>​(3).请求体&#x3D;&#x3D;&gt;&gt;就是发送给服务器的数据</p><p><img src="D:\Typora\images\image-20220527155519060.png" alt="image-20220527155519060"></p><p>3）.常用的请求头说明<br>        Accept：表示客户端可以接收的数据类型<br>        Accept-Languege：表示客户端可以接收的语言类型<br>        User-Agent：表示客户端浏览器的信息<br>        host：表示请求时的服务器ip和端口号</p><p>4）.哪些是GET请求，哪些是POST请求<br>        GET请求有哪些：<br>                (1).form标签method&#x3D;get<br>                (2).a标签<br>                (3).link标签引入css<br>                (4).Script标签引入js文件<br>                (5).img标签引入图片<br>                (6).iframe引入html页面<br>                (7).在浏览器地址栏中输入地址后敲回车</p><p>​POST请求有哪些：<br>​(1).form标签method&#x3D;post</p><h5 id="3-响应的HTTP协议格式"><a href="#3-响应的HTTP协议格式" class="headerlink" title="3.响应的HTTP协议格式"></a>3.响应的HTTP协议格式</h5><p>​1）.响应行<br>​(1).响应的协议和版本号HTTP&#x2F;1.1<br>​(2).响应状态码  200<br>​(3).响应状态描述符   ok<br>​2）.响应头<br>​(1).key：value不同的响应头，有其不同的含义<br>​空行<br>​3）.响应体-&gt;就是回传给客户端的数据</p><p><img src="D:\Typora\images\image-20220527162734914.png" alt="image-20220527162734914"></p><h5 id="4-常用的响应码说明"><a href="#4-常用的响应码说明" class="headerlink" title="4.常用的响应码说明"></a>4.常用的响应码说明</h5><p>​200：表示请求成功<br>​302：表示请求重定向<br>​404：表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）<br>​500：表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><h5 id="5-MIME类型说明"><a href="#5-MIME类型说明" class="headerlink" title="5.MIME类型说明"></a>5.MIME类型说明</h5><p>MIME是HTTP协议中的数据类型<br>MIME的英文全称是”Multipurpose Internet Mail Extensions”，多功能Internet邮件扩充服务。MIME类型的格式是“大类型&#x2F;小类型”，并于某一种文件的拓展名相对应。</p><p>常见的MIME类型：</p><table><thead><tr><th align="left">文本</th><th align="left">MIME类型</th><th></th></tr></thead><tbody><tr><td align="left">超文本标记语言</td><td align="left">.html，.htm</td><td>text&#x2F;html</td></tr><tr><td align="left">普通文本</td><td align="left">.txt</td><td>text&#x2F;plain</td></tr><tr><td align="left">RTF文本</td><td align="left">.rtf</td><td>application&#x2F;rtf</td></tr><tr><td align="left">GIF图形</td><td align="left">.gif</td><td>image&#x2F;gif</td></tr><tr><td align="left">JPEG图形</td><td align="left">.jpeg，.jpg</td><td>image&#x2F;jpeg</td></tr><tr><td align="left">au声音文件</td><td align="left">.au</td><td>audio&#x2F;basic</td></tr><tr><td align="left">MIDI音乐文件</td><td align="left">mid，.midi</td><td>audio&#x2F;midi，audio&#x2F;x-midi</td></tr><tr><td align="left">RealAudio音乐文件</td><td align="left">.ra，.ram</td><td>audio&#x2F;x-pn-realaudio</td></tr><tr><td align="left">MPEG文件</td><td align="left">.mpg，.mpeg</td><td>video&#x2F;mpeg</td></tr><tr><td align="left">AVI文件</td><td align="left">.avi</td><td>video&#x2F;x-msvideo</td></tr><tr><td align="left">GZIP文件</td><td align="left">.gz</td><td>application&#x2F;x-gzip</td></tr><tr><td align="left">TAR文件</td><td align="left">.tar</td><td>application&#x2F;x-tar</td></tr><tr><td align="left"></td><td align="left"></td><td></td></tr></tbody></table><p>谷歌浏览器如何查看HTTP协议：</p><p><img src="D:\Typora\images\image-20220527170147670.png" alt="image-20220527170147670"></p><h4 id="五-HttpServletRequest类"><a href="#五-HttpServletRequest类" class="headerlink" title="五.HttpServletRequest类"></a>五.HttpServletRequest类</h4><h5 id="1-HttpServletRequest类有什么作用"><a href="#1-HttpServletRequest类有什么作用" class="headerlink" title="1.HttpServletRequest类有什么作用"></a>1.HttpServletRequest类有什么作用</h5><p>​每次只要有请求进入Tomcat服务器，Tomcat服务器就会把请求过来的HTTP协议信息解析好封装到Request对象中。然后传递到service方法中（或doGet和doPost）中给我们使用。我们可以通过HttpServletRequest对象，获取到所有请求的信息。</p><h5 id="2-HttpServletRequest类的常用方法"><a href="#2-HttpServletRequest类的常用方法" class="headerlink" title="2.HttpServletRequest类的常用方法"></a>2.HttpServletRequest类的常用方法</h5><p>​1）.getRequestURI()获取请求的资源路径（URI地址）<br>​2）.getRequestURL()   获取请求的统一资源定位符（绝对路径）<br>​3）.getRemoteHost()    获取客户端的ip地址<br>​4）.getHeader()获取请求头<br>​5）.getParameter()   获取请求的参数<br>​6）.getParameterValues()获取请求的参数（多个值的时候使用）<br>​7）.getMethod()获取请求的方式（GET或POST）<br>​8）.setAttribute(key,value)设置域数据<br>​9）.getAttribute(key)  获取域数据<br>​10）.getRequestDispatcher()    获取请求转发对象</p><h5 id="3-如何获取请求参数"><a href="#3-如何获取请求参数" class="headerlink" title="3.如何获取请求参数"></a>3.如何获取请求参数</h5><p>前端页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--action里端口号后边的地址要和Tomcat配置的URL一致，之后再往后写xml里的url-pattern标签里的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/javawebhahaha/parameterServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span>&gt;</span>c++</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>Java</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如何获取请求参数--&gt;</span></span><br></pre></td></tr></table></figure><p>后端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 如何获取请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2022/05/27 17:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------doGet--------&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span> + password);</span><br><span class="line">        System.out.println(<span class="string">&quot;兴趣爱好：&quot;</span> + Arrays.asList(hobby));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求体的字符集为UTF-8，从而解决post请求的中文乱码问题。并且要在获取请求参数之前调用才有效</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------doPost--------&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span> + password);</span><br><span class="line">        System.out.println(<span class="string">&quot;兴趣爱好：&quot;</span> + Arrays.asList(hobby));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置文件将前后端连接：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ParameterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.ParameterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ParameterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/parameterServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-POST请求中文乱码问题"><a href="#4-POST请求中文乱码问题" class="headerlink" title="4.POST请求中文乱码问题"></a>4.POST请求中文乱码问题</h5><p>在doPost方法里首先添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求体的字符集为UTF-8，从而解决post请求的中文乱码问题。并且要在获取请求参数之前调用才有效</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="5-请求的转发"><a href="#5-请求的转发" class="headerlink" title="5.请求的转发"></a>5.请求的转发</h5><p>什么是请求的转发？<br>        请求转发是指，服务器收到请求后，从一个资源跳转到另一个资源的操作叫请求转发</p><p>请求转发的特点：<br>        1.浏览器地址栏没有变化<br>        2.它们是一次请求<br>        3.它们共享Request域中的数据<br>        4.可以转发到WEB-INF目录下<br>        5.不可以访问工程以外的资源</p><p>第一个servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求的参数（办事的材料）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在Servlet1（柜台1）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给材料盖一个章，并传递到Servlet2（柜台2）去查看</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;柜台1的章&quot;</span>);</span><br><span class="line">        <span class="comment">//问路：Servlet2（柜台2）怎么走</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *请求转发必须要以斜杠打头，斜杠表示地址为：http://ip:port/工程名/，映射到IDEA代码的web目录</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//走向Servlet2（柜台）</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求的参数（办事的材料）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在Servlet2（柜台2）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看柜台1是否有盖章</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">key1</span> <span class="operator">=</span> req.getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;柜台1是否有章：&quot;</span>+ key1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理自己的业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet2处理自己的业务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Servlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Servlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220531113145267.png" alt="image-20220531113145267"></p><h5 id="6-base标签的作用"><a href="#6-base标签的作用" class="headerlink" title="6.base标签的作用"></a>6.base标签的作用</h5><p>base标签设置页面相对路径工作时参照的地址<br>        href属性就是参数的地址值，c.html可以省略的，但最后的斜杠不能省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=<span class="string">&quot;http://localhost:8080/javawebhahaha/a/b/c.html&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>a标签进行跳转时：<br>        首先c.html不是路径，不用管，一个..&#x2F;返回上一级目录，两个..&#x2F;就返回两级目录<br>                <a href="http://localhost:8080/javawebhaahaha/a/b/index.html">http://localhost:8080/javawebhaahaha/a/b/c.html../../index.html</a><br>                <a href="http://localhost:8080/javawebhaahaha/index.html">http://localhost:8080/javawebhaahaha/a/../index.html</a><br>                <a href="http://localhost:8080/javawebhaahaha/index.html">http://localhost:8080/javawebhaahaha/index.html</a></p><p>请求转发进行跳转时：<br>        首先forwardC不是路径，不用管，一个..&#x2F;返回上一级目录，两个..&#x2F;就返回两级目录。但去掉一个目录后前边就是端口了，没有可去的了，最终就不管了，所以最终的路径是个错误的路径，报404.<br>                                <a href="http://localhost:8080/javawebhaahaha/index.html">http://localhost:8080/javawebhaahaha/forwardC../../index.html</a><br>                                <a href="http://localhost:8080/index.html">http://localhost:8080/../index.html</a><br>                                <a href="http://localhost:8080/index.html">http://localhost:8080/index.html</a></p><p><img src="D:\Typora\images\image-20220531113306896.png" alt="image-20220531113306896"></p><h5 id="7-web中的相对路径和-绝对路径"><a href="#7-web中的相对路径和-绝对路径" class="headerlink" title="7.web中的相对路径和 绝对路径"></a>7.web中的相对路径和 绝对路径</h5><p>在javaWeb中，路径分为相对路径和绝对路径两种：<br>        相对路径：<br>                .  表示当前目录<br>                .. 表示上一级目录<br>                资源名表示当前目录&#x2F;资源名</p><p>​绝对路径：<br>​<a href="http://ip:port/工程路径">http://ip:port/工程路径</a> &#x2F;资源路径</p><h5 id="8-web中-x2F-斜杠的不同意义"><a href="#8-web中-x2F-斜杠的不同意义" class="headerlink" title="8.web中 &#x2F; 斜杠的不同意义"></a>8.web中 &#x2F; 斜杠的不同意义</h5><p>在web中 &#x2F; 斜杠是一种绝对路径</p><p>​&#x2F;斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port">http://ip:port</a><br>​<code>&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;</code></p><p>​&#x2F;斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a><br>​1.xml配置里的<url-pattern>&#x2F;servlet1</url-pattern><br>​2.servletContext.getRealPath(“&#x2F;“);<br>​3.request.getRequestDispatcher(“&#x2F;“);</p><p>特殊情况：response.sendReadiect(“&#x2F;“);把斜杠发送给浏览器解析。得到<a href="http://ip:port">http://ip:port</a></p><h4 id="六-HttpservletResponse类"><a href="#六-HttpservletResponse类" class="headerlink" title="六.HttpservletResponse类"></a>六.HttpservletResponse类</h4><h5 id="1-HttpServletResponse类的作用"><a href="#1-HttpServletResponse类的作用" class="headerlink" title="1.HttpServletResponse类的作用"></a>1.HttpServletResponse类的作用</h5><p>​HttpServletResponse类和HttpServletRequest类一样。每次请求进来，Tomcat服务器都会创建一个Response对象传递给Servlet程序去使用。HttpServletRequest表示请求过来的信息，HttpServletResponse表示所有响应的信息，我们如果需要设置返回给客户端的信息，都可以通过HttpServletResponse对象来进行设置。</p><h5 id="2-两个输出流的说明"><a href="#2-两个输出流的说明" class="headerlink" title="2.两个输出流的说明"></a>2.两个输出流的说明</h5><p>字节流getOutputStream();常用于下载（传递二进制数据）<br>字符流getWriter(); 常用于回传字符串（常用）</p><p>两个流只能使用一个。<br>使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p><p><img src="D:\Typora\images\image-20220531140909350.png" alt="image-20220531140909350"></p><h5 id="3-如何往客户端回传数据"><a href="#3-如何往客户端回传数据" class="headerlink" title="3.如何往客户端回传数据"></a>3.如何往客户端回传数据</h5><p>要求：往客户端回传字符流数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//要求：往客户端回传字符流数据</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">    writer.println(<span class="string">&quot;response&#x27;s context!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：数据是中文时出现乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看响应的字符集</span></span><br><span class="line">System.out.println(resp.getCharacterEncoding());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置服务器字符集为UTF-8</span></span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>浏览器也会出现编码错误，以下设置浏览器编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过响应头，设置浏览器也是用UTF-8，以下两种方式都可以</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//下面的方法会同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头。不过此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html；charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="4-请求重定向"><a href="#4-请求重定向" class="headerlink" title="4.请求重定向"></a>4.请求重定向</h5><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说，我给你一些地址，你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）</p><p>重定向的特点：<br>        1.浏览器地址栏会发生变化<br>        2.两次请求<br>        3.不共享Request域中的数据<br>        4.不能访问WEB-INF下的资源<br>        5.可以访问工程外的资源</p><p>1）.请求重定向的第一种方案（推荐第二种）</p><p>第一个资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;到此一游 Response1&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//设置想响应状态码302，表示重定向</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//设置响应头，说明新的地址在哪里</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;http://localhost:8080/javawebhahaha/response2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;response2&#x27;s result!!!&quot;</span>);</span><br><span class="line">        System.out.println(req.getAttribute(<span class="string">&quot;key1&quot;</span>));<span class="comment">//得不到请求一的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Response1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Response1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Response1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/response1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Response2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yc.servlet.Response2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Response2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/response2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）.请求重定向的第二种方案（推荐使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;到此一游 Response1&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">   <span class="comment">//请求重定向的第二种方案：</span></span><br><span class="line">   resp.sendRedirect(<span class="string">&quot;http://localhost:8080/javawebhahaha/response2&quot;</span>);</span><br><span class="line">   <span class="comment">//resp.sendRedirect(&quot;http://baidu.com&quot;);//可以访问工程以外的资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\Typora\images\image-20220531155245788.png" alt="image-20220531155245788"></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="一-什么是Cookie？"><a href="#一-什么是Cookie？" class="headerlink" title="一.什么是Cookie？"></a>一.什么是Cookie？</h4><p>1.Cookie翻译过来就是饼干的意思<br>2.Cookie是服务器通知客户端保存键值对的一种技术<br>3.客户端有了Cookie以后，每次请求都发送给服务器<br>4.每个Cookie的大小不能超过4kb</p><h4 id="二-如何创建Cookie"><a href="#二-如何创建Cookie" class="headerlink" title="二.如何创建Cookie"></a>二.如何创建Cookie</h4><p><img src="D:\Typora\images\image-20220531172925829.png" alt="image-20220531172925829"></p><p><img src="D:\Typora\images\image-20220531172753446.png" alt="image-20220531172753446"></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="一-什么是过滤器"><a href="#一-什么是过滤器" class="headerlink" title="一.什么是过滤器"></a>一.什么是过滤器</h4><p>1.Filter是JavaWeb三大组件之一。三大组件分别是：Servlet程序、Listener监听器、Filter过滤器<br>2.Filter过滤器它是JavaEE的规范。也就是接口<br>3.Filter过滤器它的作用是：<strong>拦截请求</strong>，过滤响应</p><p>拦截请求常见的应用场景：<br>        1.权限检查<br>        2.日记操作<br>        3.事务管理<br>        ……等等</p><h4 id="二-Filter初体验"><a href="#二-Filter初体验" class="headerlink" title="二.Filter初体验"></a>二.Filter初体验</h4><p>要求在你的web工程下，有一个admin目录。这个admin目录下的所有资源（html页面、jpg图片、jsp文件、等等）都必须是用户登录之后才允许访问。</p><p>思考：根据之前学过的内容，我们知道，用户登录之后都会把用户登陆的信息保存在Session域中。所以要检查用户是否登录，可以判断Session中是否包含有用户登录的信息即可！！！</p><p><img src="D:\Typora\images\image-20220619101237788.png" alt="image-20220619101237788"></p><p>添加过滤器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*doFilter方法，专门用于拦截请求。可以做权限检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpServletRequest.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//如果等于null，说明还没有登陆</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//让程序继续往下访问用户的目标资源</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml中配置filter过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter标签用于配置一个Filter过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给filter起一个别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置filter的全类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.yc.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--filter-mapping配置Filter过滤器的拦截路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--filter-name表示当前的拦截路径给哪个filter使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--url-pattern配置拦截路径</span></span><br><span class="line"><span class="comment">        / 表示请求地址为：http://ip:port/工程路径/     映射到IDEA的web路径</span></span><br><span class="line"><span class="comment">        /admin/*  表示请求地址为：http://ip:port/工程路径/admin/*</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Filter过滤器的使用步骤：<br>        1.编写一个类去实现Filter接口<br>        2.实现过滤方法doFilter()<br>        3.到web.xml中去配置Filter的拦截路径</p><h4 id="三-Filter的生命周期"><a href="#三-Filter的生命周期" class="headerlink" title="三.Filter的生命周期"></a>三.Filter的生命周期</h4><p>Filter的生命周期包含几个方法<br>        1.构造器方法<br>        2.init初始化方法<br>                第1，2步在web工程启动的时候执行（Filter已经创建）<br>        3.doFilter过滤方法<br>                第3步，每次拦截到请求，就会执行<br>        4.destroy销毁<br>                第4步，停止web工程的时候，就会执行（停止web工程，也会销毁Filter过滤器）</p><h4 id="四-FilterConfig类"><a href="#四-FilterConfig类" class="headerlink" title="四.FilterConfig类"></a>四.FilterConfig类</h4><p>FilterConfig类见名知义，它是Filter过滤器的配置文件类。<br>Tomcat每次创建Filter的时候，也会同时创建一个FilterConfig类，这里包含了Filter配置文件的配置信息。</p><p>FilterConfig类的作用是获取filter过滤器的配置内容<br>        1.获取Filter的名称filter-name的内容<br>        2.获取在Filter中配置的init-param初始化参数<br>        3.获取ServletContext对象</p><h4 id="五-FilterChain过滤器链"><a href="#五-FilterChain过滤器链" class="headerlink" title="五.FilterChain过滤器链"></a>五.FilterChain过滤器链</h4><p>Filter过滤器<br>Chain   链条<br>FilterChain   就是过滤器链（多个过滤器如何一起工作）</p><p>FilterChain.doFilter()方法的作用<br>        1.执行下一个Filter过滤器（如果有Filter）<br>        2.执行目标资源（没有Filter）</p><p>在多个Filter过滤器执行的时候，它们执行的优先顺序是由它们在web.xml中Filter过滤器标签从上到下配置的顺序决定的</p><p>多个Filter过滤器执行的特点：<br>        1.所有filter和目标资源默认都执行在同一个线程中<br>        2.多个Filter共同执行的时候，它们都使用同一个Request对象</p><p>若其中一个过滤器的chain.doFilter()方法没有执行，那么不会再往下执行后面的过滤器和目标资源，而是直接到后置代码，知道走完后置代码。比如下图的Filter2的chain.doFilter()方法被删除，那么不会执行后边的目标资源，而是直接执行Filter2的后置代码2，再执行后置代码1，最后返回客户端。如果Filter2的chain.doFilter()方法和后置代码2都被删除，那么前置代码2走完直接到后置代码1。</p><p><img src="D:\Typora\images\image-20220625180808952.png" alt="image-20220625180808952"></p><h4 id="六-Filter的拦截路径"><a href="#六-Filter的拦截路径" class="headerlink" title="六.Filter的拦截路径"></a>六.Filter的拦截路径</h4><p>Filter过滤器的拦截路径有三种匹配方法<br>        精确匹配、目录匹配、后缀名匹配</p><h5 id="1-精确匹配："><a href="#1-精确匹配：" class="headerlink" title="1.精确匹配："></a>1.精确匹配：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/target.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p><h5 id="2-目录匹配"><a href="#2-目录匹配" class="headerlink" title="2.目录匹配"></a>2.目录匹配</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</p><h5 id="3-后缀名匹配"><a href="#3-后缀名匹配" class="headerlink" title="3.后缀名匹配"></a>3.后缀名匹配</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须以.html结尾才会拦截 </p><p>Filter过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。易于人阅读和编写，同时也易于机器解析和生成。JSON采用完全独立于编程语言的文本格式来存储和表示数据，而且很多语言都提供了对json的支持（包括C,C++,C#,Java,JavaScript,Perl,Python等）。这样就使得JSON成为</p><p>P3051：25</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="一-部署包问题"><a href="#一-部署包问题" class="headerlink" title="一.部署包问题"></a>一.部署包问题</h4><p>File -&gt; Project Structure - &gt;Artifacts -&gt; 点加号+ -&gt; Web Application Exploded -&gt; From Modules -&gt; 选择要添加的模块 -&gt; Apply -&gt; ok</p><p><img src="D:\Typora\images\image-20220526143021906.png" alt="image-20220526143021906"></p><p>打开tomcat配置 -&gt; Deployment -&gt; 点击加号+ -&gt; Artifact（可以把红色的启动部署删掉） -&gt; 可以设置一下工程路径 -&gt; Apply -&gt; ok</p><p><img src="D:\Typora\images\image-20220526143613618.png" alt="image-20220526143613618"></p><p><img src="D:\Typora\images\image-20220526143930790.png" alt="image-20220526143930790"></p><p><img src="D:\Typora\images\image-20220526144416848.png" alt="image-20220526144416848"></p><h4 id="二-Http状态码"><a href="#二-Http状态码" class="headerlink" title="二.Http状态码"></a>二.Http状态码</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">200：正常响应</span><br><span class="line">302：重定向</span><br><span class="line">400：Bad Request 客户端请求的语法错误，服务器无法理解</span><br><span class="line">404：找不到对应的资源</span><br><span class="line">405：当前请求的方法不支持。比如我们表单method=post，那么servlet必须对应dopost。如果用其他的，则会报405错误。或者没有重写doget或dopost方法，调用父类的了。请求方式不满足methods</span><br><span class="line">406：表示无法使用请求的内容特性来响应请求的网页。说白了就是后台的返回结果前台无法解析就报406错误。j请求头（Request Headers）中看到请求信息是json格式，响应头（Response Hraders）中却发现返回信息的格式是“text/html”，前台无法解析，需将结果转换成json格式返回给前台。</span><br><span class="line">500：服务器内部错误</span><br></pre></td></tr></table></figure><h4 id="三-请求方式：get和post"><a href="#三-请求方式：get和post" class="headerlink" title="三.请求方式：get和post"></a>三.请求方式：get和post</h4><p>get：<br>        1）.请求参数会拼接在请求地址后，？（问号）进行拼接，后边是 请求参数名&#x3D;请求参数值 and …：http:ip:port&#x2F;项目名?name&#x3D;value and …<br>        2）.相对不是很安全<br>        3）既然不安全，那get传输速度比较快，它是伴随着请求地址传过去的<br>        4）.传输的数据量有限<br>        5）.不能文件上传</p><p>post：<br>        1）.请求参数会放在请求体里，所以个体方式没有请求体，post的方式有。但请求体里的请求参数和get一样<br>        2）.相对安全<br>        3）.传输速度相对较慢<br>        4）.传输的数据量大，无限制<br>        5）.可以文件上传</p><h4 id="四-小问题"><a href="#四-小问题" class="headerlink" title="四.小问题"></a>四.小问题</h4><p>1.获取服务器路径，先有session，通过session获得ServletContext对象，再通过ServletContext.getRealPath()</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2022/03/01/java/"/>
      <url>/2022/03/01/java/</url>
      
        <content type="html"><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="一-方法定义"><a href="#一-方法定义" class="headerlink" title="一.方法定义"></a>一.方法定义</h4><p>返回值类型：也就是方法最终产生的数据结果是什么类型<br>方法名称：方法的名字，规则和变量一样，小驼峰<br>参数类型：进入方法的数据是什么类型<br>参数名称：进入方法的数据对应的变量名称<br>ps：参数如果有多个，使用逗号分隔<br>方法体：方法需要做的事情，若干代码行<br>return：两个作用，第一是停止当前方法，第二是将后面的返回值类型还给调用处<br>返回值：也就是方法执行后最终产生的数据结果<br>注意：return后面的“返回值”，必须和方法名称前面的“返回值类型”，保持对应</p><h4 id="二-方法调用"><a href="#二-方法调用" class="headerlink" title="二.方法调用"></a>二.方法调用</h4><p>方法的三种调用格式：<br>1.单独调用：方法名(参数);</p><p><img src="D:\Typora\images\image-20220305193523738.png" alt="image-20220305193523738"></p><p>2.打印调用：System.out.println(方法名称(参数));</p><p><img src="D:\Typora\images\image-20220305194210118.png" alt="image-20220305194210118"></p><p>3.赋值调用：数据类型 变量名称&#x3D;方法名称(参数);</p><p><img src="D:\Typora\images\image-20220305195603246.png" alt="image-20220305195603246"></p><h4 id="三-方法的有参和无参"><a href="#三-方法的有参和无参" class="headerlink" title="三.方法的有参和无参"></a>三.方法的有参和无参</h4><p>1.有参数：小括号当中有内容，当一个方法需要一些数据条件，才能完成任务的时候，就有参数。例如两个数字相加，必须知道两个数字是各自多少，才能相加。</p><p><img src="D:\Typora\images\image-20220305220940094.png" alt="image-20220305220940094"></p><p>2.无参数：小括号当中留空。一个方法不需要任何数据条件，自己就能独立完成任务，就是无参数。例如定义一个方法，打印固定10次HelloWorld。</p><p><img src="D:\Typora\images\image-20220305221037590.png"></p><p><img src="D:\Typora\images\image-20220305221056179.png" alt="image-20220305221056179"></p><h4 id="四-方法的有返回值和无返回值"><a href="#四-方法的有返回值和无返回值" class="headerlink" title="四.方法的有返回值和无返回值"></a>四.方法的有返回值和无返回值</h4><p>1.题目要求：定义一个方法，用来【求出】两个数之和。(你帮我算，算完之后把结果告诉我)</p><p><img src="D:\Typora\images\image-20220305221450781.png" alt="image-20220305221450781"></p><p>2.定义一个方法，用来【打印】两个数之和。(你来计算，算完之后你自己负责显示结果，不用告诉我)</p><p><img src="D:\Typora\images\image-20220305221652388.png" alt="image-20220305221652388"></p><p><img src="D:\Typora\images\image-20220305221741242.png" alt="image-20220305221741242"></p><p>注意事项：对于有返回值的方法，可以使用单独调用，打印调用或赋值调用<br>                  对于无返回值的方法，只能使用单独调用，不能使用打印和赋值调用</p><h4 id="五-方法的重载"><a href="#五-方法的重载" class="headerlink" title="五.方法的重载"></a>五.方法的重载</h4><p>对于功能类似的方法来说，因为参数列表不一样，却需要记住那么多不同的方法名称，太麻烦。</p><p>方法的重载(Overload)：多个方法的名称一样，但是参数列表不一样。<br>好处：只需要记住唯一一个方法名称，就可以实现类似的多个功能</p><p><img src="D:\Typora\images\image-20220305222859896.png" alt="image-20220305222859896"></p><p>方法重载与下列因素相关：<br>1.参数个数不同<br>2.参数类型不同<br>3.参数的多类型顺序不同</p><p>方法重载与下列因素无关：<br>1.与参数的名称无关<br>2.与方法的返回值类型无关</p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="一-什么是类"><a href="#一-什么是类" class="headerlink" title="一.什么是类"></a>一.什么是类</h4><p>类：是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特性和行为特征来描述该类事物。</p><p>现实中，描述这一类：<br>属性：就是该事物的状态信息。<br>行为：就是该事物能够做什么。</p><p>举例：小猫<br>属性：名字，体重，年龄，颜色<br>行为：走，跑，叫</p><h4 id="二-什么是对象"><a href="#二-什么是对象" class="headerlink" title="二.什么是对象"></a>二.什么是对象</h4><p>对象：是一类事物的具体体现，对象是类的一个实例，必然具备该类事物的属性和行为。</p><h4 id="三-类与对象的关系："><a href="#三-类与对象的关系：" class="headerlink" title="三.类与对象的关系："></a>三.类与对象的关系：</h4><p>类是对一类事物的描述，是抽象的。<br>对象是一类事物的实例，是具体的。<br>类是对象的模板，对象是类的实体。</p><h4 id="四-对象的创建及使用"><a href="#四-对象的创建及使用" class="headerlink" title="四.对象的创建及使用"></a>四.对象的创建及使用</h4><p>通常情况下，一个类不能直接使用，需要根据类创建一个对象，才能使用。</p><p>1.导包：也就是指出需要使用的类，在什么位置。<br>import  包名称.类名称<br>对于和当前类属于同一个包的情况，可以省略导包语句不写。</p><p>2.创建，格式：<br>类名称 对象名&#x3D;new 类名称()；<br>Student stu &#x3D; new Student;</p><p>3.使用，分为两种情况：<br>使用成员变量：对象名.成员变量名<br>使用成员方法：对象名.成员方法名(参数)<br>（也就是，想用谁，就用对象点谁）</p><p>注意事项：<br>如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样。</p><h4 id="五-面向对象三大特征之封装性"><a href="#五-面向对象三大特征之封装性" class="headerlink" title="五.面向对象三大特征之封装性"></a>五.面向对象三大特征之封装性</h4><p>面向对象三大特征：封装，继承，多态</p><p>封装性在java中的体现：<br>1.方法就是一种封装<br>2.关键字private也是一种封装</p><p>封装就是将一些细节信息隐藏起来，对于外界不可见</p><h4 id="六-this的作用"><a href="#六-this的作用" class="headerlink" title="六.this的作用"></a>六.this的作用</h4><p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。<br>如果需要访问本类中的成员变量，需要使用格式：this.成员变量</p><p>通过谁调用的方法，谁就是this。</p><p><img src="D:\Typora\images\image-20220307101323520.png" alt="image-20220307101323520"></p><p><img src="D:\Typora\images\image-20220307101407446.png" alt="image-20220307101407446"></p><h4 id="七-构造方法"><a href="#七-构造方法" class="headerlink" title="七.构造方法"></a>七.构造方法</h4><p>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。<br>格式：<br>public 类名称(参数类型 参数名称){<br>          方法体<br>}</p><p>注意事项：<br>1.构造方法的名称必须和所在的类名称完全一样，就连大小写也要一样<br>2.构造方法不要写返回值类型，连void都不写<br>3.构造方法不能return一个具体的返回值<br>4.如果没有编写任何构造方法，那么编译器将会默认赠送一个构造方法，没有参数、方法体，什么事情都不做。<br>public Student(){}<br>5.一旦编写了至少一个构造方法，那么编译器将不再赠送。<br>6.构造方法也是可以进行重载的。</p><h4 id="八-定义一个标准的类"><a href="#八-定义一个标准的类" class="headerlink" title="八.定义一个标准的类"></a>八.定义一个标准的类</h4><p>一个标准的类通常拥有下面四个组成部分：<br>1.所有的成员变量都要使用private关键字修饰<br>2.为每一个成员变量编写一对Getter&#x2F;Setter方法<br>3.编写一个无参构造方法<br>3.编写一个全参构造方法</p><p>这样标准的类也叫做Java Bean<br>快捷键：alt+insert</p><h4 id="九-Scanner类"><a href="#九-Scanner类" class="headerlink" title="九.Scanner类"></a>九.Scanner类</h4><p>Scanner类的功能：可以实现键盘输入数据，到程序当中。</p><p>引用类型的一般使用步骤：<br>1.导包<br>import 包路径.类名称；<br>如果需要使用的目标类，和当前类位于同一个包下，则可以省略导包语句不写。<br>只有java.lang包下的内容不需要导包，其他的包都需要import语句。<br>2.创建<br>类名称 对象名 &#x3D; new 类名称（）；<br>3.使用<br>对象名.成员方法名（）</p><p>获取键盘输入的一个int数字：int num &#x3D; sc.nextInt();<br>获取键盘输入的一个字符串：String str &#x3D; sc.next();</p><p><img src="D:\Typora\images\image-20220307104312945.png" alt="image-20220307104312945"></p><p><img src="D:\Typora\images\image-20220307104630793.png" alt="image-20220307104630793"></p><h4 id="十-Random类"><a href="#十-Random类" class="headerlink" title="十.Random类"></a>十.Random类</h4><p>Random类用来生成随机数字。使用起来也是三个步骤：<br>1.导包<br>import java.util.Random<br>2.创建<br>Random r &#x3D; new Random();（小括号中留空即可）<br>3.使用<br>获取一个随机的int数字（范围是int所有范围，有正负两种）：int num &#x3D; r.nextInt()<br>获取一个随机的int数字（参数代表了范围，左闭右开区间）：int num &#x3D; r.nextInt(3)</p><p>无参：</p><p><img src="D:\Typora\images\image-20220307110447440.png" alt="image-20220307110447440"></p><p>有参：（注意：参数是多少，范围就是0~多少-1）</p><p><img src="D:\Typora\images\image-20220307110425108.png" alt="image-20220307110425108"></p><h4 id="十一-数组"><a href="#十一-数组" class="headerlink" title="十一.数组"></a>十一.数组</h4><h5 id="1-数组的概念及初始化"><a href="#1-数组的概念及初始化" class="headerlink" title="1.数组的概念及初始化"></a>1.数组的概念及初始化</h5><p>1.数组的概念：<br>数组是一种容器，可以同时存放多个数据值</p><p>2.数组的特点：<br>(1)).数组是一种引用数据类型<br>(2).数组当中的多个数据，类型必须统一<br>(3).数组的长度在程序运行期间不可改变</p><p>3.数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值</p><p>两种常见的初始化方式：<br>(1).动态初始化（指定长度）：在创建数组的时候，直接指定数组当中的数据元素个数<br>(2).静态初始化（指定内容）：在创建数组的时候，不直接指定数据个数多少，而是直接将具体的数据内容进行指定</p><p>(1).动态初始化数组的格式：<br>数据类型[ ] 数组名称 &#x3D; new 数据类型[数组长度];</p><p>解析含义：<br>左侧数据类型数据：也就是数组当中保存的数据，全都是统一的什么类型<br>左侧的中括号：代表我是一个数组<br>左侧数组名称：给数组取一个名字<br>右侧的new：代表创建数组的动作<br>右侧数据类型：必须和左边的数据类型保持一致<br>右侧中括号的长度：也就是数组当中，到底可以保存多少个数据，是一个int数字</p><p>(2).静态初始化基本格式：</p><p>标准格式：<br>数据类型[ ] 数组名称 &#x3D; new 数据类型[ ] {元素1,元素2,…};</p><p>省略格式：使用静态初始化数组的时候，格式可以省略一下：<br>数据类型[ ] 数组名称 &#x3D; {元素1,元素2,…};</p><p>注意事项：<br>(1).虽然静态初始化没有直接告诉长度，但是根据大括号里面的元素具体内容，也可以自动推算出来长度。<br>(2).静态初始化标准格式可以拆分成为两个步骤。<br>(3).动态初始化也可以拆分成为两个步骤。<br>(4).静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。</p><p>使用建议：如果不确定数组当中的内容，用动态初始化；否则，已经确定了内容，用静态初始化。</p><h5 id="2-访问数组元素进行获取"><a href="#2-访问数组元素进行获取" class="headerlink" title="2.访问数组元素进行获取"></a>2.访问数组元素进行获取</h5><p>直接打印数组名称：得到的是数组对应的：内存地址哈希值。</p><p>访问数组元素的格式：数组名称[索引值]<br>索引值：就是一个int数字，代表数组当中元素的编号。<br>注意：索引值从0开始，一直到”数组的长度-1“为止。</p><h5 id="3-访问数组元素进行赋值"><a href="#3-访问数组元素进行赋值" class="headerlink" title="3.访问数组元素进行赋值"></a>3.访问数组元素进行赋值</h5><p>使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值。规则如下：<br>如果是整数类型，那么默认值为0；<br>如果是浮点类型，那么默认值为0.0；<br>如果是字符类型，那么默认值为‘\u0000’；<br>如果是布尔类型，那么默认值为false；<br>如果是引用类型，那么默认值为null；</p><p>注意事项：静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。</p><h5 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h5><p>1.数组索引越界异常</p><p>数组的索引编号从0开始，一直到”数组的长度-1“为止。</p><p>如果访问数组元素的时候，索引编号并不存在，那么将会发生数组引越界异常（ArrayIndexOutOfBoundException）</p><p>原因：索引编号写错了<br>解决：修改成为存在的正确索引编号。</p><p>2.空指针异常</p><p>所有的引用类型变量，都可以赋值为一个null值；但是代表其中什么都没有。</p><p>数组必须进行new初始化才能使用其中的元素。<br>如果只是赋值了一个null，没有进行new创建，那么将会发生：空指针异常（NullPointerException）</p><p>原因：忘了new<br>解决：补上new</p><h5 id="5-获取数组的长度"><a href="#5-获取数组的长度" class="headerlink" title="5.获取数组的长度"></a>5.获取数组的长度</h5><p>获取数组的长度，格式：<br>数组名称.length</p><p>这将会得到一个int数字，代表数组的长度。</p><p>数组一旦创建，程序运行期间，长度不可改变。</p><h5 id="6-数组的遍历输出"><a href="#6-数组的遍历输出" class="headerlink" title="6.数组的遍历输出"></a>6.数组的遍历输出</h5><p>遍历数组：说的就是对数组当中的每一个元素进行逐一，挨个处理。默认的处理方式就是打印输出。<br>for循环</p><p><img src="D:\Typora\images\image-20220308105934026.png" alt="image-20220308105934026"></p><h5 id="7-数组作为方法返回值"><a href="#7-数组作为方法返回值" class="headerlink" title="7.数组作为方法返回值"></a>7.数组作为方法返回值</h5><p>一个方法可以有0、1、多个参数；但是只能有0或者1个返回值，不能有多个返回值。<br>如果希望一个方法当中产生了多个结果数据进行返回，怎么办？<br>解决办法 ：使用一个数组作为返回值类型即可。</p><p>任何数据类型都能作为方法的参数类型，或者返回值类型。</p><p>数组作为方法的参数，传递进去的其实是数组的地址值。<br>数组作为方法的返回值，返回的其实也是数组的地址值。</p><p><img src="D:\Typora\images\image-20220308112201472.png" alt="image-20220308112201472"></p><h4 id="十二-ArrayList集合"><a href="#十二-ArrayList集合" class="headerlink" title="十二.ArrayList集合"></a>十二.ArrayList集合</h4><p>数组的长度不可以发生改变。<br>但是ArrayList集合的长度是可以随意变化的。</p><p>对于 ArrayList来说，有一个尖括号<E>代表泛型。<br>泛型：也就是装在集合当中的所有元素，全都是统一的什么类型。<br>注意：泛型只能是引用类型，不能是基本类型。</p><p>注意事项：<br>对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。<br>如果内容是空，得到的是空洞的中括号：[ ]</p><p><img src="D:\Typora\images\image-20220307190609169.png" alt="image-20220307190609169"></p><p>ArrayList当中的常用方法有：<br>public boolean add(E e)：向集合当中添加元素，参数的类型和泛型一致。返回值代表添加是否成功。<br>                                          备注：对于ArrayList集合来说，add添加动作一定是成功的，所以返回值可用可不用。<br>                                          但是对于其他集合来说，add添加动作不一定成功<br>public E get(int index)：从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素<br>public E remove(int index)：从集合中删除元素，参数是索引编号，返回值就是被删除掉的元素<br>public int size()：获取集合的尺寸长度，返回值就是集合中包含的元素个数</p><p><img src="D:\Typora\images\image-20220307220849078.png" alt="image-20220307220849078"></p><p><img src="D:\Typora\images\image-20220307192229624.png" alt="image-20220307192229624"></p><p><img src="D:\Typora\images\image-20220307220744187.png" alt="image-20220307220744187"></p><p><img src="D:\Typora\images\image-20220307220817988.png" alt="image-20220307220817988"></p><p>遍历集合：</p><p><img src="D:\Typora\images\image-20220307221052079.png" alt="image-20220307221052079"></p><p>如果希望向集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。</p><p>基本类型                 包装类（引用类型，包装类都位于java.lang包下）<br>byte                         Byte<br>short                        Short<br>int                            Integer<br>long                         Long<br>float                         Float<br>double                     Double<br>char                         Character<br>boolean                    Boolean</p><p>从JDK1.5+开始，支持自动装箱，自动拆箱<br>自动装箱：基本类型–&gt;包装类型<br>自动拆箱：包装类型–&gt;基本类型</p><h4 id="十三-静态static"><a href="#十三-静态static" class="headerlink" title="十三.静态static"></a>十三.静态static</h4><p>一旦使用了static关键字，那么这样的内容不再属于对象自己，而是属于类的，所以凡是本类的对象，都共享同一份。</p><p>一旦使用了static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。</p><p>如果没有static关键字，那么必须首先创建对象，然后通过对象下能使用它。<br>如果有了static关键字，那么不需要创建对象，直接就能通过类名称来使用它。</p><p>无论是成员变量，还是成员方法，如果有了static，都推荐使用类名称进行调用。<br>静态变量：类名称.静态变量<br>静态方法：类名称.静态方法</p><p>注意事项：<br>1.静态只能直接访问静态，不能直接访问非静态。<br>原因：因为在内存当中是先有的静态内容，后有的非静态内容。<br>2.静态方法中不能使用this。<br>原因：this代表当前对象，通过谁调用的方法，谁就是当前对象。</p><p><img src="D:\Typora\images\image-20220312112206575.png" alt="image-20220312112206575"></p><p>静态static的内存图：</p><p><img src="D:\Typora\images\image-20220312112745364.png" alt="image-20220312112745364"></p><p>静态代码块：</p><p>静态代码块的格式是：<br>public class 类名称{<br>static{<br>             &#x2F;&#x2F;静态代码块<br>    }<br>}</p><p>特点：当第一次用到本类时，静态代码块执行唯一的一次。<br>静态内容总是优先于非静态，所以静态代码块比构造方法先执行。</p><p>静态代码块的典型用途：<br>用来一次性的对静态成员变量进行赋值。</p><h4 id="十四-Math类"><a href="#十四-Math类" class="headerlink" title="十四.Math类"></a>十四.Math类</h4><p>java.util.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作。</p><p>public static double abs(double num)：获取绝对值。</p><p><img src="D:\Typora\images\image-20220312114635162.png" alt="image-20220312114635162"></p><p>public static double ceil(double num)：向上取整。</p><p><img src="D:\Typora\images\image-20220312114715065.png" alt="image-20220312114715065"></p><p>public static double floor(double num)：向下取整。</p><p><img src="D:\Typora\images\image-20220312114743668.png" alt="image-20220312114743668"></p><p>public static long round(double num)：四舍五入。</p><p><img src="D:\Typora\images\image-20220312114836459.png" alt="image-20220312114836459"></p><p>Math.PI代表近似的圆周率常量。</p><h4 id="十五-匿名对象类"><a href="#十五-匿名对象类" class="headerlink" title="十五.匿名对象类"></a>十五.匿名对象类</h4><p>创建对象的标准格式：<br>类名称 对象名 &#x3D; new 类名称();</p><p>匿名对象就是只有右边的对象，没有左边的名字和赋值运算符<br>new 类名称();</p><p>注意事项：匿名对象只能使用唯一的一次，下次再用不得不再创建一个对象。<br>使用建议：如果确定有一个对象只需要使用唯一一次，就可以用匿名对象。</p><p><img src="D:\Typora\images\image-20220403185708139.png" alt="image-20220403185708139"></p><p>匿名对象作为方法的参数和返回值：</p><p><img src="D:\Typora\images\image-20220403190532105.png" alt="image-20220403190532105"></p><p><img src="D:\Typora\images\image-20220403191320627.png" alt="image-20220403191320627"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="一-继承的概述"><a href="#一-继承的概述" class="headerlink" title="一.继承的概述"></a>一.继承的概述</h4><p>继承是多态的前提，如果没有继承，就没有多态。</p><p>继承主要解决的问题就是：共性抽取。</p><p>继承关系当中的特点：<br>1.子类可以拥有父类的“内容”<br>2.子类还可以拥有自己专属的内容</p><h4 id="二-继承的格式"><a href="#二-继承的格式" class="headerlink" title="二.继承的格式"></a>二.继承的格式</h4><p>在继承的关系中，“子类就是一个父类”。也就是说，子类可以被当作父类看待。<br>例如父类是员工，子类是讲师，那么“讲师就是一个员工”。关系：is-a</p><p>定义父类的格式：（就是一个普通的类定义）<br>public class 父类名称{<br>          &#x2F;&#x2F;…<br>}</p><p>定义子类的格式：<br>public class 子类名称 extends 父类名称{<br>         &#x2F;&#x2F;…<br>}</p><h4 id="三-继承中成员变量的访问特点"><a href="#三-继承中成员变量的访问特点" class="headerlink" title="三.继承中成员变量的访问特点"></a>三.继承中成员变量的访问特点</h4><p>在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：<br>1.直接通过子类对象访问成员变量<br>   等号左边是谁，就优先用谁，没有则向上找。<br>2.间接通过成员方法访问成员变量<br>   该方法属于谁，就优先用谁，没有则向上找</p><p><img src="D:\Typora\images\image-20220318160653625.png" alt="image-20220318160653625"></p><h4 id="四-子类方法中重名的三种变量"><a href="#四-子类方法中重名的三种变量" class="headerlink" title="四.子类方法中重名的三种变量"></a>四.子类方法中重名的三种变量</h4><p>局部变量：                   直接写成员变量名<br>本类的成员变量：        this.成员变量名<br>父类的成员变量：        super.成员变量名</p><p><img src="D:\Typora\images\image-20220318161235976.png" alt="image-20220318161235976"></p><h4 id="五-继承中成员方法的访问特点"><a href="#五-继承中成员方法的访问特点" class="headerlink" title="五.继承中成员方法的访问特点"></a>五.继承中成员方法的访问特点</h4><p>在父子类的继承关系当中，创建子类对象，访问成员方法的规则：<br>        创建的对象是谁，就优先用谁，如果没有则向上找。（new的谁，运行的就是谁。也就是看右侧是谁）</p><p>注意事项：<br>无论是成员方法还是成员变量，如果没有都是向上找父类，绝不会向下找子类的。</p><h4 id="六-继承中方法的覆盖重写"><a href="#六-继承中方法的覆盖重写" class="headerlink" title="六.继承中方法的覆盖重写"></a>六.继承中方法的覆盖重写</h4><p>重写（Override）</p><p>概念：在继承关系中，方法的名称一样，参数列表也一样</p><p>重写（Override）：方法的名称一样，参数列表【也一样】。也叫覆盖、覆写<br>重载（Overload）：方法的名称一样，参数列表【不一样】。</p><p>方法的覆盖重写特点：创建的是子类对象，则优先用这类方法。</p><p>方法覆盖重写的注意事项：<br>1.必须保证父子类之间方法的名称相同，参数列表也相同。<br>@Override：写在方法前面，用来检测是不是有效的正确覆盖重写。<br>这个注解就算不写，只要满足 要求，也是正确的方法覆盖重写。</p><p>2.子类方法的返回值必须【小于等于】父类方法的返回值范围。<br>java.lang.Object类是所有类的公共最高父类（祖宗类），java.lang.String就是Object的子类。</p><p>3.子类方法的权限必须【大于等于】父类方法的权限修饰符。<br>小扩展提示：public&gt;protected&gt;(default)&gt;private<br>备注：（default）不是关键字default，而是什么都不写，留空。</p><h4 id="七-继承中构造方法的访问特点"><a href="#七-继承中构造方法的访问特点" class="headerlink" title="七.继承中构造方法的访问特点"></a>七.继承中构造方法的访问特点</h4><p>继承关系中，父子类构造方法的访问特点：<br>1.子类构造方法当中有一个默认隐含的“super()”调用，所以一定是先调用的父类构造，后执行的子类构造</p><p><img src="D:\Typora\images\image-20220318165141272.png" alt="image-20220318165141272"></p><p>2.子类构造可以通过super关键字来调用父类重载构造</p><p><img src="D:\Typora\images\image-20220318165517421.png" alt="image-20220318165517421"></p><p><img src="D:\Typora\images\image-20220318165550995.png" alt="image-20220318165550995"></p><p>3.super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</p><p><img src="D:\Typora\images\image-20220318165948000.png" alt="image-20220318165948000"></p><p><img src="D:\Typora\images\image-20220318172517957.png" alt="image-20220318172517957"></p><p>总结：“<br>子类必须调用父类构造方法，不写则赠送super()；写了则用写的指定的super调用，super只能有一个，还必须是第一个。</p><h4 id="八-super关键字的三种用法"><a href="#八-super关键字的三种用法" class="headerlink" title="八.super关键字的三种用法"></a>八.super关键字的三种用法</h4><p>super关键字的用法有三种：<br>1.在子类的成员方法中，访问父类的成员变量。<br>2.在子类的成员方法中，访问父类的成员方法。<br>3.在子类的构造方法中，访问父类的构造方法。</p><h4 id="九-this关键字的三种用法"><a href="#九-this关键字的三种用法" class="headerlink" title="九.this关键字的三种用法"></a>九.this关键字的三种用法</h4><p>super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种：</p><p>1.在本类的成员方法中，访问本类的成员变量。<br>2.在本类的成员方法中，访问本类的另一个成员方法。（强调作用）<br>3.在本类的构造方法中，访问本类的另一个构造方法。<br>在第三种用法当中要注意：<br>1).this(…)调用也必须是构造方法的第一个语句，唯一一个。<br>2).super和this两种构造调用，不能同时使用。</p><p><img src="D:\Typora\images\image-20220318201239800.png" alt="image-20220318201239800"></p><h4 id="十-Java继承的三个特点"><a href="#十-Java继承的三个特点" class="headerlink" title="十.Java继承的三个特点"></a>十.Java继承的三个特点</h4><p>Java语言是单继承的，一个类的直接父类只能有唯一一个。</p><p>Java语言可以多级继承。如：我有一个父亲，我父亲还有一个父亲，也就是爷爷。</p><p>一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类。如：可以有很多兄弟姐妹</p><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>如果父类当中的方法不确定如何进行{}方法体实现，那么这就应该十一个抽象方法。</p><h4 id="一-抽象方法和抽象类的格式"><a href="#一-抽象方法和抽象类的格式" class="headerlink" title="一.抽象方法和抽象类的格式"></a>一.抽象方法和抽象类的格式</h4><p>抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。<br>抽象类：抽象方法所在的类，必须是抽象类才行，在class之前写上abstract即可。</p><p><img src="D:\Typora\images\image-20220318202545405.png" alt="image-20220318202545405"></p><h4 id="二-抽象方法和抽象类的使用"><a href="#二-抽象方法和抽象类的使用" class="headerlink" title="二.抽象方法和抽象类的使用"></a>二.抽象方法和抽象类的使用</h4><p>如何使用抽象类和抽象方法；<br>1.不能直接创建new抽象类对象。<br>2.必须用一个子类来继承抽象父类。<br>3.子类必须覆盖重写抽象父类当中所有的抽象方法。<br>   覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。<br>4.创建子类对象进行使用。</p><h4 id="三-抽象方法和抽象类的注意事项"><a href="#三-抽象方法和抽象类的注意事项" class="headerlink" title="三.抽象方法和抽象类的注意事项"></a>三.抽象方法和抽象类的注意事项</h4><p>1.抽象类不能创建对象，如果创建，编译将无法通过而报错。只能创建其非抽象子类的对象</p><p>2.抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><p>3.抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。<br>   这样，没有抽象方法的抽象类，也不能直接创建对象，在一些特殊场景下有用途。</p><p>4.抽象类的子类，必须重写抽象父类中所有的抽象方法，否则编译无法通过而报错，除非该子类也是抽象类。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口就是一种公共的规范标准。</p><h4 id="一-接口的定义基本格式"><a href="#一-接口的定义基本格式" class="headerlink" title="一.接口的定义基本格式"></a>一.接口的定义基本格式</h4><p>接口就是多个类的公共规范。<br>接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。</p><p>如何定义一个接口的格式：<br>public interface 接口名称{<br>          &#x2F;&#x2F;&#x2F;接口内容<br>}</p><p>备注：换成了关键字 interface之后，编译生成的字节码文件仍然是：java –&gt;.class</p><p>如果是Java7，那么接口中可包含的内容有：<br>1.常量<br>2.抽象方法</p><p>如果是Java8，还可以额外包含有：<br>3.默认方法<br>4.静态方法</p><p>如果是Java9，还可以额外包含有：<br>5.私有方法</p><h4 id="二-接口的抽象方法定义"><a href="#二-接口的抽象方法定义" class="headerlink" title="二.接口的抽象方法定义"></a>二.接口的抽象方法定义</h4><p>在任何版本的Java中，接口都能定义抽象方法。</p><p>格式：<br>public abstract 返回值类型 方法名称(参数列表);</p><p>注意事项：<br>1.接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract<br>2.这两个关键字修饰符，可以选择性的省略。<br>3.方法的三要素，可以随意定义。</p><h4 id="三-接口的抽象方法使用"><a href="#三-接口的抽象方法使用" class="headerlink" title="三.接口的抽象方法使用"></a>三.接口的抽象方法使用</h4><p>接口使用步骤：<br>1.接口不能直接使用，必须有一个“实现类”来“实现”该接口。</p><p>格式：<br>public class 实现类名称 implements 接口名称 {<br>           &#x2F;&#x2F;…<br>}<br>2.接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。<br>实现：去掉abstract关键字，加上方法体大括号。<br>3.创建实现类的对象，进行使用。</p><p>注意事项：<br>如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。</p><h4 id="四-接口的默认方法定义与使用"><a href="#四-接口的默认方法定义与使用" class="headerlink" title="四.接口的默认方法定义与使用"></a>四.接口的默认方法定义与使用</h4><h5 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h5><p>从Java8开始，接口里允许定义默认方法。</p><p>格式：<br>public default 返回值类型 方法名称(参数列表){<br>        方法体<br>}</p><p>备注：接口当中的默认方法，可以解决接口升级的问题。</p><h5 id="2-使用："><a href="#2-使用：" class="headerlink" title="2.使用："></a>2.使用：</h5><p>1.接口的默认方法，可以通过接口实现类对象，直接调用。<br>2.接口的默认方法，也可以被接口实现类进行覆盖重写。</p><p><img src="D:\Typora\images\image-20220319105609339.png" alt="image-20220319105609339"></p><h4 id="五-接口的静态方法定义与使用"><a href="#五-接口的静态方法定义与使用" class="headerlink" title="五.接口的静态方法定义与使用"></a>五.接口的静态方法定义与使用</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h5><p>从Java8开始，接口里允许定义静态方法。</p><p>格式：<br>public static 返回值类型 方法名称(参数列表){<br>        方法体<br>}<br>提示：就是将abstract或者default换成static即可，带上方法体。</p><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><p>注意事项：不能通过接口实现类的对象来调用接口当中的静态方法<br>正确用法：通过接口名称，直接调用其中的静态方法。</p><p>格式：<br>接口名称.静态方法名(参数);</p><p><img src="D:\Typora\images\image-20220319113612801.png" alt="image-20220319113612801"></p><h4 id="六-接口的私有方法定义与使用"><a href="#六-接口的私有方法定义与使用" class="headerlink" title="六.接口的私有方法定义与使用"></a>六.接口的私有方法定义与使用</h4><p>问题描述:<br>我们需要抽取一个共有方法，用来解决两个默认方法之间重复代码的问题。<br>但是这个共有方法不应该让实现类使用，应该是私有化的。</p><p>解决方案：<br>从Java9开始，接口当中允许定义私有。<br>1.普通私有方法，解决多个默认方法之间重复代码问题<br>格式：<br>private 返回值类型 方法名称(参数列表){<br>            方法体<br>}</p><p>2.静态私有方法，解决多个静态方法之间重复代码问题<br>格式：<br>private static 返回值类型 方法名称(参数列表){<br>            方法体<br>}</p><p><img src="D:\Typora\images\image-20220319121347161.png" alt="image-20220319121347161"></p><p><img src="D:\Typora\images\image-20220319121406945.png" alt="image-20220319121406945"></p><h4 id="七-接口的常量定义与使用"><a href="#七-接口的常量定义与使用" class="headerlink" title="七.接口的常量定义与使用"></a>七.接口的常量定义与使用</h4><h5 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h5><p>接口当中也可以定义“成员变量”，但必须使用public static final三个关键字进行修饰<br>从效果上看，这其实就是接口的【常量】。</p><p>格式：<br>public static final 数据类型 常量名称 &#x3D; 数据值<br>备注：<br>一旦使用final关键字进行修饰，说明不可改变。</p><p>注意事项：<br>1.接口当中的常量，可以省略public static final，注意：不写也照样是这样。<br>2.接口当中的常量，必须进行赋值，不能不赋值。<br>3.接口中常量的名称，使用完全大写的字母，多个单词用下划线进行分隔。（推荐命名规则）</p><h5 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h5><p>格式：<br>接口名称.常量名称</p><p><img src="D:\Typora\images\image-20220319121226197.png" alt="image-20220319121226197"></p><h4 id="八-继承父类并实现多个接口"><a href="#八-继承父类并实现多个接口" class="headerlink" title="八.继承父类并实现多个接口"></a>八.继承父类并实现多个接口</h4><p>使用接口的时候，需要注意：<br>1.接口时没有静态代码块或者构造方法的。<br>2.一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。<br>格式：<br>public class MyInterfaceImpl implements MyInterfaceA,MyInterfaceB{<br>          &#x2F;&#x2F;覆盖重写所有抽象方法<br>}<br>3.如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。<br>4.如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。<br>5.如果实现类所实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。<br>6.一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。（优先级是父类高于接口）</p><h4 id="九-接口之间的多继承"><a href="#九-接口之间的多继承" class="headerlink" title="九.接口之间的多继承"></a>九.接口之间的多继承</h4><p>1.类与类之间是单继承的。直接父类只有一个。<br>2.类与接口之间是多实现的。一个类可以实现多个接口。<br>3.接口与接口之间是多继承的。</p><p>注意事项：<br>1.多个父接口当中的抽象方法如果重复，没关系。<br>2.多个父接口当中的默认方法如果重复，哪门子接口必须进行默认方法的覆盖重写，【而且带着default关键字】</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>一个对象拥有多种形态，这就是：对象的多态性</p><p>extends继承或者implements实现，是多态性的前提。</p><h4 id="一-多态的格式与使用"><a href="#一-多态的格式与使用" class="headerlink" title="一.多态的格式与使用"></a>一.多态的格式与使用</h4><p>代码当中体现多态性，其实就是一句话：父类引用指向子类对象。</p><p>格式：             （左父右子）<br>父类名称 对象名 &#x3D; new 子类名称();<br>或者：<br>接口名称 对象名 &#x3D; new 实现类名称();</p><h4 id="二-多态中成员变量的使用特点"><a href="#二-多态中成员变量的使用特点" class="headerlink" title="二.多态中成员变量的使用特点"></a>二.多态中<u>成员变量</u>的使用特点</h4><p>访问成员变量的两种方式：<br>1.直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。<br>2.间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。</p><p><img src="D:\Typora\images\image-20220320192009088.png" alt="image-20220320192009088"></p><p><img src="D:\Typora\images\image-20220320192031191.png" alt="image-20220320192031191"></p><p><img src="D:\Typora\images\image-20220320191904883.png" alt="image-20220320191904883"></p><h4 id="三-多态中成员方法的使用特点"><a href="#三-多态中成员方法的使用特点" class="headerlink" title="三.多态中成员方法的使用特点"></a>三.多态中<u>成员方法</u>的使用特点</h4><p>在多态的代码中，成员方法的访问规则是：<br>          看new的是谁，就优先用谁，没有则向上找。</p><p><img src="D:\Typora\images\image-20220320192658351.png" alt="image-20220320192658351"></p><p>口诀：编译看左边，运行看右边。</p><p>对比一下：<br>成员变量：编译看左边，运行还看左边。<br>成员方法：编译看左边，运行看右边。</p><p><img src="D:\Typora\images\image-20220320192831220.png" alt="image-20220320192831220"></p><h4 id="四-使用多态的好处"><a href="#四-使用多态的好处" class="headerlink" title="四.使用多态的好处"></a>四.使用多态的好处</h4><p><img src="D:\Typora\images\image-20220320193100746.png" alt="image-20220320193100746"></p><h4 id="五-对象的向上转型"><a href="#五-对象的向上转型" class="headerlink" title="五.对象的向上转型"></a>五.对象的向上转型</h4><p>对象的向上转型，就是：父类引用指向子类对象。<br>向上转型一定是安全的，没有问题。但也有一个弊端：对象一旦向上转型为父类，那么就无法调用子类原本特有的内容。</p><p>解决方案：用对象的向下转型【还原】。</p><p><img src="D:\Typora\images\image-20220321095032725.png" alt="image-20220321095032725"></p><p><img src="D:\Typora\images\image-20220321095118340.png" alt="image-20220321095118340"></p><h4 id="六-对象的向下转型"><a href="#六-对象的向下转型" class="headerlink" title="六.对象的向下转型"></a>六.对象的向下转型</h4><p><img src="D:\Typora\images\image-20220321100434641.png" alt="image-20220321100434641"></p><p><img src="D:\Typora\images\image-20220321100505007.png" alt="image-20220321100505007"></p><h4 id="七-向下转型用instanceof关键字进行类型判断"><a href="#七-向下转型用instanceof关键字进行类型判断" class="headerlink" title="七.向下转型用instanceof关键字进行类型判断"></a>七.向下转型用instanceof关键字进行类型判断</h4><p>向下转型时如何才能知道一个父类引用对象，本来是什么子类？</p><p>格式：<br>对象 instanceof 类名称<br>这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面的类型的实例。</p><p><img src="D:\Typora\images\image-20220321102214681.png" alt="image-20220321102214681"></p><p><img src="D:\Typora\images\image-20220321102302569.png" alt="image-20220321102302569"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="一-final关键字"><a href="#一-final关键字" class="headerlink" title="一.final关键字"></a>一.final关键字</h4><p>final关键字代表最终的、不可改变的。</p><h5 id="1-final关键字的概念与四种用法"><a href="#1-final关键字的概念与四种用法" class="headerlink" title="1.final关键字的概念与四种用法"></a>1.final关键字的概念与四种用法</h5><p>常见的四种用法：<br>1.可以用来修饰一个类<br>2.可以用来修饰一个方法<br>3.可以用来修饰一个局部变量<br>4.可以用来修饰一个成员变量</p><h5 id="2-final关键字用来修饰类"><a href="#2-final关键字用来修饰类" class="headerlink" title="2.final关键字用来修饰类"></a>2.final关键字用来修饰类</h5><p>当final关键字用来修饰一个类的时候，格式：<br>public final class 类名称 {<br>           &#x2F;&#x2F;…<br>}</p><p>含义：当前这个类不能有任何的子类。（太监类：有父类无子类）<br>注意：一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写（因为没儿子）。<br>           一个final类可以对自己父类的方法进行覆盖重写。</p><h5 id="3-final关键字用来修饰成员方法"><a href="#3-final关键字用来修饰成员方法" class="headerlink" title="3.final关键字用来修饰成员方法"></a>3.final关键字用来修饰成员方法</h5><p>当final关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。</p><p>格式：<br>修饰符 final 返回值类型 方法名称 (参数列表){<br>           &#x2F;&#x2F; 方法体<br>}</p><p>对于类、方法来说，abstract关键字和final关键字不能同时使用，因为矛盾。</p><h5 id="4-final关键字用来修饰局部变量"><a href="#4-final关键字用来修饰局部变量" class="headerlink" title="4.final关键字用来修饰局部变量"></a>4.final关键字用来修饰局部变量</h5><p>一旦使用final用来修饰局部变量，那么这个变量就不能进行更改 。<br>”一次赋值，终生不变“</p><p><img src="D:\Typora\images\image-20220321105215494.png" alt="image-20220321105215494"></p><p>对于基本类型来说，不可变说的是变量当中的数据不可改变<br>对于引用类型来说，不可变说的是变量当中的地址值不可改变</p><p><img src="D:\Typora\images\image-20220321105344453.png" alt="image-20220321105344453"></p><h5 id="5-final关键字用来修饰成员变量"><a href="#5-final关键字用来修饰成员变量" class="headerlink" title="5.final关键字用来修饰成员变量"></a>5.final关键字用来修饰成员变量</h5><p>对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。</p><p>1.由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。<br>2.对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。<br>3.必须保证类当中所有重载的构造方法，都最终会对final的成员变量进行赋值。</p><h4 id="二-四种权限修饰符"><a href="#二-四种权限修饰符" class="headerlink" title="二.四种权限修饰符"></a>二.四种权限修饰符</h4><p>Java中有四种发权限修饰符：<br>                                  public   &gt;    protected    &gt;     (default)      &gt;      private<br>同一个类                    yes             yes                     yes                    yes<br>同一个包                    yes             yes                     yes                    no<br>不同包子类                yes             yes                     no                      no<br>不同包非子类             yes            no                       no                      no   </p><p>注意事项：（default）并不是关键字，而是什么都不写</p><h4 id="三-内部类"><a href="#三-内部类" class="headerlink" title="三.内部类"></a>三.内部类</h4><p>如果一个事物的内部包含另一个事物，那么这就是一个类内部包含一个类。<br>例如：身体和心脏的关系。又如：汽车和发动机的关系。</p><p>分类：<br>1.成员内部类<br>2.局部内部类（包含匿名内部类）</p><h5 id="1-成员内部类的定义"><a href="#1-成员内部类的定义" class="headerlink" title="1.成员内部类的定义"></a>1.成员内部类的定义</h5><p>格式：<br>修饰符 class 类名称{<br>         修饰符 class 内部类名称{<br>                  &#x2F;&#x2F; …<br>          }<br>          &#x2F;&#x2F; …<br>}</p><p>注意：内用外，随意访问；外用内，需要内部类对象。</p><h5 id="2-成员内部类的使用"><a href="#2-成员内部类的使用" class="headerlink" title="2.成员内部类的使用"></a>2.成员内部类的使用</h5><p>1.间接方式：在外部类的方法当中，使用内部类，然后main只调用外部类方法。<br>2.直接方式，公式：<br>平时创建对象是：类名称 对象名 &#x3D; new 类名称<br>而内部类是【外部类名称.内部类名称 对象名 &#x3D; new 外部类名称().new 内部类名称();】</p><h5 id="3-内部类的同名变量访问"><a href="#3-内部类的同名变量访问" class="headerlink" title="3.内部类的同名变量访问"></a>3.内部类的同名变量访问</h5><p>如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量</p><p><img src="D:\Typora\images\image-20220330203930591.png" alt="image-20220330203930591"></p><h5 id="4-局部内部类的定义"><a href="#4-局部内部类的定义" class="headerlink" title="4.局部内部类的定义"></a>4.局部内部类的定义</h5><p>如果一个类是定义在一个方法内部的，那么这就是一个局部内部类<br>“局部”：只有当前所属的方法才能使用他，出了这个方法外面就不能用了</p><p>定义格式：<br>修饰符 class 外部类名称{<br>          修饰符  返回值类型  外部类方法名称(参数列表){<br>                     class 局部内部类名称{<br>                            &#x2F;&#x2F;…<br>                     }<br>          }<br>}</p><p>类的权限修饰符：<br>public &gt; protected  &gt; (default) &gt; private<br>定义一个类的时候，权限修饰符规则：<br>1.外部类：public &#x2F; （default）<br>2..成员内部类：public &#x2F; protected &#x2F; （default） &#x2F; private<br>3.局部内部类：什么都不能写</p><h5 id="5-局部内部类的final问题"><a href="#5-局部内部类的final问题" class="headerlink" title="5.局部内部类的final问题"></a>5.局部内部类的final问题</h5><p>局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】</p><p>备注：从java8+开始，只要局部变量不变，那么final关键字可以省略。</p><p>原因：<br>1.new出来的对象在堆内存当中。<br>2.局部变量是跟着方法走的，在栈内存当中。<br>3.方法运行结束之后，立刻出栈，局部变量就会立刻消失<br>4.但是new出来的对象会在堆当中持续存在，直到垃圾回收消失</p><h5 id="6-匿名内部类"><a href="#6-匿名内部类" class="headerlink" title="6.匿名内部类"></a>6.匿名内部类</h5><p>如果接口的实现类（或者是父类的子类）只需要使用唯一一次，那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】</p><p>匿名内部类的定义格式：<br>接口名称 对象名 &#x3D; new 接口名称(){<br>        &#x2F;&#x2F;覆盖重写所有抽象方法<br>};</p><p>使用匿名内部类，都不用实现类了，最后别忘了大括号结尾有分号。</p><p><img src="D:\Typora\images\image-20220330213035284.png" alt="image-20220330213035284"></p><h5 id="7-匿名内部类的注意事项："><a href="#7-匿名内部类的注意事项：" class="headerlink" title="7.匿名内部类的注意事项："></a>7.匿名内部类的注意事项：</h5><p>对格式 “new 接口名称(){…}” 进行解析：<br>1.new代表创建对象的动作<br>2.接口名称就是匿名内部类需要实现哪个接口<br>3.{…}这才是匿名内部类的内容</p><p>另外还要注意几点问题：<br>1.匿名内部类，在【创建对象】的时候，只能使用唯一一次。<br>   如果希望多次创建对象，而且类的内容一样的话，那么就必须使用单独定义的实现类了。<br>2.匿名对象，在【调用方法】的时候，只能调用唯一一次。<br>   如果希望同一个对象，调用多次方法，那么必须给对象起个名字<br>3.匿名内部类是省略了【实现类&#x2F;子类】，但是匿名对象是省略了【对象名称】<br>   强调：匿名内部类和匿名对象不是一回事！！！</p><p><img src="D:\Typora\images\image-20220330214842968.png" alt="image-20220330214842968"></p><p><img src="D:\Typora\images\image-20220330215436259.png" alt="image-20220330215436259"></p><h5 id="8-类作为成员变量类型"><a href="#8-类作为成员变量类型" class="headerlink" title="8.类作为成员变量类型"></a>8.类作为成员变量类型</h5><p>成员变量不光能用基本类型，还可以用任何一种类class</p><h4 id="四-object类的方法"><a href="#四-object类的方法" class="headerlink" title="四.object类的方法"></a>四.object类的方法</h4><p>java.lang.Object</p><p>类 <code>Object</code> 是类层次结构的根类(最顶层的类)。每个类都使用 <code>Object</code>  作为超类(父类)。所有对象（包括数组）都实现这个类的方法。 </p><h5 id="1-toString方法"><a href="#1-toString方法" class="headerlink" title="1.toString方法"></a>1.toString方法</h5><p>创建的类默认继承了Object类，所以可以使用Object类中的toString方法<br>String toString()    返回该对象的字符串表示。</p><p>直接打印对象的名字，其实就是调用对象的toString方法 p &#x3D; p.toString();<br>打印出来的是对象的地址值<br>直接打印对象的地址值没有意义，需要重写Object类中的toString方法</p><p>看一个类是否重写了toString方法，直接打印这个类对应对象的名字即可<br>如果没有重写，那么打印的就是对象的地址值（默认）<br>如果重写了，纳闷就按照重写的方式打印</p><h5 id="2-equals方法"><a href="#2-equals方法" class="headerlink" title="2.equals方法"></a>2.equals方法</h5><h6 id="1）-定义"><a href="#1）-定义" class="headerlink" title="1）.定义"></a>1）.定义</h6><p>创建的类默认继承了Object类，所以可以使用Object类中的equals方法<br>boolean equals(Object obj)   指示其他某个对象是否与此对象”相等”。</p><p>Object类equals方法的源码：<br>public boolean equals(Object obj){<br>        return (this &#x3D;&#x3D; obj);<br>}</p><p><img src="D:\Typora\images\image-20220331222658425.png" alt="image-20220331222658425"></p><h6 id="2）-重写equals方法"><a href="#2）-重写equals方法" class="headerlink" title="2）.重写equals方法"></a>2）.重写equals方法</h6><p>Object类的equals方法默认比较的是两个对象的地址值，没有意义<br>所以需要重写equals方法，比较两个对象的属性值<br>对象的属性值一样，返回true ，否则返回false</p><p>问题：<br>隐含着一个多态<br>Object obj &#x3D; p2 &#x3D; new person(张三,18)       &#x2F;&#x2F;姓名张三，年龄18<br>多态弊端：无法使用子类特有的内容（属性，方法）<br>解决：可以使用向下转型（强转）把Object类型装换为Person</p><p>null是不能调用方法的，会抛出空指针异常</p><h4 id="五-StringBuilder"><a href="#五-StringBuilder" class="headerlink" title="五.StringBuilder"></a>五.StringBuilder</h4><p>1.原理 ：</p><p>String类：<br>字符串是常量，他们的值在创建后不能更改 。<br>字符串的底层是一个被final修饰的数组，不能改变，是一个常量</p><p>StringBuilder类：<br>字符串缓冲区，可以提高字符串的操作效率（看成一个长度可以变化的字符串）<br>底层也是一个数组，但是没有被final修饰，可以改变长度<br>byte[]  value &#x3D; new byte[16];</p><p>StringBuilder在内存中始终是一个数组，占用空间少，效率高<br>如果超出了StringBuilder的容量，会自动扩容 </p><p>2.StringBuilder的构造方法</p><p>构造方法：<br>Public StringBuilder()：构造一个空的StringBuilder容器。<br>Public StringBuilder(String  str)：构造一个StringBuilder容器，并将字符串添加进去。</p><p>3.StringBuilder类的append方法 </p><p>StringBuilder类的成员方法：<br>public StringBuilder append(…)：添加任意类型数据的字符串形式，并返回当前对象自身。<br>参数：可以是任意的数据类型</p><p>使用append方法往StringBuilder中添加数据<br>append方法返回的是this</p><p><img src="D:\Typora\images\image-20220404101242444.png" alt="image-20220404101242444"></p><p>简单写法：链式编程：方法的返回值是一个对象，可以根据对象继续调用方法</p><p><img src="D:\Typora\images\image-20220404101430919.png" alt="image-20220404101430919"></p><p>4.StringBuilder类的toString方法</p><p>StringBuilder和String可以互相转换：<br>      String -&gt; StringBuilder：可以使用StringBuilder的构造方法<br>                 StringBuilder(String  str)：构造一个字符串生成器，并初始化为指定的字符串内容<br>      StringBuilder -&gt; String：可以使用StringBuilder中的toString方法<br>                  public String toString()：将当前 StringBuildr对象转换为String对象</p><h4 id="六-包装类"><a href="#六-包装类" class="headerlink" title="六.包装类"></a>六.包装类</h4><p>基本数据类型的数据，使用起来非常的方便，但是没有对应的方法来操作这些数据<br>所以我们可以使用一个类，把基本类型的数据包装起来，这个类就叫包装类<br>在包装类中可以定义一些方法，用来操作基本类型的数据</p><p>1.装箱与拆箱</p><p>装箱：把基本类型的数据，包装到包装类中（基本类型的数据 - &gt; 包装类）<br>           构造方法：<br>                      Integer(int value)：构造一个新分配的 <code>Integer</code> 对象，它表示指定的 <code>int</code> 值。<br>                      Integer(String s)：构造一个新分配的 <code>Integer</code> 对象，它表示 <code>String</code> 参数所指示的 <code>int</code>  值。<br>                           第二个构造方法传递的是字符串，必须是基本类型的字符串，否则会抛出异常。”100“正确， ”a“抛异常<br>           静态方法：<br>                      Static Integer valueOf(int i)：返回一个表示指定的 <code>int</code> 值的 <code>Integer</code> 实例。<br>                      Static Integer valueOf(String s)：返回保存指定的 <code>String</code> 的值的 <code>Integer</code> 对象。</p><p>拆箱：在包装类中取出基本类型的数据（包装类 - &gt;  基本类型的数据 ）<br>           成员方法：int intValue()：以 <code>int</code> 类型返回该 <code>Integer</code> 的值。</p><p>2.自动装箱与自动拆箱</p><p>基本类型的数据和包装类之间可以自动的相互转换<br>JDK1.5之后出现的新特性</p><p>自动装箱：直接把int类型的整数型赋值给包装类<br>                  Integer in &#x3D; 1   ：就相当于Integer in &#x3D; new Integer(1):</p><p>自动拆箱：in是包装类，无法直接参与运算，可以自动转换为基本类型的数据，在参与计算<br>                  in + 2 ：就相当于in.intvalue() + 3 &#x3D; 3;<br>                  in &#x3D; in + 2 ：就相当于in &#x3D; new Integer(3) 自动装箱</p><p>3.基本类型与字符串类型之间的相互转换</p><p>基本类型 -&gt; 字符串<br>         1.基本类型数据的值+” “      （直接加空字符串），最简单的方式（工作中常用）<br>         2.使用包装类中的静态方法<br>                     static String toString(int i) 返回一个表示指定整数的String对象。<br>         3.使用String类中的静态方法<br>                     static String valueOf(int i) 返回int参数的字符串表示形式。<br>字符串 -&gt; 基本类型<br>         使用包装类的静态方法parseXX( “字符串”)<br>                     Integer类：static int parseInt(String s)<br>                     Double类：static double parseDouble(String s)<br>                     …</p><h4 id="七-Junit单元测试"><a href="#七-Junit单元测试" class="headerlink" title="七.Junit单元测试"></a>七.Junit单元测试</h4><p>测试分类：<br>        1.黑盒测试：不需要写代码，给输入值期望的值<br>        2.白盒测试：需要写代码。关注程序具体的执行流程</p><p>Junit使用：白盒测试<br>           步骤：<br>                    1.定义一个测试类（测试用例）<br>                                  建议：-测试类名：被测试的类名Test          如CalculatorTest<br>                                             -包名：xxx.xxx.xx.test              如com.yc.test<br>                    2.定义测试方法：可以独立运行<br>                                  建议：-方法名：test测试的方法名           如testAdd()<br>                                             -返回值：void<br>                                             -参数列表 ：空参<br>                    3.给方法加@Test<br>                    4.导入junit依赖环境</p><p>判定结果：（看运行结果的颜色）<br>        红色：失败<br>        绿色：成功<br>        一般我们使用断言操作来处理结果<br>                   Assert.assertEquals（期望的结果，运行的结果）;</p><p><img src="D:\Typora\images\image-20220506105447363.png" alt="image-20220506105447363"></p><p><img src="D:\Typora\images\image-20220506105530107.png" alt="image-20220506105530107"></p><p>  补充：<br>          @Before：<br>                    修饰的方法会在测试方法之前被自动执行<br>          @After：<br>                    修饰的方法会在测试方法执行之后自动被执行（即使方法出现异常，该方法依然会被执行）</p><p><img src="D:\Typora\images\image-20220506113556012.png" alt="image-20220506113556012"></p><p><img src="D:\Typora\images\image-20220506113702209.png" alt="image-20220506113702209"></p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h4><p>反射：框架设计的灵魂<br>           框架：半成品软件。可以在框架的基础上进行软件的开发，简化编码<br>           概念：将类的各个组成部分封装成其他对象，这就是反射机制<br>                    好处：<br>                                 1.可以在程序运行过程中，操作这些对象。<br>                                 2.可以解耦，提高程序的可扩展性。</p><img src="D:\Typora\images\image-20220506115549597.png" alt="image-20220506115549597"  /><h4 id="二-Class对象功能"><a href="#二-Class对象功能" class="headerlink" title="二.Class对象功能"></a>二.Class对象功能</h4><h5 id="1-获取Class对象的方式："><a href="#1-获取Class对象的方式：" class="headerlink" title="1.获取Class对象的方式："></a>1.获取Class对象的方式：</h5><p>​         三种方式对应着上图中的三个阶段</p><p>​         1.Class.forName（“全类名”）：将字节码文件加载进内存，返回Class对象<br>​                    多用于配置文件，将类名定义在配置文件中。读取文件，加载类</p><p>​         2.类名.class：通过类名的属性class获取<br>​                    多用于参数的传递</p><p>​         3.对象.getClass（）：getClass（）方法在object类中定义着<br>​                    多用于对象的获取字节码的方式</p><p>用&#x3D;&#x3D;比较三个对象，都是ture<br>结论：同一字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><h5 id="2-Class对象功能"><a href="#2-Class对象功能" class="headerlink" title="2.Class对象功能"></a>2.Class对象功能</h5><p>获取功能：（以下方法中：不带Declared只能获取公共的； 带Declared不考虑修饰符，什么都能获取到，若要获取私有的，需要暴力反射）<br>         1.获取成员变量们<br>                Field[] getFields()：获取所有public修饰的成员变量<br>                Field getField(String name)：获取指定名称的 public修饰的成员变量</p><p>​                Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符<br>​                Field getDeclaredFields(String name)</p><p>​         2.获取构造方法们<br>​                Constructor<?>[] getConstructors()​                Constructor<T> getConstructor(Class<?>… parameterTypes)</p><p>​                Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) ​                Constructor<?>[] getDeclaredConstructors() </p><p>​         3.获取成员方法们<br>​                Method[] getMethods()<br>​                Method getMethod(String name, Class&lt;?&gt;… parameterTypes)  </p><p>​                Method[] getDeclaredMethods()<br>​                Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes) </p><p>​         4.获取类名<br>​                String getName()  </p><p>1.Field：成员变量<br>         操作：<br>                  1.设置值<br>                            void set(Object obj, Object value)<br>                  2.获取值<br>                            object get(Object obj)<br>                  3.忽略访问权限修饰符的安全检查（因为私有的是不能被访问的）<br>                            setAccessible(true);  ：暴力反射</p><p>2.Constructor：构造方法<br>         创建对象：<br>                   T newInstance(Object… initargs)<br>                   如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p><p>3.Method：方法对象<br>         执行方法：<br>                   Object invoke(Object obj, Object… args)<br>         获取方法名称：<br>                   String getName：获取方法名</p><h4 id="三-案例"><a href="#三-案例" class="headerlink" title="三.案例"></a>三.案例</h4><p>需求：写一个”框架“，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<br>          实现：<br>                    1.配置文件<br>                    2.反射<br>          步骤：<br>                    1.将需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>                    2.在程序中加载读取配置文件<br>                    3.使用反射技术来加载类文件进内存<br>                    4.创建对象<br>                    5.执行方法</p><p>以后看到配置文件里边有的地方使用了全类名，第一时间应该知道 用的是反射</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="一-概念"><a href="#一-概念" class="headerlink" title="一.概念"></a>一.概念</h4><p>注释概念：用文字描述程序的。给程序员看的<br>注解概念：说明程序的。给计算机看的</p><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><p>概念描述：<br>JDK1.5之后的新特性<br>说明程序的</p><p>作用分类：<br>1.编写文档：通过代码里标识的注解生成为文档【生成文档doc文档】<br>2.代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>3.编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p><h4 id="二-JDK内置注解"><a href="#二-JDK内置注解" class="headerlink" title="二.JDK内置注解"></a>二.JDK内置注解</h4><p>JDK中预定义的一些注解<br>@Override：检测被该注解标注的方法是否是继承自父类（接口）的<br>@Deprecated：该注解标注的内容，表示已过时<br>@SuppressWarnings：压制警告        *一般传递参数all    @SuppressWarnings(“all”)</p><h4 id="三-自定义注解"><a href="#三-自定义注解" class="headerlink" title="三.自定义注解"></a>三.自定义注解</h4><p>1.格式：<br>             元注解<br>             public @interface 注解名称{<br>                          属性列表;<br>             }</p><p>2.本质：注解本质上就是一个接口，该接口默认继承Annotation接口<br>              public interface MyAnno extends java.lang.annotation.Annotation{}    &#x2F;&#x2F;MyAnno是自己定义的注解名称</p><p>3.属性：接口中的抽象方法<br>          要求：<br>                    1.属性的返回值类型有下列取值<br>                               基本数据类型<br>                               String<br>                               枚举<br>                               注解<br>                               以上类型的数组</p><p>​                    2.定义了属性，在使用时需要给属性赋值<br>​                              1）.如果定义属性时，使用default关键字给属性默认初始值，则使用注解时，可以不进行属性的赋值<br>​                              2）.如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可<br>​                              3）.数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}省略</p><p>4.元注解：用于描述注解的注解<br>        *@Target：描述注解能够作用的位置<br>                *ElementType取值：<br>                        *TYPE：可以作用于类上<br>                        *METHOH：可以作用于方法上<br>                        <em>FIELD：可以作用于成员变量上</em><br>        *@Retention：描述注解被保留的阶段<br>                *@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到<br>        *@Documented：描述注解是否被抽取到api文档中<br>        *@Inherited：描述注解是否被子类继承</p><h4 id="四-注解解析"><a href="#四-注解解析" class="headerlink" title="四.注解解析"></a>四.注解解析</h4><p>在程序使用（解析）注解：获取注解中定义的属性值<br>        1.获取注解定义的位置的对象（Class，Method，Field）<br>        2.获取指定的注解<br>                *getAnnotation（Class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProImpl</span> <span class="keyword">implements</span> <span class="title class_">Pro</span>&#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">className</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;cn.yc.annotation.Demo1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">methodName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​3.调用注解中的抽象方法获取配置的属性值</p><p>小结：<br>        1.以后大多数时候，我们会使用注解，而不是自定义注解<br>        2.注解给谁用？<br>                1）.编译器<br>                2）.解析程序<br>        3.注解不是程序的一部分，可以理解为注解就是一个标签</p><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>1.概念<br>2.语法<br>3.解析</p><h4 id="一-概念-1"><a href="#一-概念-1" class="headerlink" title="一.概念"></a>一.概念</h4><p>1.概念：Extensible Markup Language可扩展标记语言<br>         *可扩展：标签都是自定义的。</p><p>2.功能<br>         *存储数据<br>                  1.配置文件<br>                  2.在网络中传输 </p><p>3.xml与html的区别<br>        1.xml标签都是自定义的，html标签是预定义的<br>        2.xml的语法严格，html语法松散的<br>        3.xml是存储数据的，html是展示数据</p><p>*注：w3c：万维网联盟（xml和html的父亲）</p><h4 id="二-语法"><a href="#二-语法" class="headerlink" title="二.语法"></a>二.语法</h4><p>1.基本语法：<br>       1）.xml文档的后缀名   .xml<br>       2）.xml第一行必须定义为文档声明<br>       3）.xml文档中有且只有一个根标签<br>       4）.属性值必须使用引号（单双都可）引起来    （html不用引号）<br>       5）.标签必须正确关闭<br>       6）.xml标签名称区分大小写     （html不区分）</p><p>2.快速入门：<br><?xml version='1.0' ?></p><users><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></users><p>3.组成部分：<br>          1）.文档声明<br>                      (1).格式：&lt;?xml 属性列表 ？&gt;<br>                      (2).属性列表：<br>                                  *version：版本号<br>                                  *encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1<br>                                  *standalone：是否独立。取值有两个：yes：不依赖其他文件；no：以来其他文件</p><p>​          2）.指令（了解）：结合CSS的<br>​          3）.标签：标签名称自定义的<br>​                           规则：*名称可以含字母、数字以及其他的字符<br>​                                    *名称不能以数字或者标点符号开始<br>​                                    *名称不能以字符 “xml”（或者 XML、Xml）开始<br>​                                    *名称不能包含空格</p><p>​          4）.属性：id属性值唯一<br>​          5）.文本：<br>​                           CDATA区：在该区域中的数据会被原样展示<br>​                                     格式：<code>&lt;![CDATA[ 数据 ]]&gt;</code></p><p><img src="D:\Typora\images\image-20220505112251513.png" alt="image-20220505112251513"></p><h4 id="三-约束"><a href="#三-约束" class="headerlink" title="三.约束"></a>三.约束</h4><p>1.约束：规定xml文档的书写规则<br>              作为框架的使用者（程序员）：<br>                    1.能够在xml中引入约束文档<br>                    2.能够简单的读懂约束文档</p><p><img src="D:\Typora\images\image-20220505113340228.png" alt="image-20220505113340228"></p><p>2.分类：<br>         1.DTD：一种简单的约束技术<br>         2.Schema：一种复杂的约束技术</p><p>DTD：<br>       引入dtd文档到xml文档中<br>               内部dtd：将约束规则定义在xml文档中<br>               外部dtd：将约束规则定义在外部 的dtd文件中<br>                         本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件位置&quot;&gt;</code><br>                         网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></p><p>Schema：<br>         1.填写xml文档的根元素<br>         2.引入xsi前缀（好多取值）<br>                    xmlns:xsi&#x3D;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a><br>         3.引入xsd文件命名空间（后边的是schema文档的路径，前边的是给这个路径起了个名字，称为命名空间）<br>                    xsi:schemaLocation&#x3D;”<a href="http://www.itcast.cn/xml">http://www.itcast.cn/xml</a>   student.xsd”<br>         4.为每一个xsd约束声明一个前缀，作为标识       xmls&#x3D;”<a href="http://www.itcast.cn/xml&quot;">http://www.itcast.cn/xml&quot;</a></p><p><img src="D:\Typora\images\image-20220505141308165.png" alt="image-20220505141308165"></p><h4 id="四-解析"><a href="#四-解析" class="headerlink" title="四.解析"></a>四.解析</h4><p>解析：操作xml文档，将文档中的数据读取到内存中<br>        *操作xml文档<br>                 1.解析（读取）：将文档中的数据读取到内存中<br>                 2.写入：将内存中的数据保存到xml文档中。持久化的存储</p><p>​        *解析xml的方式：<br>​                 1.DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<br>​                           优点：操作方便，可以对文档进行CRUD（增删改查）的所有操作<br>​                           缺点：占内存<br>​                 2.SAX：逐行读取，基于事件驱动的<br>​                           优点：不占内存<br>​                           缺点：只能读取，不能增删改</p><p>​        *xml常见的解析器：<br>​                 1.JAXP：sun公司提供的解析器，支持dom和sax两种思想<br>​                 2.DOM4J：一款非常优秀的解析器<br>​                 3.Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。<br>​                 4.PULL：Android操作系统内置的解析器，sax方式的</p><p>Jsoup快速入门：<br>         步骤：<br>                 1.导入jar包<br>                 2.获取Document对象<br>                 3.获取对应的标签Element对象<br>                 4.获取数据</p><p>​         代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">    <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">    <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树----&gt;Document</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//3.获取元素对象Element</span></span><br><span class="line">    <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看长度</span></span><br><span class="line">    System.out.println(elements.size());</span><br><span class="line">    <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">    <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//3.2获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> element.text();</span><br><span class="line">    System.out.println(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中对象的使用：<br>         1.Jsoup：工具类，可以理解html或xml文档，返回Document<br>                   *parse：解析html或xml文档，返回Document<br>                             *parse(File in,String charseName)：解析xml或html文件的<br>                             *parse(String html)：解析xml或html字符串<br>                             *parse(URL url,int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</p><p>​         2.Document：文档对象。代表内存中的dom树<br>​                   *获取Element对象<br>​                             *getElementsById(String id)：根据id属性值获取唯一的element对象<br>​                             *getElementsByTag(String tagName)：根据标签名称获取元素对象集合<br>​                             *getElementsByAttribute(String key)：根据属性名称获取元素对象集合<br>​                             *getElementsByAttributeValue(String key,String value)：根据对应的属性名和属性值获取元素对象的集合</p><p>​         3.Elements：元素Element对象的集合。可以当作ArrayList<Element>来使用</p><p>​         4.Element：元素对象<br>​                   *获取子元素标签<br>​                             *getElementsById(String id)：根据id属性值获取唯一的element对象<br>​                             *getElementsByTag(String tagName)：根据标签名称获取元素对象集合<br>​                             *getElementsByAttribute(String key)：根据属性名称获取元素对象集合<br>​                             *getElementsByAttributeValue(String key,String value)：根据对应的属性名和属性值获取元素对象的集合<br>​                   *获取属性值<br>​                             *String attr(String key)：根据属性名称获取属性值<br>​                   *获取文本内容<br>​                             *String text()：获取所有子标签的纯文本内容<br>​                             *String html()：获取标签体的所有内容（包括子标签的标签和文本内容）</p><p>​         5.node：节点对象<br>​                   *是Document和 Element的父类</p><p>快捷查询方式：<br>           1.selector：选择器<br>                  使用方法：Elements         select(String cssQuery)<br>                             语法：参考Selector类中定义的语法</p><p>​           2.XPath：XPath即为XML路径语言（XML Path Language），它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言。<br>​                  使用Jsoup的Xpath需要额外导入jar包<br>​                  使用w3cschool参考手册，使用xpath的语法完成查询</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/hello-world/"/>
      <url>/2020/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
